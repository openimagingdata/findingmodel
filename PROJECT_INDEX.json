{"at":"2025-10-29T15:17:05.571350","root":".","tree":[".","\u251c\u2500\u2500 docs/","\u251c\u2500\u2500 evals/ (4 files)","\u2502   \u2514\u2500\u2500 README.md","\u251c\u2500\u2500 notebooks/ (10 files)","\u2502   \u2514\u2500\u2500 data/ (2 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 scripts/ (1 files)","\u251c\u2500\u2500 specs/","\u2502   \u2514\u2500\u2500 001-ai-based-finding/","\u2502       \u2514\u2500\u2500 contracts/","\u251c\u2500\u2500 src/ (29 files)","\u2502   \u2514\u2500\u2500 findingmodel/ (29 files)","\u2502       \u251c\u2500\u2500 data/","\u2502       \u2514\u2500\u2500 tools/ (14 files)","\u2502           \u2514\u2500\u2500 prompt_templates/","\u251c\u2500\u2500 tasks/","\u2502   \u251c\u2500\u2500 done/","\u2502   \u2514\u2500\u2500 refactoring/","\u251c\u2500\u2500 test/ (23 files)"],"stats":{"total_files":66,"total_directories":29,"fully_parsed":{"python":55},"listed_only":{"json":11},"markdown_files":69},"f":{"evals/base.py":["p",{"ExactMatchEvaluator":["23",["evaluate:49:(self, ctx:EvaluatorContext[InputT, str])>float::"]],"ContainsEvaluator":["70",["__init__:101:(self, case_sensitive:bool = False)>None::","evaluate:109:(self, ctx:EvaluatorContext[InputT, str])>float::"]],"KeywordMatchEvaluator":["134",["__init__:181:(self, keyword_field:str, text_extractor:Callable[[OutputT], str], partial_credit:bool = True,)>None::","evaluate:193:(self, ctx:EvaluatorContext[InputT, OutputT])>float::"]],"StructuralValidityEvaluator":["223",["__init__:257:(self, required_fields:list[str] | None = None)>None::","evaluate:266:(self, ctx:EvaluatorContext[InputT, BaseModel])>float::"]],"ErrorHandlingEvaluator":["293",["__init__:334:(self, error_field:str = \"error\")>None::","evaluate:343:(self, ctx:EvaluatorContext[InputT, OutputT])>float::"]],"AgentEvaluationSuite":["374",["create_successful_cases:473:(self)>list[Case[InputT, ExpectedT]]::","create_failure_cases:485:(self)>list[Case[InputT, ExpectedT]]::","create_edge_cases:498:(self)>list[Case[InputT, ExpectedT]]::","execute_agent:511:async (self, input_data:InputT)>ActualT::","get_all_cases:525:(self)>list[Case[InputT, ExpectedT]]:create_edge_cases,create_failure_cases,create_successful_cases:","build_dataset:536:(self, evaluators:list[Evaluator])>Dataset:get_all_cases:"]]}],"evals/model_editor.py":["p",["load_fm_json:131:(filename:str)>str::Load a .fm.json file from the test data directory.","create_successful_edit_cases:137:()>list[ModelEditorCase]:load_fm_json:Create cases for successful edits that should be applied.","create_rejection_cases:210:()>list[ModelEditorCase]:load_fm_json:Create cases for edits that should be rejected.","create_markdown_edit_cases:279:()>list[ModelEditorCase]:load_fm_json:Create cases for markdown-based edits.","run_model_editor_task:678:async (input_data:ModelEditorInput)>ModelEditorActualOutput:evaluate:","run_model_editor_evals:832:async ()>EvaluationReport[ ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput ]:main,run_model_editor_evals:"],{"ModelEditorInput":["41",[]],"ModelEditorExpectedOutput":["49",[]],"ModelEditorActualOutput":["59",[]],"ModelEditorCase":["68",["__init__:82:(self, name:str, model_json:str, command:str, edit_type:str, should_succeed:bool, should_preserve_id:bool = True, added_attribute_names:list[str] | None = None, rejection_keywords:list[str] | None = None, changes_keywords:list[str] | None = None,)>None:__init__:","_execute:106:async (self, input_data:ModelEditorInput)>ModelEditorActualOutput:evaluate:"]],"IDPreservationEvaluator":["340",["evaluate:373:(self, ctx:EvaluatorContext[ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput])>float::"]],"AttributeAdditionEvaluator":["399",["evaluate:433:(self, ctx:EvaluatorContext[ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput])>float::"]],"ChangeTrackingEvaluator":["468",["evaluate:507:(self, ctx:EvaluatorContext[ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput])>float::"]],"RejectionAccuracyEvaluator":["542",["evaluate:581:(self, ctx:EvaluatorContext[ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput])>float::"]],"ContentPreservationEvaluator":["616",["evaluate:647:(self, ctx:EvaluatorContext[ModelEditorInput, ModelEditorActualOutput, ModelEditorExpectedOutput])>float::"]]}],"evals/utils.py":["p",["load_fm_json:18:(filename:str)>str:load_fm_json:","create_mock_edit_result:43:(model:FindingModelFull, changes:list[str] | None = None, rejections:list[str] | None = None,)>\"model_editor.EditResult\":create_mock_edit_result:","compare_models:75:(model1:FindingModelFull, model2:FindingModelFull)>bool:compare_models:","extract_text_for_keywords:96:(changes:list[str], rejections:list[str])>str:extract_text_for_keywords:","get_attribute_names:122:(model:FindingModelFull)>set[str]:get_attribute_names:"]],"notebooks/demo_anatomic_location_search.py":["p",["perform_search_stages:23:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","_create_finding_info:67:(finding_name:str, description:Optional[str])>tuple[FindingInfo, str, float]:_async_create_finding_info:Create FindingInfo and return info, source, and timing.","_print_finding_info_stage:87:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_verbose_stages:101:(results:dict)>None:_print_ai_selection_stage:Print all verbose stage outputs.","_print_ai_selection_stage:127:(results:dict)>None::Print AI selection stage output.","_print_summary:145:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_anatomic_location_search:162:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test anatomic location search with timing information.","check_configuration:209:()>bool::Check if the configuration is valid for running the tool.","parse_args:237:()>argparse.Namespace::Parse command-line arguments.","main:261:async ()>None:check_configuration,parse_args,test_anatomic_location_search:Main entry point for the anatomic location search tool."]],"notebooks/demo_bioontology_search.py":["p",["print_header:20:(text:str)>None::Print a formatted header.","print_section:27:(title:str)>None::Print a section title.","display_results:33:(results:list[BioOntologySearchResult], query:str, ontologies:list[str])>None:print_header:Display search results in a readable format.","demo_basic_search:51:async ()>None:display_results,print_section:Demonstrate basic search functionality.","demo_detailed_search:61:async ()>None:display_results,print_section:Demonstrate detailed search with specific parameters.","demo_semantic_type_filter:79:async ()>None:print_section:Demonstrate filtering by semantic type.","demo_multiple_ontologies:100:async ()>None:print_section:Demonstrate searching across multiple ontologies.","demo_pagination:123:async ()>None:print_section:Demonstrate pagination handling.","main:151:async ()>None:demo_basic_search,demo_detailed_search,demo_multiple_ontologies,demo_pagination,demo_semantic_type_filter,print_header:Main demonstration function."]],"notebooks/demo_edit_finding_model.py":["p",["_await_with_timer:64:async (coro:Awaitable[T], message:str)>T::","run_with_timer:81:(coro:Awaitable[T], message:str)>T:_await_with_timer,_runner:","load_model:88:(path:Path)>FindingModelFull::","save_model:93:(model:FindingModelFull, path:Path)>None::","render_rejections:97:(rejections:list[str])>None::","render_changes:107:(changes:list[str])>None::","display_current:118:(state:DemoState)>None::","explain_commands:123:()>None::","prompt_markdown_edit:155:(state:DemoState)>str | None::","prompt_command_text:172:(provided:list[str])>str::","apply_edit:187:(state:DemoState, result:EditResult, context:str)>None:display_current,mark_updated,render_changes,render_rejections:","handle_natural_language:206:(state:DemoState, text:str)>None:apply_edit,run_with_timer:","handle_markdown_edit:221:(state:DemoState)>None:apply_edit,prompt_markdown_edit,run_with_timer:","handle_save:239:(state:DemoState, maybe_path:list[str])>None:record_save,save_model:","_handle_command_input:255:(state:DemoState, args:list[str])>None:handle_natural_language,prompt_command_text:","_handle_reset:261:(state:DemoState, _:list[str])>None:display_current,reset:","handle_command:276:(state:DemoState, command:str, args:list[str])>bool::","run_session:288:(state:DemoState)>None:explain_commands,handle_command,handle_natural_language:","parse_args:321:()>argparse.Namespace:parse_args:","main:339:()>int:display_current,load_model,parse_args,run_session:"],{"DemoState":["37",["__init__:40:(self, model:FindingModelFull, save_path:Path)>None::","markdown:47:(self)>str::","mark_updated:50:(self, result:EditResult)>None::","reset:55:(self)>None::","record_save:59:(self)>None::"]]}],"notebooks/demo_edit_model_from_markdown.py":["p",["main:9:async ()>None::"]],"notebooks/demo_find_similar.py":["p",["main:9:async ()>SimilarModelAnalysis::"]],"notebooks/demo_ontology_concept_match.py":["p",["perform_search_stages:21:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","_print_finding_info_stage:69:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_query_terms_stage:83:(results:dict)>None::Print query terms generation stage.","_print_bio_search_stage:92:(results:dict)>None::Print BioOntology search stage.","_print_categorization_stage:107:(results:dict)>None::Print AI categorization stage.","_print_final_output_stage:122:(results:dict)>None::Print final output building stage.","_print_verbose_stages:153:(results:dict)>None:_print_bio_search_stage,_print_categorization_stage,_print_final_output_stage,_print_query_terms_stage:Print all verbose stage outputs.","_print_summary:161:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_ontology_concept_match:187:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test ontology concept matching with timing information.","check_configuration:232:()>bool::Check if the configuration is valid for running the tool.","parse_args:257:()>argparse.Namespace::Parse command-line arguments.","main:281:async ()>None:check_configuration,parse_args,test_ontology_concept_match:Main entry point for the ontology concept matching tool."]],"s/release.py":["p",["main:613:()>None:release:Main entry point."],{"ReleaseError":["36",[]],"ReleaseManager":["42",["__init__:47:(self, version:Optional[str] = None, dry_run:bool = False, yes:bool = False, check_only:bool = False)>None:_setup_logging:","_setup_logging:68:(self)>None::Configure loguru logging with file output.","run_command:95:(self, cmd:str, check:bool = True, capture_output:bool = True)>subprocess.CompletedProcess[str]::Execute a shell command with logging and optional dry-run.","confirm:129:(self, message:str)>bool::Get user confirmation unless --yes flag is used.","get_current_version:141:(self)>str:run_command:Read current version from pyproject.toml.","validate_version:166:(self, version:str)>bool::Validate version format (semantic versioning).","check_git_status:179:(self)>None:run_command:Ensure git working directory is clean.","check_branch:191:(self)>None:run_command:Ensure we're on dev branch and up to date.","check_existing_tag:216:(self, version:str)>None:run_command:Check if version tag already exists.","run_tests:226:(self)>None:confirm,run_command:Run the test suite.","run_checks:256:(self)>None:run_command:Run code quality checks.","update_version:266:(self)>None:_setup_logging,check_existing_tag,get_current_version,run_command,validate_version:Update version in pyproject.toml using uv.","update_changelog:287:(self)>None:confirm:Update CHANGELOG.md with release date.","clean_dist:322:(self)>None::Clean the dist directory of old builds.","build_packages:333:(self)>List[Path]:run_command:Build wheel and source distribution packages.","commit_changes:368:(self)>None:run_command:Commit version and changelog changes.","merge_to_main:388:(self)>None:confirm,run_command:Merge dev branch to main.","create_tag:406:(self)>None:run_command:Create and push git tag.","publish_pypi:419:(self)>None:confirm,run_command:Publish packages to PyPI using uv publish.","create_github_release:432:(self, built_files:List[Path])>None:confirm,run_command:Create GitHub release with artifacts.","post_release_cleanup:452:(self)>None:run_command:Switch back to dev branch and prepare for next development cycle.","print_summary:467:(self, built_files:List[Path])>None::Print release summary.","handle_error:494:(self, step_name:str, error:Exception)>None::Handle errors and provide recovery instructions.","_get_release_steps:522:(self)>list[tuple[str, str, Callable[..., Any]]]::Get the list of release steps.","_should_skip_step:541:(self, step_id:str)>bool::Check if step should be skipped in check-only mode.","_execute_step:557:(self, step_id:str, step_func:Callable[..., Any], built_files:List[Path])>List[Path]::Execute a single release step.","release:571:(self)>None:_execute_step,_get_release_steps,_should_skip_step,handle_error,print_summary:Execute the complete release process."]]}],"sr/findingmodel/abstract_finding_model.py":["p",{"AbstractNumericAttribute":["6",[]],"AbstractChoiceValue":["18",[]],"AbstractChoiceAttribute":["25",[]],"AbstractFindingModel":["36",["as_markdown:45:(self)>str::Render the finding model as a markdown string."]]}],"sr/findingmodel/anatomic_migration.py":["p",["create_searchable_text:25:(record:dict[str, Any])>str::","determine_sided:56:(record:dict[str, Any])>str::","load_anatomic_data:88:async (source:str)>list[dict[str, Any]]::","validate_anatomic_record:120:(record:dict[str, Any])>list[str]::","create_anatomic_database:151:async (db_path:Path, records:list[dict[str, Any]], client:AsyncOpenAI, batch_size:int = 50,)>tuple[int, int]:_create_indexes,_process_and_insert_data,_verify_database:","_process_and_insert_data:204:async (conn:duckdb.DuckDBPyConnection, records:list[dict[str, Any]], client:AsyncOpenAI, batch_size:int,)>tuple[int, int]:_insert_batch,create_searchable_text,determine_sided,validate_anatomic_record:","_insert_batch:284:async (conn:duckdb.DuckDBPyConnection, batch_records:list[dict[str, Any]], batch_texts:list[str], client:AsyncOpenAI,)>None::","_create_indexes:320:(conn:duckdb.DuckDBPyConnection, dimensions:int)>None::","_verify_database:367:(conn:duckdb.DuckDBPyConnection)>None::","get_database_stats:417:(db_path:Path)>dict[str, Any]::"]],"sr/findingmodel/cli.py":["p",["cli:32:()>None::","config:37:()>None::Show the currently active configuration.","print_info_truncate_detail:44:(console:Console, finding_info:FindingInfo)>None::","make_info:57:(finding_name:str, detailed:bool, output:Path | None)>None:_do_make_info,print_info_truncate_detail:Generate description/synonyms and more details/citations for a finding name.","make_stub_model:94:(finding_name:str, tags:list[str], with_codes:bool, with_ids:bool, source:str | None, output:Path | None)>None:_do_make_stub_model:Generate a simple finding model object (presence and change elements only) fr...","markdown_to_fm:135:(finding_path:Path, with_ids:bool, source:str | None, output:Path | None)>None:_do_markdown_to_fm,print_info_truncate_detail:Convert markdown file to finding model format.","fm_to_markdown:172:(finding_model_path:Path, output:Path | None)>None::Convert finding model JSON file to Markdown format.","index:196:()>None::Index management commands.","build:204:(directory:Path, output:Path | None)>None:_do_build,progress_update:Build index from directory of *.fm.json files.","update:238:(directory:Path, index:Path | None)>None:_do_update,progress_update:Update existing index from directory.","_validate_single_file:280:async (fm_file:Path, directory:Path, idx:DuckDBIndex)>tuple[str, list[str]] | None::Validate a single finding model file. Returns (filename, errors) if validatio...","validate:308:(directory:Path)>None:_do_validate,_validate_single_file:Validate finding models without writing to index.","stats:365:(index:Path | None)>None:_do_stats:Show index statistics.","anatomic:444:()>None::Anatomic location database management commands.","anatomic_build:457:(source:str | None, output:Path | None, force:bool)>None:_do_build:Build anatomic location database from source data.","anatomic_validate:534:(source:str | None)>None:_do_validate:Validate anatomic location data without building database.","anatomic_stats:582:(db_path:Path | None)>None::Show anatomic location database statistics."]],"sr/findingmodel/common.py":["p",["normalize_name:4:(name:str)>str::","model_file_name:12:(name:str)>str:normalize_name:Convert a finding model name to a file name."]],"sr/findingmodel/config.py":["p",["strip_quotes:18:(value:str)>str::","strip_quotes_secret:22:(value:str | SecretStr)>str:strip_quotes:","ensure_db_file:123:(filename:str, remote_url:str | None, remote_hash:str | None, manifest_key:str,)>Path:ensure_db_file,fetch_manifest:","fetch_manifest:215:()>dict[str, Any]:fetch_manifest:","clear_manifest_cache:253:()>None::Clear the manifest cache (for testing)."],{"ConfigurationError":["14",[]],"FindingModelConfig":["34",["check_ready_for_openai:103:(self)>Literal[True]::","check_ready_for_perplexity:108:(self)>Literal[True]::"]]}],"sr/findingmodel/contributor.py":["p",{"Organization":["16",["_register_org:24:(self)>Self::","get:32:(cls, code:str)>Self | None:get:","organizations:39:(cls)>list[Self]::","load_jsonl:46:(cls, jsonl_file:str | Path)>None::","save_jsonl:58:(cls, jsonl_file:str | Path)>None::"]],"Person":["68",["organization:78:(self)>Organization:get:","_register_person:87:(self)>Self::","get:95:(cls, username:str)>Self | None:get:","people:102:(cls)>list[Self]::","load_jsonl:109:(cls, jsonl_file:str | Path)>None::","save_jsonl:121:(cls, jsonl_file:str | Path)>None::"]]}],"sr/findingmodel/embedding_cache.py":["p",{"EmbeddingCache":["20",["__init__:27:(self, db_path:Path | None = None)>None::","__aenter__:36:async (self)>EmbeddingCache:setup:Enter context manager.","__aexit__:41:async (self, exc_type:object, exc_val:object, exc_tb:object)>None::Exit context manager.","setup:47:async (self)>None::Create schema if not exists.","_get_connection:87:(self, read_only:bool = True)>duckdb.DuckDBPyConnection::","_hash_text:100:(self, text:str)>str::","_to_float32:111:(self, embedding:list[float])>list[float]::","get_embedding:122:async (self, text:str, model:str, dimensions:int)>list[float] | None:_get_connection,_hash_text:","store_embedding:161:async (self, text:str, model:str, dimensions:int, embedding:list[float])>None:_get_connection,_hash_text,_to_float32:","get_embeddings_batch:200:async (self, texts:list[str], model:str, dimensions:int)>list[list[float] | None]:_get_connection,_hash_text:","store_embeddings_batch:252:async (self, texts:list[str], model:str, dimensions:int, embeddings:list[list[float]])>None:_get_connection,_hash_text,_to_float32:","clear_cache:305:async (self, model:str | None = None, older_than_days:int | None = None)>int:_get_connection:"]]}],"sr/findingmodel/finding_info.py":["p",{"FindingInfo":["4",[]]}],"sr/findingmodel/finding_model.py":["p",["_random_digits:36:(length:int)>str::","generate_oifma_id:40:(source:str)>str:_random_digits:","_index_codes_str:69:(index_codes:Iterable[IndexCode] | None)>str | None::","fix_max_selected_validator:122:(cls, data:dict[str, Any])>dict[str, Any]::","generate_oifm_id:338:(source:str)>str:_random_digits:"],{"ChoiceValue":["44",[]],"ChoiceValueIded":["73",["index_codes_str:84:(self)>str | None:_index_codes_str:"]],"ChoiceAttribute":["133",["fix_max_selected:148:(cls, data):fix_max_selected_validator:"]],"ChoiceAttributeIded":["152",["fix_max_selected:164:(cls, data):fix_max_selected_validator:","add_value_codes:169:(cls, data)::Add the value codes to the choice values if they are not already present.","index_codes_str:189:(self)>str | None:_index_codes_str:"]],"NumericAttribute":["217",[]],"NumericAttributeIded":["230",["index_codes_str:243:(self)>str | None:_index_codes_str:"]],"FindingModelBase":["302",["as_markdown:316:(self)>str::"]],"FindingModelFull":["345",["as_markdown:361:(self, hide_ids:bool = False)>str::","index_codes_str:398:(self)>str | None:_index_codes_str:"]]}],"sr/findingmodel/index.py":["p",{"AttributeInfo":["39",[]],"IndexEntry":["47",["match:63:(self, identifier:str)>bool::Check if the identifier matches the ID, name, or synonyms."]],"_BatchPayload":["82",[]],"_RowData":["96",[]],"DuckDBIndex":["210",["__init__:213:(self, db_path:str | Path | None = None, *, read_only:bool = True)>None::","setup:232:async (self)>None:_create_search_indexes,_ensure_connection,_load_base_contributors:Ensure the database exists, connection opened, and schema ready.","__aenter__:249:async (self)>DuckDBIndex:_ensure_connection:Enter async context manager, ensuring a connection is available.","__aexit__:260:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:TracebackType | None,)>None::Close the database connection when leaving the context.","contains:267:async (self, identifier:str)>bool:_ensure_connection,_resolve_oifm_id:Return True if an ID, name, or synonym exists in the index.","get:273:async (self, identifier:str)>IndexEntry | None:_ensure_connection,_fetch_index_entry,_resolve_oifm_id:Retrieve an index entry by ID, name, or synonym.","get_full:282:async (self, oifm_id:str)>FindingModelFull:_ensure_connection,get_full,setup:","get_full_batch:309:async (self, oifm_ids:list[str])>dict[str, FindingModelFull]:_ensure_connection,get_full_batch,setup:","count:335:async (self)>int:_ensure_connection:Return the number of finding models in the index.","count_people:342:async (self)>int:_ensure_connection:Return the number of people in the normalized table.","count_organizations:349:async (self)>int:_ensure_connection:Return the number of organizations in the normalized table.","get_person:356:async (self, github_username:str)>Person | None:_ensure_connection:Retrieve a person by GitHub username.","get_organization:378:async (self, code:str)>Organization | None:_ensure_connection:Retrieve an organization by code.","get_people:394:async (self)>list[Person]:_ensure_connection:Retrieve all people from the index.","get_organizations:415:async (self)>list[Organization]:_ensure_connection:Retrieve all organizations from the index.","all:433:async (self, limit:int = 100, offset:int = 0, order_by:str = \"name\", order_dir:Literal[\"asc\", \"desc\"] = \"asc\",)>tuple[list[IndexEntry], int]:_execute_paginated_query,all:","search_by_slug:475:async (self, pattern:str, limit:int = 100, offset:int = 0, match_type:Literal[\"exact\", \"prefix\", \"contains\"] = \"contains\",)>tuple[list[IndexEntry], int]:_build_slug_search_clause,_execute_paginated_query,search_by_slug:","count_search:518:async (self, pattern:str, match_type:Literal[\"exact\", \"prefix\", \"contains\"] = \"contains\")>int:_build_slug_search_clause,_ensure_connection,count_search:","_build_slug_search_clause:542:(self, pattern:str, match_type:Literal[\"exact\", \"prefix\", \"contains\"])>tuple[str, str, str]:_build_slug_search_clause:","_execute_paginated_query:573:(self, where_clause:str = \"\", where_params:list[object] | None = None, order_clause:str = \"LOWER(name)\", order_params:list[object] | None = None, limit:int = 100, offset:int = 0,)>tuple[list[IndexEntry], int]:_ensure_connection,count,search_by_slug:","add_or_update_entry_from_file:635:async (self, filename:str | Path, model:FindingModelFull | None = None, *, allow_duplicate_synonyms:bool = False,)>IndexReturnType:_build_embedding_text,_build_search_text,_calculate_file_hash,_create_search_indexes,_delete_denormalized_records,_drop_search_indexes,_ensure_openai_client,_ensure_writable_connection,_replace_attributes,_replace_synonyms,_replace_tags,_upsert_contributors,_validate_model,setup:Insert or update a finding model from a `.fm.json` file.","_collect_directory_files:752:(self, directory:Path)>list[tuple[str, str, Path]]:_calculate_file_hash:","_stage_directory_files:759:(self, conn:duckdb.DuckDBPyConnection, files:Sequence[tuple[str, str, Path]])>None::","_classify_directory_changes:772:(self, conn:duckdb.DuckDBPyConnection,)>tuple[set[str], dict[str, str], set[str]]::","_prepare_batch_payload:810:async (self, filenames_to_process:Sequence[str], files_by_name:Mapping[str, tuple[str, Path]], updated_entries:Mapping[str, str], removed_ids:Iterable[str], *, allow_duplicate_synonyms:bool = False,)>_BatchPayload:_build_row_data,_generate_embeddings,_load_models_metadata:","_execute_batch_directory_update:845:(self, conn:duckdb.DuckDBPyConnection, payload:_BatchPayload, progress_callback:Callable[[str], None] | None = None,)>None:_create_search_indexes,_delete_old_entries,_drop_search_indexes,_insert_models_with_progress:","_delete_old_entries:881:(self, conn:duckdb.DuckDBPyConnection, ids_to_delete:list[str], progress_callback:Callable[[str], None] | None,)>None:_delete_denormalized_records:Delete old entries from all tables.","_insert_models_with_progress:897:(self, conn:duckdb.DuckDBPyConnection, payload:_BatchPayload, progress_callback:Callable[[str], None] | None,)>None:_apply_batch_mutations,_create_chunk_payload:Insert models with progress updates for large batches.","_create_chunk_payload:942:(self, payload:_BatchPayload, start_idx:int, end_idx:int,)>_BatchPayload::Create a chunk of the payload for batch processing.","_load_models_metadata:981:(self, filenames_to_process:Sequence[str], files_by_name:Mapping[str, tuple[str, Path]], updated_entries:Mapping[str, str], *, allow_duplicate_synonyms:bool = False,)>tuple[list[tuple[FindingModelFull, str, str, str, str]], list[str]]:_build_embedding_text,_build_search_text,_validate_model:","_generate_embeddings:1003:async (self, embedding_payloads:Sequence[str])>list[list[float]]:_ensure_openai_client:","_build_row_data:1021:(self, metadata:Sequence[tuple[FindingModelFull, str, str, str, str]], embeddings:Sequence[list[float]],)>_RowData::","_apply_batch_mutations:1101:(self, conn:duckdb.DuckDBPyConnection, payload:_BatchPayload)>None:_delete_denormalized_records:","update_from_directory:1244:async (self, directory:str | Path, *, allow_duplicate_synonyms:bool = False, progress_callback:Callable[[str], None] | None = None,)>dict[str, int]:_classify_directory_changes,_collect_directory_files,_ensure_writable_connection,_execute_batch_directory_update,_prepare_batch_payload,_stage_directory_files,setup:","remove_entry:1329:async (self, oifm_id:str)>bool:_create_search_indexes,_delete_denormalized_records,_drop_search_indexes,_ensure_writable_connection,setup:Remove a finding model by ID.","search:1357:async (self, query:str, *, limit:int = 10, tags:Sequence[str] | None = None,)>list[IndexEntry]:_ensure_connection,_search_exact,_search_fts,_search_semantic:","search_batch:1402:async (self, queries:list[str], *, limit:int = 10)>dict[str, list[IndexEntry]]:_ensure_connection,_ensure_openai_client,_search_exact,_search_fts,_search_semantic_with_embedding:","_load_oifm_ids_for_source:1467:(self, source:str)>set[str]:_ensure_connection:","_load_oifma_ids_for_source:1490:(self, source:str)>set[str]:_ensure_connection:","generate_model_id:1513:(self, source:str = \"OIDM\", max_attempts:int = 100)>str:_load_oifm_ids_for_source,generate_model_id,setup:","generate_attribute_id:1566:(self, model_oifm_id:str | None = None, source:str | None = None, max_attempts:int = 100,)>str:_load_oifma_ids_for_source,generate_attribute_id,setup:","add_ids_to_model:1641:(self, finding_model:FindingModelBase | FindingModelFull, source:str,)>FindingModelFull:add_ids_to_model,generate_attribute_id,generate_model_id,get,setup:","finalize_placeholder_attribute_ids:1691:(self, finding_model:FindingModelFull, source:str | None = None,)>FindingModelFull:finalize_placeholder_attribute_ids,generate_attribute_id,get,setup:","_ensure_connection:1766:(self)>duckdb.DuckDBPyConnection::","_ensure_writable_connection:1773:(self)>duckdb.DuckDBPyConnection:_ensure_connection:","_ensure_openai_client:1778:async (self)>AsyncOpenAI::","_fetch_index_entry:1784:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str)>IndexEntry | None:_collect_contributors:","_collect_contributors:1833:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str)>list[str]::","_resolve_oifm_id:1850:(self, conn:duckdb.DuckDBPyConnection, identifier:str)>str | None::","_upsert_contributors:1885:(self, conn:duckdb.DuckDBPyConnection, model:FindingModelFull)>None::","_replace_synonyms:1946:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str, synonyms:Sequence[str] | None,)>None::","_replace_tags:1961:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str, tags:Sequence[str] | None,)>None::","_replace_attributes:1971:(self, conn:duckdb.DuckDBPyConnection, model:FindingModelFull)>None::","_build_search_text:1996:(self, model:FindingModelFull)>str::","_build_embedding_text:2007:(self, model:FindingModelFull)>str::","_validate_model:2021:(self, model:FindingModelFull)>list[str]:_ensure_connection:","_calculate_file_hash:2080:(self, filename:Path)>str::","_search_exact:2091:(self, conn:duckdb.DuckDBPyConnection, query:str, *, tags:Sequence[str] | None = None,)>list[IndexEntry]:_entry_has_tags,_fetch_index_entry,_resolve_oifm_id:","_entry_has_tags:2105:(self, entry:IndexEntry, tags:Sequence[str])>bool:all:","_search_fts:2116:(self, conn:duckdb.DuckDBPyConnection, query:str, *, limit:int, tags:Sequence[str] | None = None,)>list[tuple[IndexEntry, float]]:_entry_has_tags,_fetch_index_entry:","_delete_denormalized_records:2162:(self, conn:duckdb.DuckDBPyConnection, oifm_ids:Sequence[str],)>None::","_create_search_indexes:2175:(self, conn:duckdb.DuckDBPyConnection)>None::","_load_base_contributors:2194:(self, conn:duckdb.DuckDBPyConnection)>None:get:Load base organizations and people if the tables are empty.","_drop_search_indexes:2241:(self, conn:duckdb.DuckDBPyConnection)>None::","_search_semantic:2251:async (self, conn:duckdb.DuckDBPyConnection, query:str, *, limit:int, tags:Sequence[str] | None = None,)>list[tuple[IndexEntry, float]]:_ensure_openai_client,_search_semantic_with_embedding:Perform semantic search by generating embedding for query text.","_search_semantic_with_embedding:2277:(self, conn:duckdb.DuckDBPyConnection, embedding:list[float], *, limit:int, tags:Sequence[str] | None = None,)>list[tuple[IndexEntry, float]]:_entry_has_tags,_fetch_index_entry,search_batch:"]]}],"sr/findingmodel/index_code.py":["p",{"IndexCode":["4",[]]}],"sr/findingmodel/index_validation.py":["p",["check_oifm_id_conflict:50:(model:FindingModelFull, existing_ids:set[str], *, allow_self:bool = False,)>list[str]::","check_name_conflict:74:(model:FindingModelFull, existing_names:set[str], *, allow_self:bool = False,)>list[str]::","check_attribute_id_conflict:111:(model:FindingModelFull, attribute_ids_by_model:dict[str, str], *, allow_self:bool = False,)>list[str]::","validate_finding_model:143:async (model:FindingModelFull, context:ValidationContext, *, allow_self:bool = False,)>list[str]:check_attribute_id_conflict,check_name_conflict,check_oifm_id_conflict,get_attribute_ids_by_model,get_existing_names,get_existing_oifm_ids:"],{"ValidationContext":["13",["get_existing_oifm_ids:20:async (self)>set[str]::","get_existing_names:28:async (self)>set[str]::","get_attribute_ids_by_model:36:async (self)>dict[str, str]::"]]}],"sr/findingmodel/tools/__init__.py":["p",["add_ids_to_model:24:(finding_model:FindingModelBase | FindingModelFull, source:str,)>FindingModelFull:add_ids_to_model:","add_ids_to_finding_model:48:(finding_model:FindingModelBase | FindingModelFull, source:str,)>FindingModelFull:add_ids_to_model:"]],"sr/findingmodel/tools/anatomic_location_search.py":["p",["generate_anatomic_query_terms:43:async (finding_name:str, finding_description:str | None = None, model:str | None = None)>AnatomicQueryTerms::","execute_anatomic_search:114:async (query_info:AnatomicQueryTerms, client:OntologySearchProtocol, limit:int = 30)>list[OntologySearchResult]::","create_location_selection_agent:162:(model:str | None = None)>Agent[None, LocationSearchResponse]::","find_anatomic_locations:203:async (finding_name:str, description:str | None = None, use_duckdb:bool = True,)>LocationSearchResponse:create_location_selection_agent,execute_anatomic_search,generate_anatomic_query_terms:"],{"AnatomicQueryTerms":["28",[]],"LocationSearchResponse":["154",[]]}],"sr/findingmodel/tools/common.py":["p",["_get_embedding_cache:18:async ()>EmbeddingCache::","get_async_instructor_client:31:()>AsyncInstructor::","get_async_perplexity_client:36:()>AsyncOpenAI::","get_openai_model:43:(model_name:str)>OpenAIModel::Helper function to get OpenAI model instance - moved from similar_finding_mod...","get_embedding:57:async (text:str, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512, use_cache:bool = True,)>list[float] | None:_get_embedding_cache,get_embedding:","_lookup_cached_embeddings:110:async (texts:list[str], model:str, dimensions:int)>tuple[list[list[float] | None], list[str], list[int]]:_get_embedding_cache,get_embeddings_batch:","_fetch_and_store_embeddings:154:async (texts_to_fetch:list[str], fetch_indices:list[int], embeddings:list[list[float] | None], client:AsyncOpenAI, model:str, dimensions:int, use_cache:bool,)>None:_get_embedding_cache:","get_embeddings_batch:193:async (texts:list[str], client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512, use_cache:bool = True,)>list[list[float] | None]:_fetch_and_store_embeddings,_lookup_cached_embeddings:","get_markdown_text_from_path_or_text:238:(*, markdown_text:str | None = None, markdown_path:str | Path | None = None)>str::"]],"sr/findingmodel/tools/create_stub.py":["p",["create_model_stub_from_info:9:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_change_element,create_presence_element:","create_finding_model_stub_from_finding_info:65:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_model_stub_from_info:"]],"sr/findingmodel/tools/duckdb_search.py":["p",{"DuckDBOntologySearchClient":["14",["__init__:17:(self, db_path:str | None = None)>None::","__aenter__:41:async (self)>\"DuckDBOntologySearchClient\"::Enter async context.","__aexit__:56:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Exit async context.","search:67:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:_search_single:","search_parallel:106:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:_search_single:","search_with_filters:146:async (self, queries:list[str], region:str | None = None, sided_filter:list[str] | None = None, limit_per_query:int = 30,)>list[OntologySearchResult]:_search_single_with_filters:","_search_single:182:async (self, query:str, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result,search:","_find_exact_matches:251:(self, query:str, where_clause:str | None = None, params:list[Any] | None = None)>list[OntologySearchResult]:_row_to_result:","_row_to_result:308:(self, row:tuple[Any, ...], score:float)>OntologySearchResult::","_apply_rrf_fusion:330:(self, fts_results:list[tuple[Any, ...]], vector_results:list[tuple[Any, ...]], limit:int,)>list[tuple[Any, ...]]::","_combine_with_exact_matches:369:(self, exact_matches:list[OntologySearchResult], other_results:list[OntologySearchResult], limit:int)>list[OntologySearchResult]::","_search_single_with_filters:397:async (self, query:str, region:str | None = None, sided_filter:list[str] | None = None, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result:","_get_embedding:480:async (self, text:str)>list[float] | None::"]]}],"sr/findingmodel/tools/duckdb_utils.py":["p",["setup_duckdb_connection:27:(db_path:Path | str, *, read_only:bool = True, extensions:Iterable[str] = _DEFAULT_EXTENSIONS,)>duckdb.DuckDBPyConnection::Create a DuckDB connection with the standard extensions loaded.","get_embedding_for_duckdb:48:async (text:str, *, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int | None = None,)>list[float] | None:_to_float32:Generate a float32 embedding suitable for DuckDB storage.","batch_embeddings_for_duckdb:71:async (texts:Sequence[str], *, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int | None = None,)>list[list[float] | None]:_to_float32:Generate float32 embeddings for several texts in a single API call.","normalize_scores:92:(scores:Sequence[float])>list[float]::Min-max normalise scores to the [0, 1] range.","weighted_fusion:114:(results_a:Sequence[ScoreTuple], results_b:Sequence[ScoreTuple], *, weight_a:float = 0.3, weight_b:float = 0.7, normalise:bool = True,)>list[ScoreTuple]:normalize_scores:Combine two result sets using weighted score fusion.","rrf_fusion:147:(results_a:Sequence[ScoreTuple], results_b:Sequence[ScoreTuple], *, k:int = 60, weight_a:float = 0.5, weight_b:float = 0.5,)>list[ScoreTuple]::Combine two result sets using Reciprocal Rank Fusion (RRF).","l2_to_cosine_similarity:165:(l2_distance:float)>float::Convert an L2 distance to an approximate cosine similarity.","_to_float32:170:(values:Sequence[float])>list[float]::Convert an iterable of floats to 32-bit precision.","create_fts_index:184:(conn:duckdb.DuckDBPyConnection, table:str, id_column:str, *text_columns:str, stemmer:str = \"porter\", stopwords:str = \"english\", lower:int = 0, overwrite:bool = True,)>None:create_fts_index:","create_hnsw_index:225:(conn:duckdb.DuckDBPyConnection, table:str, column:str, index_name:str | None = None, *, metric:str = \"cosine\", ef_construction:int = 128, ef_search:int = 64, m:int = 16,)>None::","drop_search_indexes:259:(conn:duckdb.DuckDBPyConnection, table:str, hnsw_index_name:str | None = None,)>None::"]],"sr/findingmodel/tools/finding_description.py":["p",["_render_finding_description_prompt:18:(finding_name:str)>tuple[str, str]::Render the system instructions and user prompt for the finding description ag...","create_info_from_name:37:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:_create_finding_info_agent,_normalize_finding_info,_render_finding_description_prompt:","_normalize_finding_info:58:(finding_info:FindingInfo, *, original_input:str)>FindingInfo::Trim whitespace, deduplicate synonyms, and ensure the original term is preser...","_create_finding_info_agent:91:(model_name:str, instructions:str)>Agent[None, FindingInfo]::Factory to build the finding info agent, extracted for easier testing overrides.","add_details_to_info:103:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None::","describe_finding_name:139:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","get_detail_on_finding:152:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:","create_finding_info_from_name:166:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","add_details_to_finding_info:181:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:"]],"sr/findingmodel/tools/index_codes.py":["p",["_add_index_codes:11:(target:Codeable, name:str)>None::","add_standard_codes_to_model:26:(finding_model:FindingModelFull)>None:_add_index_codes:","add_standard_codes_to_finding_model:40:(finding_model:FindingModelFull)>None:add_standard_codes_to_model:"],{"Codeable":["7",[]]}],"sr/findingmodel/tools/markdown_in.py":["p",["create_model_from_markdown:19:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase::","create_finding_model_from_markdown:58:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase:create_model_from_markdown:"]],"sr/findingmodel/tools/model_editor.py":["p",["_get_index:18:()>Index::Get or create module-level Index instance.","_combine_instruction_sections:41:(*sections:str)>str::","_common_editing_instructions:45:()>str:_combine_instruction_sections:","_natural_language_instructions:71:()>str:_combine_instruction_sections:","_edited_text_instructions:79:()>str:_combine_instruction_sections:","create_edit_agent:89:()>Agent[EditDeps, EditResult]:_basic_edit_validation,_combine_instruction_sections,_common_editing_instructions,_natural_language_instructions,_normalize_new_attribute_ids,_validate_output:","create_markdown_edit_agent:122:()>Agent[EditDeps, EditResult]:_basic_edit_validation,_combine_instruction_sections,_common_editing_instructions,_edited_text_instructions,_normalize_new_attribute_ids,_validate_output:","edit_model_natural_language:162:async (model:FindingModelFull, command:str, *, agent:Agent[EditDeps, EditResult] | None = None)>EditResult:create_edit_agent:","_render_top_metadata_lines:188:(model:FindingModelFull)>list[str]::","_render_attribute_lines:215:(attr:object)>list[str]::Render a single attribute in the simple Markdown format expected by tests.","export_model_for_editing:256:(model:FindingModelFull, *, attributes_only:bool = False)>str:_render_attribute_lines,_render_top_metadata_lines:","edit_model_markdown:278:async (model:FindingModelFull, edited_markdown:str, *, agent:Agent[EditDeps, EditResult] | None = None,)>EditResult:create_markdown_edit_agent:","_basic_edit_validation:322:(*, original:FindingModelFull, updated:FindingModelFull)>list[str]:_validate_choice_value_indices_and_bases,_validate_model_id,_validate_new_items_have_ids,_validate_original_attributes_present:Compose simple validators and return combined messages (deduped).","_normalize_new_attribute_ids:336:(*, original:FindingModelFull, updated:FindingModelFull)>None::Force placeholder IDs for newly added attributes and their values.","assign_real_attribute_ids:364:(model:FindingModelFull, *, source:str | None = None, index:Index | None = None,)>FindingModelFull:_get_index:","_validate_model_id:379:(original:FindingModelFull, updated:FindingModelFull)>list[str]::","_validate_original_attributes_present:389:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]::","_validate_new_items_have_ids:421:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]::","_validate_choice_value_indices_and_bases:443:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]:_collect_value_codes,_validate_existing_attr_suffixes,_validate_new_attr_suffixes:Top-level dispatcher across updated choice attributes.","_parse_suffix:465:(vcode:str)>int | None::","_collect_value_codes:474:(oifma_id:str | None, upd_attr:object, name:str)>tuple[list[str], list[int], list[str], int]:_parse_suffix:","_validate_new_attr_suffixes:510:(name:str, oifma_id:str | None, suffixes:list[int], values_len:int)>list[str]::","_validate_existing_attr_suffixes:524:(name:str, oifma_id:str | None, vcodes:list[str], suffixes:list[int], orig_attr:object)>list[str]:_parse_suffix:"],{"EditResult":["26",[]],"EditDeps":["36",[]]}],"sr/findingmodel/tools/ontology_concept_match.py":["p",["_filter_anatomical_concepts:65:(search_results:list[OntologySearchResult])>list[OntologySearchResult]::Filter out anatomical concepts from search results.","_add_exact_matches:91:(sorted_results:list[OntologySearchResult], query_terms:list[str], max_results:int, selected_ids:set[str])>tuple[list[OntologySearchResult], int]::Add exact matches that were ranked lower to the top results.","execute_ontology_search:121:async (query_terms:list[str], exclude_anatomical:bool = True, base_limit:int = 30, max_results:int = 12, ontologies:list[str] | None = None,)>list[OntologySearchResult]:_add_exact_matches,_filter_anatomical_concepts:","create_categorization_agent:205:()>Agent[CategorizationContext, CategorizedConcepts]::","ensure_exact_matches_post_process:262:(output:CategorizedConcepts, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts::","create_query_generator_agent:331:()>Agent[None, list[str]]::","generate_finding_query_terms:359:async (finding_name:str, finding_description:str | None = None)>list[str]:create_query_generator_agent:","categorize_with_validation:401:async (finding_name:str, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts:create_categorization_agent,ensure_exact_matches_post_process:","build_final_output:460:(categorized:CategorizedConcepts, search_results:list[OntologySearchResult], max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10,)>CategorizedOntologyConcepts::","match_ontology_concepts:529:async (finding_name:str, finding_description:str | None = None, exclude_anatomical:bool = True, max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10, ontologies:list[str] | None = None,)>CategorizedOntologyConcepts:build_final_output,categorize_with_validation,execute_ontology_search,generate_finding_query_terms:"],{"CategorizedConcepts":["27",[]],"CategorizedOntologyConcepts":["36",[]],"CategorizationContext":["57",[]]}],"sr/findingmodel/tools/ontology_search.py":["p",["normalize_concept:33:(text:str)>str::"],{"OntologySearchProtocol":["86",["search:99:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[\"OntologySearchResult\"]::","__aenter__:112:async (self)>\"OntologySearchProtocol\"::Async context manager entry.","__aexit__:121:async (self, _exc_type:type[BaseException] | None, _exc_val:BaseException | None, _exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_parallel:131:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[\"OntologySearchResult\"]:search:"]],"OntologySearchResult":["146",["as_index_code:158:(self)>IndexCode:normalize_concept:Convert to IndexCode format"]],"BioOntologySearchResult":["168",["from_api_response:180:(cls, item:dict[str, Any])>\"BioOntologySearchResult\"::Create from BioOntology API response item.","to_ontology_search_result:221:(self)>OntologySearchResult::Convert to standard OntologySearchResult format."]],"BioOntologySearchResults":["244",[]],"BioOntologySearchClient":["254",["__init__:261:(self, api_key:Optional[str] = None, client:Optional[httpx.AsyncClient] = None)>None::","__aenter__:284:async (self)>\"BioOntologySearchClient\"::Async context manager entry.","__aexit__:295:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_bioontology:312:async (self, query:str, ontologies:Optional[list[str]] = None, page_size:int = 50, page:int = 1, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>BioOntologySearchResults:from_api_response,search:","search_all_pages:396:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 100, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>list[BioOntologySearchResult]:search_bioontology:","search_as_ontology_results:446:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 50, **kwargs:Any, # noqa:ANN401)>list[OntologySearchResult]:search_all_pages,to_ontology_search_result:","search:475:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:search_as_ontology_results:","search_parallel:546:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:search:"]]}],"sr/findingmodel/tools/prompt_template.py":["p",["load_prompt_template:16:(template_file_name:str)>Template::","create_prompt_messages:27:(template:Template, **kwargs:Any)>list[ChatCompletionMessageParam]::"]],"sr/findingmodel/tools/similar_finding_models.py":["p",["search_models_tool:56:async (ctx:RunContext[SearchContext], query:str, limit:int = 5)>str::","create_search_agent:89:(openai_model:str)>Agent[SearchContext, SearchStrategy]::Create the search agent for gathering comprehensive results.","create_term_generation_agent:121:(openai_model:str)>Agent[None, SearchTerms]::Create a lightweight agent for generating search terms.","create_analysis_agent:154:(openai_model:str)>Agent[None, SimilarModelAnalysis]::Create the analysis agent for evaluating similarity and making recommendations.","find_similar_models:203:async (# noqa:C901 finding_name:str, description:str | None = None, synonyms:list[str] | None = None, index:Index | None = None, search_model:str | None = None, analysis_model:str | None = None,)>SimilarModelAnalysis:_generate_search_terms_with_fallback:","_generate_search_terms_with_fallback:349:async (term_prompt:str, search_model:str, finding_name:str)>list[str]:create_term_generation_agent:"],{"SearchResult":["25",[]],"SearchTerms":["34",[]],"SearchStrategy":["40",[]],"SearchContext":["50",[]],"SimilarModelAnalysis":["140",[]]}],"test/conftest.py":["p",["configure_test_logging:20:()>None::Configure logging for test session - runs once at start of session.","base_model:29:()>FindingModelBase::","full_model:56:()>FindingModelFull::","real_model:89:()>FindingModelFull::","real_model_markdown:97:()>str::","pe_fm_json:104:()>str::","tn_fm_json:111:()>str::","tn_markdown:118:()>str::","finding_info:125:()>FindingInfo::","tmp_defs_path:134:(tmp_path:Path)>Path::Create a temporary path with test files copied from test/data/defs."]],"test/test_anatomic_locations.py":["p",["_fake_openai_client:48:(*_:Any, **__:Any)>object::Return a dummy OpenAI client for patched calls.","_fake_embedding_anatomic:53:(text:str, **kwargs:Any)>list[float]::Deterministic fake embedding based on text hash.","_fake_batch_embeddings:61:async (texts:list[str], **kwargs:Any)>list[list[float] | None]:_fake_embedding_anatomic:Fake batch embeddings.","_module_anatomic_monkeypatch:68:()>Generator[None, None, None]::Module-scoped monkeypatch for anatomic migration tests."],{"TestOntologySearchResult":["89",["test_creation_with_all_fields:92:(self)>None::Test creating an OntologySearchResult with all fields.","test_as_index_code_radlex:101:(self)>None::Test converting a RadLex result to IndexCode.","test_as_index_code_snomedct:111:(self)>None::Test converting a SNOMED CT result to IndexCode.","test_as_index_code_anatomic_locations:123:(self)>None::Test converting an anatomic locations result to IndexCode.","test_as_index_code_unknown_table:135:(self)>None::Test converting with unknown table falls back to table name.","test_as_index_code_with_concept_normalization:146:(self)>None::Test that concept text is normalized when converting to IndexCode."]],"TestAnatomicQueryTerms":["162",["test_creation_with_region:165:(self)>None::Test creating AnatomicQueryTerms with region.","test_creation_without_region:172:(self)>None::Test creating AnatomicQueryTerms without region.","test_empty_terms:179:(self)>None::Test creating AnatomicQueryTerms with empty terms."]],"TestLocationSearchResponse":["187",["test_creation:190:(self)>None::Test creating LocationSearchResponse."]],"TestGenerateAnatomicQueryTerms":["209",["test_successful_generation:213:async (self)>None::Test successful query term generation.","test_generation_with_description:226:async (self)>None::Test query term generation with description.","test_generation_fallback_on_error:236:async (self)>None::Test fallback when generation fails."]],"TestExecuteAnatomicSearch":["248",["test_search_with_duckdb:252:async (self)>None::Test executing search with DuckDB client.","test_search_without_region:276:async (self)>None::Test executing search without region filter."]],"TestCreateLocationSelectionAgent":["292",["test_agent_creation:295:(self)>None::Test creating location selection agent.","test_agent_with_custom_model:307:(self)>None::Test creating agent with custom model."]],"TestFindAnatomicLocations":["319",["test_successful_search_with_duckdb:323:async (self)>None::Test successful anatomic location search using DuckDB.","test_empty_search_results:370:async (self)>None::Test handling of empty search results."]],"TestCreateSearchableText":["396",["test_with_all_fields:399:(self)>None::Test creating searchable text with all fields present.","test_with_missing_synonyms:415:(self)>None::Test with missing synonyms field.","test_with_missing_definition:425:(self)>None::Test with missing definition field.","test_with_empty_synonyms_list:434:(self)>None::Test with empty synonyms list.","test_with_null_synonyms:444:(self)>None::Test with null synonyms value.","test_with_many_synonyms:453:(self)>None::Test that only first 5 synonyms are included.","test_with_long_definition:468:(self)>None::Test that long definitions are truncated.","test_with_short_definition:478:(self)>None::Test that short definitions are not truncated.","test_with_only_description:488:(self)>None::Test with only description field."]],"TestDetermineSided":["497",["test_generic_with_both_left_and_right:500:(self)>None::Test record with both leftRef and rightRef returns 'generic'.","test_left_only:508:(self)>None::Test record with only leftRef returns 'left'.","test_right_only:516:(self)>None::Test record with only rightRef returns 'right'.","test_unsided:524:(self)>None::Test record with only unsidedRef returns 'unsided'.","test_nonlateral_no_refs:532:(self)>None::Test record with no laterality refs returns 'nonlateral'.","test_nonlateral_with_unrelated_refs:540:(self)>None::Test record with only partOfRef returns 'nonlateral'.","test_generic_with_extra_refs:548:(self)>None::Test generic determination ignores other refs.","test_left_with_unsided:561:(self)>None::Test that leftRef takes precedence over unsidedRef."]],"TestLoadAnatomicData":["570",["test_load_from_local_file:574:async (self, tmp_path:Path)>None::Test loading data from local file path.","test_load_from_url:591:async (self)>None::Test loading data from URL.","test_file_not_found:609:async (self, tmp_path:Path)>None::Test error when file doesn't exist.","test_invalid_json:617:async (self, tmp_path:Path)>None::Test error when JSON is invalid.","test_not_a_list:626:async (self, tmp_path:Path)>None::Test error when JSON is not a list.","test_network_error:635:async (self)>None::Test handling of network errors.","test_http_error:646:async (self)>None:raise_http_error:Test handling of HTTP errors.","raise_http_error:649:()>None::"]],"TestValidateAnatomicRecord":["665",["test_valid_record_with_all_fields:668:(self)>None::Test validation of a complete valid record.","test_valid_record_minimal:682:(self)>None::Test validation of minimal valid record.","test_missing_id:690:(self)>None::Test error when _id is missing.","test_missing_description:699:(self)>None::Test error when description is missing.","test_multiple_missing_fields:708:(self)>None::Test multiple validation errors.","test_invalid_synonyms_type:718:(self)>None::Test error when synonyms is not a list.","test_empty_synonyms_list_valid:728:(self)>None::Test that empty synonyms list is valid.","test_empty_id:736:(self)>None::Test error when _id is empty string.","test_empty_description:745:(self)>None::Test error when description is empty string."]],"TestCreateAnatomicDatabase":["755",["test_successful_database_creation:759:async (self, tmp_path:Path)>None::Test successful creation of anatomic database.","test_database_with_multiple_records:796:async (self, tmp_path:Path)>None::Test creating database with multiple records.","test_database_with_validation_errors:819:async (self, tmp_path:Path)>None::Test handling of invalid records during database creation.","test_database_indexes_created:839:async (self, tmp_path:Path)>None::Test that indexes are created properly.","test_database_with_batch_processing:865:async (self, tmp_path:Path)>None:mock_batch_embeddings:Test batch processing with batch_size parameter.","mock_batch_embeddings:880:async (texts:list[str], **kwargs:Any)>list[list[float]]::"]],"TestGetDatabaseStats":["896",["test_stats_for_valid_database:900:async (self, tmp_path:Path)>None::Test getting stats from a valid database.","test_stats_database_not_found:925:(self, tmp_path:Path)>None::Test error when database file doesn't exist.","test_stats_empty_database:933:async (self, tmp_path:Path)>None::Test stats for database with no records.","test_stats_sided_distribution:949:async (self, tmp_path:Path)>None::Test sided distribution in stats."]],"TestAnatomicCLI":["981",["test_build_basic:984:(self, tmp_path:Path, _module_anatomic_monkeypatch:None)>None:_fake_openai_client:Happy path: build from local file.","test_build_error_no_api_key:999:(self, tmp_path:Path, _module_anatomic_monkeypatch:None)>None::Error case: missing API key.","test_validate_basic:1014:(self, _module_anatomic_monkeypatch:None)>None::Happy path: validate valid data.","test_validate_error_invalid_data:1023:(self, tmp_path:Path, _module_anatomic_monkeypatch:None)>None::Error case: validation errors.","test_stats_basic:1039:(self, tmp_path:Path, _module_anatomic_monkeypatch:None)>None:_fake_openai_client:Happy path: show stats.","test_stats_error_no_database:1058:(self, tmp_path:Path, _module_anatomic_monkeypatch:None)>None::Error case: database not found (custom path with no remote URL)."]],"TestCreateAnatomicDatabaseIntegration":["1075",["test_create_anatomic_database_with_real_embeddings:1080:async (self, tmp_path:Path)>None::Integration test with real OpenAI embeddings - requires OPENAI_API_KEY."]],"TestAnatomicCLIIntegration":["1120",["test_build_with_real_openai:1124:(self, tmp_path:Path)>None::Integration test for build command with real OpenAI API - requires OPENAI_API..."]]}],"test/test_base_evaluators.py":["p",["_create_ctx:31:(inputs:Any, expected_output:Any, output:Any, name:str = \"test\",)>EvaluatorContext::Helper to create minimal EvaluatorContext for unit tests.","test_exact_match_returns_one_on_match:60:()>None:_create_ctx:Verify exact string match returns 1.0.","test_exact_match_returns_zero_on_mismatch:74:()>None:_create_ctx:Verify non-matching strings return 0.0.","test_exact_match_is_case_sensitive:88:()>None:_create_ctx:Verify matching is case-sensitive (exact means exact).","test_exact_match_handles_empty_strings:102:()>None:_create_ctx:Verify empty string matching behavior.","test_contains_case_insensitive_default:131:()>None:_create_ctx:Verify default case-insensitive matching.","test_contains_case_sensitive_option:145:()>None:_create_ctx:Verify case-sensitive matching when enabled.","test_contains_returns_zero_when_not_found:159:()>None:_create_ctx:Verify returns 0.0 when substring absent.","test_contains_handles_empty_substring:173:()>None:_create_ctx:Verify behavior with empty expected substring.","test_contains_handles_empty_output:187:()>None:_create_ctx:Verify behavior with empty output string.","test_keyword_all_found_partial_credit:219:()>None:_create_ctx:Verify 3/3 keywords with partial_credit=True returns 1.0.","test_keyword_some_found_partial_credit:237:()>None:_create_ctx:Verify 2/3 keywords with partial_credit=True returns 0.67.","test_keyword_none_found_returns_zero:255:()>None:_create_ctx:Verify 0/3 keywords returns 0.0.","test_keyword_all_found_no_partial_credit:273:()>None:_create_ctx:Verify 3/3 keywords with partial_credit=False returns 1.0.","test_keyword_some_found_no_partial_credit:291:()>None:_create_ctx:Verify 2/3 keywords with partial_credit=False returns 0.0.","test_keyword_empty_list_returns_one:309:()>None:_create_ctx:Verify empty keyword list returns 1.0 (N/A case).","test_keyword_case_insensitive_matching:327:()>None:_create_ctx:Verify keywords match regardless of case.","test_structural_all_fields_present:364:()>None:_create_ctx:Verify 2/2 required fields returns 1.0.","test_structural_some_fields_present:378:()>None:_create_ctx:Verify 1/2 required fields returns 0.5.","test_structural_no_fields_present:392:()>None:_create_ctx:Verify 0/2 required fields returns 0.0.","test_structural_empty_required_list_returns_one:406:()>None:_create_ctx:Verify no required fields specified returns 1.0 (N/A case).","test_structural_non_basemodel_returns_zero:420:()>None:_create_ctx:Verify non-Pydantic output returns 0.0.","test_error_should_succeed_and_does:454:()>None:_create_ctx:Verify should_succeed=True with no error returns 1.0.","test_error_should_succeed_but_fails:468:()>None:_create_ctx:Verify should_succeed=True with error returns 0.0.","test_error_should_fail_and_does:482:()>None:_create_ctx:Verify should_succeed=False with error returns 1.0.","test_error_should_fail_but_succeeds:496:()>None:_create_ctx:Verify should_succeed=False with no error returns 0.0."],{"ExactMatchInput":["47",[]],"ExactMatchExpected":["51",[]],"ContainsInput":["118",[]],"ContainsExpected":["122",[]],"KeywordInput":["202",[]],"KeywordExpected":["206",[]],"KeywordOutput":["210",[]],"StructuralInput":["346",[]],"StructuralExpected":["350",[]],"StructuralOutput":["354",[]],"ErrorInput":["436",[]],"ErrorExpected":["440",[]],"ErrorOutput":["444",[]]}],"test/test_cli.py":["p",["_fake_openai_client:26:(*_:Any, **__:Any)>object::Return a dummy OpenAI client for patched calls.","_fake_embedding_deterministic:37:async (text:str, *, client:object | None = None, model:str | None = None, dimensions:int | None = None,)>list[float]::Deterministic fake embedding based on text hash.","_fake_client_for_testing:47:async ()>object:_fake_openai_client:Return fake OpenAI client for testing.","_session_cli_monkeypatch_setup:54:()>Generator[None, None, None]:_fake_client_for_testing,_fake_embedding_deterministic:","test_index_build_basic:84:(tmp_path:Path, tmp_defs_path:Path, _session_cli_monkeypatch_setup:None)>None::Test happy path: build from directory.","test_index_build_error_no_openai_key:97:(tmp_path:Path, _session_cli_monkeypatch_setup:None)>None::Test error: missing API key.","test_index_update_basic:117:(tmp_path:Path, tmp_defs_path:Path, _session_cli_monkeypatch_setup:None)>None::Test happy path: update existing index.","test_index_update_creates_database_if_not_exists:138:(tmp_path:Path, tmp_defs_path:Path, _session_cli_monkeypatch_setup:None)>None::Test that update creates database if it doesn't exist.","test_index_validate_basic:159:(tmp_path:Path, tmp_defs_path:Path, _session_cli_monkeypatch_setup:None)>None::Test happy path: validate directory.","test_index_validate_detects_errors:169:(tmp_path:Path, _session_cli_monkeypatch_setup:None)>None::Test error: validation errors found.","test_index_stats_basic:205:(tmp_path:Path, tmp_defs_path:Path, _session_cli_monkeypatch_setup:None)>None::Test happy path: show stats.","test_index_stats_with_empty_database:221:(tmp_path:Path, _session_cli_monkeypatch_setup:None)>None::Test stats on empty database (created on-demand with base contributors)."]],"test/test_duckdb_index.py":["p",["_fake_openai_client:35:(*_:Any, **__:Any)>object::Return a dummy OpenAI client for patched calls.","_write_model_file:40:(path:Path, data:FindingModelFull)>None::Write a FindingModelFull to a JSON file.","_table_count:45:(conn:duckdb.DuckDBPyConnection, table:str)>int::Get row count from a table.","_hnsw_index_exists:52:(conn:duckdb.DuckDBPyConnection)>bool::Check if HNSW index exists on finding_models table.","_fts_index_works:58:(conn:duckdb.DuckDBPyConnection)>bool::Check if FTS index is functional.","_fake_embedding_deterministic:101:async (text:str, *, client:object | None = None, model:str | None = None, dimensions:int | None = None,)>list[float]::Deterministic fake embedding based on text hash.","_fake_client_for_testing:111:async ()>object:_fake_openai_client:Return fake OpenAI client for testing.","event_loop:118:()>Generator[asyncio.AbstractEventLoop, None, None]::","_session_monkeypatch_setup:131:()>Generator[None, None, None]:_fake_client_for_testing,_fake_embedding_deterministic:","session_populated_index:160:async (tmp_path_factory:pytest.TempPathFactory, _session_monkeypatch_setup:None)>AsyncGenerator[DuckDBIndex, None]::","index:198:async (tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>AsyncGenerator[DuckDBIndex, None]:_fake_openai_client,fake_client,fake_embedding:Create a DuckDBIndex for testing with mocked OpenAI client.","populated_index:236:async (index:DuckDBIndex, tmp_defs_path:Path)>DuckDBIndex::Populate the index with all *.fm.json files from test/data/defs.","test_add_and_retrieve_model:258:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test adding a model and retrieving it by ID.","test_validate_model_no_duplicates:275:(index:DuckDBIndex, full_model:FindingModelFull)>None::Test that validation passes when no duplicates exist.","test_contains_method:282:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test the contains method with ID and name lookups.","test_count_method:299:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that count returns correct number of models.","test_populated_index_count:316:async (session_populated_index:DuckDBIndex)>None::Test count on populated index.","test_populated_index_retrieval:324:async (session_populated_index:DuckDBIndex)>None::Test retrieving all models from populated index.","test_add_already_existing_model_unchanged:333:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None::Test that adding an unchanged model returns 'unchanged'.","test_add_new_model:343:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None::Test adding a new model to populated index.","test_add_updated_model_file:360:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None:_write_model_file:Test updating an existing model file.","test_remove_not_found_model:384:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None::Test removing entries not in the filenames list (equivalent to remove_unused_...","test_duplicate_oifm_id_fails_validation:417:(session_populated_index:DuckDBIndex, full_model:FindingModelFull)>None::Test validation fails when OIFM ID already exists.","test_duplicate_name_fails_validation:425:(session_populated_index:DuckDBIndex, full_model:FindingModelFull)>None::Test validation fails when name already exists (case-insensitive).","test_duplicate_attribute_id_fails_validation:437:(session_populated_index:DuckDBIndex, full_model:FindingModelFull)>None::Test validation fails when attribute ID is used by another model.","test_update_from_directory:455:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None:_write_model_file:Test the update_from_directory method with add, modify, and delete operations.","test_update_from_directory_empty_directory:514:async (populated_index:DuckDBIndex, tmp_path:Path)>None::Test update_from_directory with an empty directory removes all entries.","test_update_from_directory_nonexistent_directory:537:async (populated_index:DuckDBIndex, tmp_path:Path)>None::Test update_from_directory with a nonexistent directory raises ValueError.","test_search_basic_functionality:551:async (session_populated_index:DuckDBIndex)>None::Test basic search functionality with populated index.","test_search_by_name:568:async (session_populated_index:DuckDBIndex)>None::Test search functionality by exact and partial name matches.","test_search_by_description:582:async (session_populated_index:DuckDBIndex)>None::Test search functionality using description content.","test_search_by_synonyms:594:async (session_populated_index:DuckDBIndex)>None::Test search functionality using synonyms.","test_search_limit_parameter:604:async (session_populated_index:DuckDBIndex)>None::Test that search respects the limit parameter.","test_search_no_results:619:async (session_populated_index:DuckDBIndex)>None::Test search with query that should return no results.","test_search_empty_query:628:async (session_populated_index:DuckDBIndex)>None::Test search behavior with empty query.","test_search_case_insensitive:636:async (session_populated_index:DuckDBIndex)>None::Test that search is case insensitive.","test_search_multiple_terms:647:async (session_populated_index:DuckDBIndex)>None::Test search with multiple terms.","test_search_with_empty_index:661:async (index:DuckDBIndex)>None::Test search functionality with empty index.","test_add_entry_with_invalid_json_file:674:async (index:DuckDBIndex, tmp_path:Path)>None::Test error handling when adding file with invalid JSON.","test_add_entry_with_nonexistent_file:686:async (index:DuckDBIndex, tmp_path:Path)>None::Test error handling when adding nonexistent file.","test_add_entry_with_invalid_model_data:696:async (index:DuckDBIndex, tmp_path:Path)>None::Test error handling when adding file with invalid model data.","test_batch_operation_partial_failure:714:async (index:DuckDBIndex, tmp_path:Path, full_model:FindingModelFull)>None:_write_model_file:Test behavior when batch operations partially fail.","test_concurrent_index_operations:736:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file,add_file:Test Index behavior under concurrent operations.","test_large_query_handling:769:async (index:DuckDBIndex)>None::Test Index behavior with very large search queries.","test_get_person:790:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test retrieving a person by github username.","test_get_organization:814:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test retrieving an organization by code.","test_get_people:839:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test retrieving all people from the index.","test_get_organizations:865:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test retrieving all organizations from the index.","test_count_people:891:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test counting people in the index.","test_count_organizations:928:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test counting organizations in the index.","test_denormalized_synonyms_table:954:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that synonyms table is populated correctly.","test_denormalized_tags_table:973:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that tags table is populated correctly.","test_denormalized_attributes_table:992:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that attributes table is populated correctly.","test_denormalized_model_people_table:1017:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that model_people junction table is populated correctly.","test_denormalized_model_organizations_table:1045:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that model_organizations junction table is populated correctly.","test_remove_entry_clears_related_rows:1074:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_table_count,_write_model_file:Test that removing an entry clears all denormalized table rows.","test_setup_creates_search_indexes:1108:(index:DuckDBIndex)>None:_fts_index_works,_hnsw_index_exists:Test that setup() creates both HNSW and FTS indexes.","test_write_operations_rebuild_search_indexes:1118:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_fts_index_works,_hnsw_index_exists,_write_model_file:Test that write operations drop and rebuild search indexes.","test_batch_update_rebuilds_indexes_once:1137:async (index:DuckDBIndex, tmp_defs_path:Path)>None:_fts_index_works,_hnsw_index_exists:Test that batch directory update rebuilds indexes once, not per file.","test_search_with_single_tag:1155:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test search with single tag filter.","test_search_with_multiple_tags_and_logic:1197:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test search with multiple tags (AND logic - must have ALL).","test_search_with_nonexistent_tags:1228:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test search with tags that don't exist.","test_tag_filtering_works_in_all_search_paths:1245:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that tag filtering works in exact, FTS, and semantic search paths.","test_search_batch_multiple_queries:1279:async (session_populated_index:DuckDBIndex)>None::Test batching multiple queries efficiently.","test_search_batch_all_queries_return_results:1295:async (session_populated_index:DuckDBIndex)>None::Test that all queries in batch return their results.","test_search_batch_empty_queries_list:1306:async (index:DuckDBIndex)>None::Test search_batch with empty queries list.","test_search_batch_with_valid_and_invalid_queries:1313:async (session_populated_index:DuckDBIndex)>None::Test search_batch with mix of valid and invalid queries.","test_update_from_directory_batch_add:1333:async (index:DuckDBIndex, tmp_defs_path:Path)>None::Test batch directory ingestion - add scenario.","test_update_from_directory_batch_update:1346:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None:_write_model_file:Test batch directory ingestion - update scenario.","test_update_from_directory_batch_delete:1362:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None::Test batch directory ingestion - delete scenario.","test_update_from_directory_batch_mixed:1383:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None:_write_model_file:Test batch directory ingestion - mixed add/update/delete scenario.","test_update_from_directory_no_changes:1414:async (populated_index:DuckDBIndex, tmp_defs_path:Path)>None::Test update_from_directory when no changes are needed.","test_read_only_mode_blocks_writes:1432:async (full_model:FindingModelFull, tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>None:_fake_openai_client,_write_model_file,fake_client:Test that read-only mode prevents write operations.","test_search_latency_benchmark:1470:async (session_populated_index:DuckDBIndex)>None::Test that search latency is reasonable (< 200ms for typical query).","test_batch_embedding_optimization:1484:async (session_populated_index:DuckDBIndex)>None::Test that search_batch is faster than individual searches.","test_directory_sync_performance:1509:async (index:DuckDBIndex, tmp_defs_path:Path)>None::Test that directory sync with 10+ models completes in reasonable time.","test_semantic_search_returns_results:1530:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test semantic search with HNSW returns results (uses fake embeddings).","test_semantic_search_with_precomputed_embedding:1550:async (tmp_path:Path, full_model:FindingModelFull)>None::Test semantic search using pre-computed embedding (deterministic, no API calls).","test_semantic_search_with_real_openai_api:1654:async (tmp_path:Path, full_model:FindingModelFull)>None:_write_model_file:Test semantic search using real OpenAI API (requires OPENAI_API_KEY).","test_remove_entry_when_not_exists:1688:async (index:DuckDBIndex)>None::Test removing an entry that doesn't exist returns False.","test_all_pagination:1705:async (session_populated_index:DuckDBIndex)>None::Test that all() respects limit and offset.","test_all_sorting_all_fields:1729:async (session_populated_index:DuckDBIndex)>None::Test all valid fields for ordering (name, oifm_id, created_at, updated_at, sl...","test_all_case_insensitive_sorting:1765:async (session_populated_index:DuckDBIndex)>None::Verify LOWER() works for name/slug_name.","test_all_invalid_order_by:1784:async (session_populated_index:DuckDBIndex)>None::Verify ValueError raised for invalid order_by.","test_all_invalid_order_dir:1797:async (session_populated_index:DuckDBIndex)>None::Verify ValueError raised for invalid order_dir.","test_all_empty_database:1810:async (index:DuckDBIndex)>None::Verify returns ([], 0) for empty database.","test_all_single_page:1818:async (session_populated_index:DuckDBIndex)>None::Verify works with results < limit.","test_search_by_slug_exact_match:1835:async (session_populated_index:DuckDBIndex)>None::Verify exact match type finds only exact matches.","test_search_by_slug_prefix_match:1850:async (session_populated_index:DuckDBIndex)>None::Verify prefix match type finds slug_name.startswith(pattern).","test_search_by_slug_contains_match:1866:async (session_populated_index:DuckDBIndex)>None::Verify contains match type finds slug_name.__contains__(pattern).","test_search_by_slug_relevance_ranking:1882:async ()>None:_write_model_file,fake_embedding,populated_index:Verify exact > prefix > contains, then alphabetical.","test_search_by_slug_pattern_normalization:1991:async (session_populated_index:DuckDBIndex)>None::Verify normalize_name() called on pattern.","test_search_by_slug_pagination:2005:async (session_populated_index:DuckDBIndex)>None::Verify limit/offset work.","test_search_by_slug_no_matches:2023:async (session_populated_index:DuckDBIndex)>None::Verify returns ([], 0) for no matches.","test_count_search_exact_match:2036:async (session_populated_index:DuckDBIndex)>None::Verify count with exact match type.","test_count_search_prefix_match:2048:async (session_populated_index:DuckDBIndex)>None::Verify count with prefix match type.","test_count_search_contains_match:2060:async (session_populated_index:DuckDBIndex)>None::Verify count with contains match type.","test_count_search_empty_database:2072:async (index:DuckDBIndex)>None::Verify returns 0 for empty database.","test_generate_model_id_format:2088:(session_populated_index:DuckDBIndex)>None::Test that generate_model_id() returns correctly formatted IDs.","test_generate_model_id_uniqueness:2097:(session_populated_index:DuckDBIndex)>None::Test that generate_model_id() generates unique IDs in batch.","test_generate_model_id_different_sources_independent:2104:(session_populated_index:DuckDBIndex)>None::Test that different sources have independent ID spaces.","test_generate_model_id_collision_avoidance:2120:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that collision detection works by pre-populating database with IDs.","test_generate_model_id_cache_prevents_self_collision:2147:(session_populated_index:DuckDBIndex)>None::Test that cache prevents self-collision when generating multiple IDs in same ...","test_generate_model_id_invalid_source_too_short:2161:(session_populated_index:DuckDBIndex)>None::Test that generate_model_id() rejects source codes that are too short.","test_generate_model_id_invalid_source_too_long:2170:(session_populated_index:DuckDBIndex)>None::Test that generate_model_id() rejects source codes that are too long.","test_generate_model_id_invalid_source_contains_digits:2179:(session_populated_index:DuckDBIndex)>None::Test that generate_model_id() rejects source codes with digits.","test_generate_model_id_source_normalization:2188:(session_populated_index:DuckDBIndex)>None::Test that source code is normalized (trimmed and uppercased).","test_generate_model_id_max_attempts_exhausted:2205:(session_populated_index:DuckDBIndex, monkeypatch:pytest.MonkeyPatch)>None:mock_random_digits:Test that RuntimeError is raised when max_attempts is exhausted.","test_generate_attribute_id_format:2230:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() returns correctly formatted IDs.","test_generate_attribute_id_uniqueness:2239:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() generates unique IDs in batch.","test_generate_attribute_id_independent_from_oifm_ids:2246:(session_populated_index:DuckDBIndex)>None::Test that attribute IDs (OIFMA) are independent from model IDs (OIFM).","test_generate_attribute_id_infer_source_from_model_id:2263:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() can infer source from model OIFM ID.","test_generate_attribute_id_explicit_source_overrides_inference:2272:(session_populated_index:DuckDBIndex)>None::Test that explicit source parameter overrides inference from model_oifm_id.","test_generate_attribute_id_default_source:2281:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() defaults to 'OIDM' when no source provided.","test_generate_attribute_id_invalid_model_id_format:2290:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() rejects invalid model ID formats.","test_generate_attribute_id_invalid_source:2305:(session_populated_index:DuckDBIndex)>None::Test that generate_attribute_id() rejects invalid source codes.","test_generate_attribute_id_collision_avoidance:2320:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that attribute ID collision detection works.","test_generate_attribute_id_cache_prevents_self_collision:2348:(session_populated_index:DuckDBIndex)>None::Test that cache prevents self-collision for attribute IDs.","test_load_oifm_ids_for_source_caching:2370:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that _load_oifm_ids_for_source() caches results.","test_load_oifma_ids_for_source_caching:2395:async (index:DuckDBIndex, full_model:FindingModelFull, tmp_path:Path)>None:_write_model_file:Test that _load_oifma_ids_for_source() caches results.","test_add_ids_to_model_complete_new_model:2423:(index:DuckDBIndex)>None::Test add_ids_to_model generates all IDs for a new model.","test_add_ids_to_model_existing_oifm_id:2458:(index:DuckDBIndex)>None::Test add_ids_to_model preserves existing OIFM ID when using FindingModelFull.","test_add_ids_to_model_partial_attribute_ids:2498:(index:DuckDBIndex)>None::Test add_ids_to_model generates IDs for attributes without them.","test_add_ids_to_model_all_ids_present:2543:(index:DuckDBIndex, full_model:FindingModelFull)>None::Test add_ids_to_model preserves all IDs when model is already complete.","test_add_ids_to_model_source_used:2559:(index:DuckDBIndex)>None::Test add_ids_to_model uses the specified source code.","test_add_ids_to_model_invalid_source_too_short:2585:(index:DuckDBIndex, base_model:FindingModelBase)>None::Test add_ids_to_model rejects invalid source (too short).","test_add_ids_to_model_invalid_source_too_long:2591:(index:DuckDBIndex, base_model:FindingModelBase)>None::Test add_ids_to_model rejects invalid source (too long).","test_add_ids_to_model_invalid_source_contains_digits:2597:(index:DuckDBIndex, base_model:FindingModelBase)>None::Test add_ids_to_model rejects invalid source (contains digits).","test_finalize_placeholder_single_placeholder:2603:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids replaces a single placeholder.","test_finalize_placeholder_multiple_placeholders:2644:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids replaces multiple placeholders with u...","test_finalize_placeholder_no_placeholders:2693:(index:DuckDBIndex, full_model:FindingModelFull)>None::Test finalize_placeholder_attribute_ids returns original model when no placeh...","test_finalize_placeholder_source_inference:2702:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids infers source from model OIFM ID.","test_finalize_placeholder_explicit_source_override:2732:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids uses explicit source over inference.","test_finalize_placeholder_choice_value_codes:2762:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids renumbers value codes for choice attr...","test_finalize_placeholder_invalid_source:2803:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids rejects invalid explicit source.","test_finalize_placeholder_invalid_model_id_inference:2834:(index:DuckDBIndex)>None::Test finalize_placeholder_attribute_ids fails when model ID is malformed and ..."]],"test/test_duckdb_utils.py":["p",["_fts_index_exists:19:(conn:duckdb.DuckDBPyConnection, table:str)>bool::Check if FTS index exists for a table.","_hnsw_index_exists:29:(conn:duckdb.DuckDBPyConnection, index_name:str)>bool::Check if HNSW index exists by name.","memory_conn:41:()>duckdb.DuckDBPyConnection::Create an in-memory DuckDB connection with extensions loaded.","test_table:53:(memory_conn:duckdb.DuckDBPyConnection)>str::Create a test table with text columns for FTS testing.","vector_table:73:(memory_conn:duckdb.DuckDBPyConnection)>str::Create a test table with vector column for HNSW testing.","test_create_fts_index_basic:98:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None:_fts_index_exists:Test creating FTS index with default parameters.","test_create_fts_index_custom_parameters:115:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None:_fts_index_exists:Test creating FTS index with custom stemmer, stopwords, and lower settings.","test_create_fts_index_multiple_columns:141:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None:_fts_index_exists:Test creating FTS index on multiple text columns.","test_create_fts_index_no_text_columns:158:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None::Test that creating FTS index without text columns raises ValueError.","test_create_hnsw_index_basic:169:(memory_conn:duckdb.DuckDBPyConnection, vector_table:str)>None:_hnsw_index_exists:Test creating HNSW index with default parameters and auto-generated name.","test_create_hnsw_index_custom_name:179:(memory_conn:duckdb.DuckDBPyConnection, vector_table:str)>None:_hnsw_index_exists:Test creating HNSW index with explicit custom name.","test_create_hnsw_index_custom_metric:188:(memory_conn:duckdb.DuckDBPyConnection, vector_table:str)>None:_hnsw_index_exists:Test creating HNSW index with L2 squared metric instead of cosine.","test_create_hnsw_index_custom_parameters:204:(memory_conn:duckdb.DuckDBPyConnection, vector_table:str)>None:_hnsw_index_exists:Test creating HNSW index with custom ef_construction, ef_search, and m parame...","test_drop_search_indexes_both:226:(memory_conn:duckdb.DuckDBPyConnection, test_table:str, vector_table:str)>None:_fts_index_exists,_hnsw_index_exists:Test dropping both FTS and HNSW indexes.","test_drop_search_indexes_fts_only:254:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None:_fts_index_exists:Test dropping FTS index when no HNSW index exists.","test_drop_search_indexes_missing_gracefully:269:(memory_conn:duckdb.DuckDBPyConnection, test_table:str)>None:_fts_index_exists:Test that dropping non-existent indexes doesn't raise errors."]],"test/test_embedding_cache.py":["p",["cache:18:async (tmp_path:Path)>AsyncGenerator[EmbeddingCache, None]::Create an EmbeddingCache for testing.","test_setup_creates_schema:35:async (tmp_path:Path)>None::Test that setup() creates the cache schema correctly.","test_store_and_get_embedding_round_trip:62:async (cache:EmbeddingCache)>None::Test storing and retrieving an embedding successfully.","test_get_embedding_cache_miss:84:async (cache:EmbeddingCache)>None::Test that get_embedding returns None for cache miss.","test_embeddings_stored_with_float32_precision:91:async (cache:EmbeddingCache)>None::Test that embeddings are stored with float32 precision.","test_store_and_get_embeddings_batch:117:async (cache:EmbeddingCache)>None::Test batch storage and retrieval of embeddings.","test_batch_partial_cache_hits:142:async (cache:EmbeddingCache)>None::Test batch retrieval with some cached and some not cached.","test_batch_empty_returns_empty_list:162:async (cache:EmbeddingCache)>None::Test that empty batch returns empty list.","test_batch_order_preservation:172:async (cache:EmbeddingCache)>None::Test that batch operations preserve order of results.","test_same_text_same_model_returns_cached:207:async (cache:EmbeddingCache)>None::Test that same text with same model/dimensions returns cached result.","test_different_text_returns_different_results:226:async (cache:EmbeddingCache)>None::Test that different text returns different results.","test_cache_limitation_with_model_variations:251:async (cache:EmbeddingCache)>None::","test_cache_limitation_with_dimension_variations:274:async (cache:EmbeddingCache)>None::","test_clear_cache_no_filters_clears_all:303:async (cache:EmbeddingCache)>None::Test that clear_cache() with no filters clears all entries.","test_clear_cache_specific_model_only:325:async (cache:EmbeddingCache)>None::Test that clear_cache(model=...) only clears specific model.","test_clear_cache_older_than_days:348:async (cache:EmbeddingCache)>None::","test_clear_cache_combined_filters:385:async (cache:EmbeddingCache)>None::","test_context_manager_setup_and_cleanup:433:async (tmp_path:Path)>None::Test that async with EmbeddingCache() works correctly.","test_context_manager_cleanup_on_exception:452:async (tmp_path:Path)>None::Test that context manager cleans up even on exception.","test_store_embedding_wrong_dimensions_not_cached:476:async (cache:EmbeddingCache)>None::Test that embeddings with wrong dimensions are not cached.","test_batch_store_text_embedding_count_mismatch:492:async (cache:EmbeddingCache)>None::Test that batch store handles text/embedding count mismatch gracefully.","test_batch_store_skips_invalid_dimensions:506:async (cache:EmbeddingCache)>None::Test that batch store skips embeddings with wrong dimensions.","test_operations_continue_after_cache_errors:527:async (tmp_path:Path)>None::","test_concurrent_cache_operations:551:async (cache:EmbeddingCache)>None:store_embedding_task:Test that concurrent cache operations don't cause issues.","test_cache_with_special_characters_in_text:574:async (cache:EmbeddingCache)>None::Test that cache handles text with special characters correctly.","test_cache_empty_text_string:597:async (cache:EmbeddingCache)>None::Test that cache handles empty text string correctly."]],"test/test_index_validation.py":["p",["another_model:49:()>FindingModelFull::Create another model with different IDs for conflict testing.","test_mock_validation_context_implements_protocol:73:async ()>None:get_attribute_ids_by_model,get_existing_names,get_existing_oifm_ids:Test that MockValidationContext correctly implements the ValidationContext pr...","test_validation_context_accepts_different_implementations:93:async ()>None:get_attribute_ids_by_model,get_existing_names,get_existing_oifm_ids:Test that ValidationContext protocol works with multiple implementations.","test_check_oifm_id_conflict_no_conflict:116:(full_model:FindingModelFull)>None::Test that no conflict is detected when ID is unique.","test_check_oifm_id_conflict_detects_duplicate:123:(full_model:FindingModelFull)>None::Test that conflict is detected when ID already exists.","test_check_oifm_id_conflict_allow_self_permits_duplicate:132:(full_model:FindingModelFull)>None::Test that allow_self=True permits the model's own ID (for updates).","test_check_oifm_id_conflict_allow_self_false_blocks_duplicate:139:(full_model:FindingModelFull)>None::Test that allow_self=False blocks the model's own ID.","test_check_oifm_id_conflict_empty_existing_set:147:(full_model:FindingModelFull)>None::Test with empty existing IDs set.","test_check_name_conflict_no_conflict:155:(full_model:FindingModelFull)>None::Test that no conflict is detected when name is unique.","test_check_name_conflict_detects_case_insensitive_duplicate:162:(full_model:FindingModelFull)>None::Test that conflict is detected with case-insensitive matching.","test_check_name_conflict_detects_exact_case_match:172:(full_model:FindingModelFull)>None::Test detection of exact case match.","test_check_name_conflict_detects_normalized_slug:181:(full_model:FindingModelFull)>None::Test that normalized slug names are checked.","test_check_name_conflict_allow_self_permits_duplicate:191:(full_model:FindingModelFull)>None::Test that allow_self=True permits the model's own name (for updates).","test_check_name_conflict_allow_self_false_blocks_duplicate:198:(full_model:FindingModelFull)>None::Test that allow_self=False blocks the model's own name.","test_check_name_conflict_empty_existing_set:205:(full_model:FindingModelFull)>None::Test with empty existing names set.","test_check_name_conflict_various_cases:212:(full_model:FindingModelFull)>None::Test case-insensitive matching with various case combinations.","test_check_attribute_id_conflict_no_conflict:228:(full_model:FindingModelFull)>None::Test that no conflict is detected when all attribute IDs are unique.","test_check_attribute_id_conflict_detects_duplicate_in_different_model:238:(full_model:FindingModelFull)>None::Test that conflict is detected when attribute ID is used by another model.","test_check_attribute_id_conflict_allow_self_permits_own_attributes:251:(full_model:FindingModelFull)>None::Test that allow_self permits the same model's attributes (for updates).","test_check_attribute_id_conflict_detects_multiple_conflicts:262:(full_model:FindingModelFull)>None::Test detection of conflicts in multiple attributes.","test_check_attribute_id_conflict_some_conflicting_some_not:275:(full_model:FindingModelFull)>None::Test with some attributes conflicting and others not.","test_check_attribute_id_conflict_empty_attribute_map:288:(full_model:FindingModelFull)>None::Test with empty attribute map.","test_check_attribute_id_conflict_model_with_no_attributes:295:()>None::Test with a model that has no attributes (edge case, though models require at...","test_validate_finding_model_no_conflicts:322:async (full_model:FindingModelFull)>None::Test validation passes when there are no conflicts.","test_validate_finding_model_detects_id_conflict:334:async (full_model:FindingModelFull)>None::Test validation detects OIFM ID conflict.","test_validate_finding_model_detects_name_conflict:348:async (full_model:FindingModelFull)>None::Test validation detects name conflict.","test_validate_finding_model_detects_attribute_conflict:362:async (full_model:FindingModelFull)>None::Test validation detects attribute ID conflict.","test_validate_finding_model_detects_multiple_conflicts:376:async (full_model:FindingModelFull)>None::Test validation combines all error messages when multiple conflicts exist.","test_validate_finding_model_allow_self_permits_all_conflicts:393:async (full_model:FindingModelFull)>None::Test that allow_self=True permits all conflicts (for updates).","test_validate_finding_model_allow_self_false_detects_conflicts:408:async (full_model:FindingModelFull)>None::Test that allow_self=False detects conflicts with the model's own data.","test_validate_finding_model_empty_context:424:async (full_model:FindingModelFull)>None::Test validation with completely empty context.","test_validate_finding_model_with_full_model_fixture:433:async (full_model:FindingModelFull)>None::Test validation with the full_model fixture from conftest.py.","test_validate_finding_model_with_real_model_data:441:async (real_model:FindingModelFull)>None::Test validation with real model structure from test data.","test_validate_finding_model_single_attribute:449:async ()>None::Test validation with model that has a single attribute (minimum required).","test_validate_finding_model_minimal_synonyms:473:async ()>None::Test validation with model that has minimal synonyms (1 required).","test_validate_finding_model_minimal_tags:500:async ()>None::Test validation with model that has minimal tags (1 required).","test_validate_finding_model_cross_model_attribute_conflict:525:async ()>None::Test validation detects attribute conflicts across different models.","test_validate_finding_model_concurrent_validation_safety:573:async ()>None::Test that multiple validations can run concurrently without interference."],{"MockValidationContext":["25",["__init__:33:(self, existing_ids:set[str] | None = None, existing_names:set[str] | None = None, attribute_ids_by_model:dict[str, str] | None = None,)>None::","get_existing_oifm_ids:38:async (self)>set[str]::","get_existing_names:41:async (self)>set[str]::","get_attribute_ids_by_model:44:async (self)>dict[str, str]::"]]}],"test/test_manifest_integration.py":["p",["test_duckdb_index_uses_manifest_when_no_db_path_provided:26:()>None::","test_duckdb_index_has_new_schema_with_finding_model_json_table:94:async (tmp_path:Path)>None::","test_manifest_integration_with_mock_download:159:async (tmp_path:Path)>None::","test_ensure_db_file_with_manifest_key_fetches_manifest:214:()>None::"]],"test/test_model_editor.py":["p",["_disable_model_requests:14:()>Iterator[None]::","test_edit_model_natural_language_add_attribute:24:async (real_model:FindingModelFull)>None::Test adding an attribute via natural language command.","test_export_model_for_editing_roundtrip:67:(real_model:FindingModelFull)>None::","test_export_model_for_editing_structure_full:74:(real_model:FindingModelFull)>None::","test_export_model_for_editing_attributes_only:106:(real_model:FindingModelFull)>None::","test_edit_model_natural_language_callout_real_api:121:async (real_model:FindingModelFull)>None::","test_assign_real_attribute_ids_infers_source:140:(real_model:FindingModelFull)>None::Test that assign_real_attribute_ids infers source from model's OIFM ID.","test_assign_real_attribute_ids_uses_explicit_source:166:(real_model:FindingModelFull,)>None::Test that assign_real_attribute_ids uses explicitly provided source code.","test_assign_real_attribute_ids_no_placeholders_returns_same_object:191:(real_model:FindingModelFull,)>None::Test that when no placeholders exist, the original model is returned unchanged."]],"test/test_models.py":["p",["test_choice_value:24:()>None::","test_choice_attribute:30:()>None::","test_numeric_attribute:45:()>None::","test_multichoice_attribute:60:()>None::","test_finding_model_base:72:(tmp_path)>None::","test_load_finding_model:104:(pe_fm_json:str)>None::","test_load_finding_model_with_codes:115:(tn_fm_json:str)>None::","test_load_finding_model_with_contributors:148:(tn_fm_json:str)>None::","test_base_model_markdown:198:(base_model:FindingModelBase)>None::","test_full_model_markdown_with_ids:235:(full_model:FindingModelFull)>None::","test_full_model_markdown_hide_ids:245:(full_model:FindingModelFull)>None::","test_real_model_markdown:255:(real_model:FindingModelFull, real_model_markdown:str)>None::","test_real_model_markdown_with_codes:261:(tn_fm_json:str, tn_markdown:str)>None::","clear_registries:274:()>Generator[None, None, None]::Clears the registries before each test to ensure isolation.","sample_org_oidm:284:()>dict[str, str]::","sample_org_acr:289:()>dict[str, str]::","sample_person_john:294:(sample_org_oidm:dict[str, str])>dict[str, str]::","sample_person_jane:306:(sample_org_acr:dict[str, str])>dict[str, str]::","test_organization_creation:321:(sample_org_oidm:dict[str, str])>None::","test_organization_duplicate_code:329:(sample_org_oidm:dict[str, str])>None::","test_organization_invalid_code_pattern:339:()>None::","test_organization_organizations_list:348:(sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_save_and_load_jsonl:363:(tmp_path:Path, sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_load_jsonl_file_not_found:386:(tmp_path:Path)>None::","test_person_creation:394:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_duplicate_github_username:402:(sample_person_john:dict[str, str])>None::","test_person_organization_property:417:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_organization_property_org_deleted_after_person_creation:425:(sample_person_john:dict[str, str])>None::","test_person_get_non_existent:435:()>None::","test_person_people_list:439:(sample_person_john:dict[str, str], sample_person_jane:dict[str, str])>None::","test_person_save_and_load_jsonl:454:(tmp_path:Path, sample_person_john:dict[str, str], sample_person_jane:dict[str, str], sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str],)>None::","test_person_load_jsonl_file_not_found:484:(tmp_path:Path)>None::"]],"test/test_ontology_search.py":["p",["test_bioontology_implements_protocol:31:()>None::Test that BioOntologySearchClient implements OntologySearchProtocol.","test_protocol_context_managers:53:async ()>None::Test that BioOntology client works as async context manager.","test_bioontology_search_result_from_api_response:64:()>None::Test creating a search result from API response.","test_bioontology_search_result_minimal:90:()>None::Test creating a search result with minimal fields.","test_bioontology_client_no_api_key:111:()>None::Test that client raises error without API key.","test_default_ontologies_limited:125:()>None::","test_query_terms_deduplication:141:()>None::Test that duplicate terms are removed from list.","test_generate_finding_query_terms_single_word:169:async ()>None::Test query generation for single word.","test_generate_finding_query_terms_with_description:186:async ()>None::Test query generation with description.","test_create_query_generator_agent:203:()>None::Test that the query generator agent is created correctly.","test_execute_ontology_search:229:async ()>None::Test executing search with filtering using BioOntology API.","test_execute_ontology_search_with_custom_ontologies:272:async ()>None::Test execute_ontology_search with custom ontologies parameter.","test_execute_ontology_search_with_none_ontologies:316:async ()>None::Test execute_ontology_search with ontologies=None (uses defaults).","test_execute_ontology_search_missing_api_key:353:async ()>None::Test that execute_ontology_search raises ValueError when BioOntology API key ...","test_ensure_exact_matches_adds_missing:369:()>None::Test that missing exact matches are added.","test_ensure_exact_matches_respects_limit:397:()>None::Test that max_length of 5 is respected.","test_categorization_agent_creation:425:()>None::Test that agent is created properly.","test_categorization_with_test_model:442:async ()>None::Test categorization using TestModel.","test_match_ontology_concepts_integration:481:async ()>None::Test the complete workflow using BioOntology API.","test_match_ontology_concepts_with_custom_ontologies:527:async ()>None::Test match_ontology_concepts with custom ontologies parameter.","test_match_ontology_concepts_with_none_ontologies:585:async ()>None::Test match_ontology_concepts with ontologies=None (uses defaults).","test_match_ontology_concepts_missing_api_key:641:async ()>None::Test that match_ontology_concepts raises ValueError when BioOntology API key ...","test_bioontology_search_pneumonia:659:async ()>None::Integration test: search for pneumonia concepts.","test_bioontology_search_all_pages:690:async ()>None::Integration test: search with pagination.","test_bioontology_search_as_ontology_results:712:async ()>None::Integration test: test conversion to OntologySearchResult format.","test_bioontology_semantic_type_filter:737:async ()>None::Integration test: test filtering by semantic type.","test_bioontology_integration:766:async ()>None::Integration test: Use real BioOntologySearchClient."]],"test/test_remote_resource.py":["p",{"TestEnsureDbFileMocked":["11",["test_calls_pooch_to_verify_hash:14:(self, tmp_path:Path)>None::Test that Pooch is called even for existing files to verify hash.","test_downloads_when_file_missing_and_url_configured:47:(self, tmp_path:Path)>None:create_file_and_return:Test that missing files trigger Pooch download when URL is configured.","create_file_and_return:116:(*args:object, **kwargs:object)>str::","test_returns_path_when_no_url_configured:82:(self, tmp_path:Path)>None::Test that function raises error when manifest fails and no URL configured.","test_creates_parent_directory_before_download:106:(self, tmp_path:Path)>None:create_file_and_return:Test that parent directory is created before download.","test_handles_only_url_without_hash:133:(self, tmp_path:Path)>None::Test that function raises error when manifest fails and only URL provided wit...","test_handles_only_hash_without_url:157:(self, tmp_path:Path)>None::Test that function raises error when manifest fails and only hash provided wi..."]],"TestEnsureDbFileRealDownload":["183",["test_downloads_from_real_url:186:(self, tmp_path:Path)>None::Test actual download from remote URL."]]}],"test/test_tools.py":["p",["test_create_stub:16:(finding_info:FindingInfo)>None::Test creating a stub finding model from a FindingInfo object.","test_add_ids_to_finding_model:28:(base_model:FindingModelBase)>None::Test adding IDs to a finding model.","test_create_info_from_name_normalizes_and_logs:60:async (monkeypatch:pytest.MonkeyPatch)>None:fake_info:","test_create_info_from_name_preserves_name_without_logging:101:async (monkeypatch:pytest.MonkeyPatch)>None::","test_add_index_codes_to_finding_model:134:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_add_index_codes_to_finding_model_no_duplicates:156:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_create_model_stub_from_info_new_api:169:(finding_info:FindingInfo)>None::Test creating a stub finding model using the new function name.","test_add_ids_to_model_new_api:181:(base_model:FindingModelBase)>None::Test adding IDs to a finding model using the new function name.","test_add_standard_codes_to_model_new_api:199:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name.","test_add_standard_codes_to_model_no_duplicates_new_api:221:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name (no duplicat...","test_create_info_from_name_integration:235:async ()>None::Integration test for create_info_from_name with real OpenAI API.","test_create_info_from_name_edge_cases:262:async ()>None::Test create_info_from_name with edge cases.","test_add_details_to_info_integration:280:async ()>None::Integration test for add_details_to_info with real Perplexity API.","test_create_model_from_markdown_integration:311:async ()>None::Integration test for create_model_from_markdown with real OpenAI API.","test_create_model_from_markdown_file_integration:372:async (tmp_path:Path)>None::Integration test for create_model_from_markdown using file input.","test_create_info_from_name_integration_normalizes_output:413:async ()>None::Ensure create_info_from_name returns normalized data when using the real API.","test_ai_tools_error_handling:435:async ()>None::Test AI tools error handling with invalid inputs.","test_find_similar_models_basic_functionality:454:()>None:run:Test basic functionality of find_similar_models without API calls.","test_find_similar_models_integration:486:async ()>None::Integration test for find_similar_models with real OpenAI API.","test_find_similar_models_edge_cases:512:async ()>None::Test find_similar_models with edge cases.","test_tools_import_failures:541:()>None::Test graceful handling when optional dependencies are missing.","test_concurrent_id_generation:552:(base_model:FindingModelBase)>None:generate_ids:Test ID generation under concurrent access."],{"_StubFindingInfoAgent":["49",["__init__:50:(self, output:FindingInfo)>None::","run:54:async (self, prompt:str)>SimpleNamespace::"]]}]},"g":[["ReleaseManager.publish_pypi","confirm"],["batch_embeddings_for_duckdb","EmbeddingCache._to_float32"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._build_search_text"],["DuckDBOntologySearchClient._search_single","_get_embedding"],["match_ontology_concepts","execute_ontology_search"],["Person.get","Person.get"],["DuckDBIndex.finalize_placeholder_attribute_ids","Organization.get"],["test_mock_validation_context_implements_protocol","MockValidationContext.get_existing_oifm_ids"],["DuckDBIndex.update_from_directory","setup"],["apply_edit","mark_updated"],["handle_save","DemoState.record_save"],["ReleaseManager.release","handle_error"],["test_structural_no_fields_present","_create_ctx"],["DuckDBIndex.add_ids_to_model","DuckDBIndex.add_ids_to_model"],["make_info","print_info_truncate_detail"],["test_mock_validation_context_implements_protocol","get_existing_oifm_ids"],["ReleaseManager.release","ReleaseManager._execute_step"],["DuckDBIndex._execute_paginated_query","DuckDBIndex.search_by_slug"],["test_validation_context_accepts_different_implementations","ValidationContext.get_existing_oifm_ids"],["test_drop_search_indexes_fts_only","_fts_index_exists"],["DuckDBIndex._execute_batch_directory_update","_create_search_indexes"],["DuckDBIndex.get","DuckDBIndex._fetch_index_entry"],["update","_do_update"],["DuckDBIndex.get_full_batch","setup"],["DuckDBIndex.search_batch","_ensure_connection"],["DuckDBIndex._search_exact","DuckDBIndex._resolve_oifm_id"],["DuckDBOntologySearchClient._search_single_with_filters","_find_exact_matches"],["_print_verbose_stages","_print_query_terms_stage"],["EmbeddingCache.store_embeddings_batch","EmbeddingCache._to_float32"],["DuckDBIndex._generate_embeddings","_ensure_openai_client"],["generate_finding_query_terms","create_query_generator_agent"],["DuckDBOntologySearchClient._search_single","_row_to_result"],["DuckDBIndex._search_exact","DuckDBIndex._entry_has_tags"],["run_model_editor_task","ErrorHandlingEvaluator.evaluate"],["test_anatomic_location_search","_print_finding_info_stage"],["test_mock_validation_context_implements_protocol","MockValidationContext.get_existing_names"],["test_keyword_empty_list_returns_one","_create_ctx"],["test_search_by_slug_relevance_ranking","_write_model_file"],["DuckDBIndex.update_from_directory","DuckDBIndex._execute_batch_directory_update"],["create_info_from_name","_render_finding_description_prompt"],["test_structural_all_fields_present","_create_ctx"],["test_contains_method","_write_model_file"],["demo_pagination","print_section"],["_basic_edit_validation","_validate_choice_value_indices_and_bases"],["test_generate_attribute_id_collision_avoidance","_write_model_file"],["DuckDBIndex.add_or_update_entry_from_file","_upsert_contributors"],["DuckDBIndex.get","_resolve_oifm_id"],["Person.organization","DuckDBIndex.get"],["display_results","print_header"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._combine_with_exact_matches"],["ModelEditorCase._execute","ContentPreservationEvaluator.evaluate"],["test_create_fts_index_multiple_columns","_fts_index_exists"],["OntologySearchProtocol.search_parallel","DuckDBOntologySearchClient.search"],["test_create_hnsw_index_custom_metric","_hnsw_index_exists"],["generate_oifma_id","_random_digits"],["ModelEditorCase.__init__","ErrorHandlingEvaluator.__init__"],["get_embedding","get_embedding"],["test_ontology_concept_match","_print_finding_info_stage"],["test_anatomic_location_search","_print_verbose_stages"],["DuckDBIndex._search_semantic_with_embedding","_entry_has_tags"],["EmbeddingCache.store_embedding","_hash_text"],["DuckDBIndex.get_organizations","DuckDBIndex._ensure_connection"],["DuckDBIndex.remove_entry","DuckDBIndex._create_search_indexes"],["ReleaseManager.commit_changes","run_command"],["DuckDBIndex._load_base_contributors","DuckDBIndex.get"],["DuckDBIndex._validate_model","DuckDBIndex._ensure_connection"],["Organization.get","get"],["test_read_only_mode_blocks_writes","fake_client"],["DuckDBOntologySearchClient._search_single","BioOntologySearchClient.search"],["EmbeddingCache.store_embedding","EmbeddingCache._get_connection"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._ensure_openai_client"],["BioOntologySearchClient.search_as_ontology_results","to_ontology_search_result"],["create_successful_edit_cases","load_fm_json"],["DuckDBIndex.count_search","_ensure_connection"],["DuckDBIndex._load_models_metadata","DuckDBIndex._build_embedding_text"],["test_update_from_directory","_write_model_file"],["test_mock_validation_context_implements_protocol","MockValidationContext.get_attribute_ids_by_model"],["EmbeddingCache.get_embedding","_get_connection"],["test_denormalized_model_organizations_table","_table_count"],["test_denormalized_synonyms_table","_table_count"],["test_setup_creates_search_indexes","_hnsw_index_exists"],["DuckDBIndex.add_or_update_entry_from_file","_create_search_indexes"],["DuckDBIndex.add_ids_to_model","setup"],["test_exact_match_returns_zero_on_mismatch","_create_ctx"],["DuckDBIndex.update_from_directory","_classify_directory_changes"],["test_denormalized_attributes_table","_write_model_file"],["demo_basic_search","display_results"],["DuckDBIndex._apply_batch_mutations","DuckDBIndex._delete_denormalized_records"],["ModelEditorCase.__init__","ContainsEvaluator.__init__"],["match_ontology_concepts","categorize_with_validation"],["DuckDBIndex.finalize_placeholder_attribute_ids","get"],["test_concurrent_index_operations","_write_model_file"],["EmbeddingCache.store_embeddings_batch","_get_connection"],["DuckDBOntologySearchClient.search_parallel","DuckDBOntologySearchClient._search_single"],["_print_verbose_stages","_print_bio_search_stage"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._generate_embeddings"],["DuckDBOntologySearchClient.search_parallel","_search_single"],["test_validation_context_accepts_different_implementations","get_existing_names"],["DuckDBIndex.count","_ensure_connection"],["DuckDBIndex.search_by_slug","_build_slug_search_clause"],["DuckDBIndex.generate_model_id","generate_model_id"],["ModelEditorCase._execute","ContainsEvaluator.evaluate"],["EmbeddingCache.store_embedding","_to_float32"],["_handle_command_input","prompt_command_text"],["main","demo_multiple_ontologies"],["run_model_editor_task","KeywordMatchEvaluator.evaluate"],["validate_finding_model","ValidationContext.get_existing_oifm_ids"],["_create_finding_info","_async_create_finding_info"],["DuckDBIndex._insert_models_with_progress","DuckDBIndex._apply_batch_mutations"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_synonyms"],["handle_natural_language","run_with_timer"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._drop_search_indexes"],["DuckDBIndex.generate_attribute_id","DuckDBIndex.setup"],["EmbeddingCache.get_embeddings_batch","EmbeddingCache._hash_text"],["DuckDBIndex.update_from_directory","DuckDBIndex._ensure_writable_connection"],["apply_edit","render_changes"],["DuckDBIndex.add_or_update_entry_from_file","_ensure_openai_client"],["DuckDBIndex.generate_attribute_id","DuckDBIndex._load_oifma_ids_for_source"],["get_embeddings_batch","_lookup_cached_embeddings"],["index","fake_client"],["DuckDBIndex.generate_model_id","DuckDBIndex.setup"],["ReleaseManager.create_github_release","confirm"],["DuckDBIndex.update_from_directory","DuckDBIndex._stage_directory_files"],["_generate_search_terms_with_fallback","create_term_generation_agent"],["DuckDBIndex.get_people","DuckDBIndex._ensure_connection"],["ReleaseManager.update_version","get_current_version"],["ReleaseManager.create_github_release","run_command"],["test_search_with_multiple_tags_and_logic","_write_model_file"],["test_create_fts_index_basic","_fts_index_exists"],["test_contains_returns_zero_when_not_found","_create_ctx"],["DuckDBIndex.search","DuckDBIndex._ensure_connection"],["DuckDBIndex._delete_old_entries","DuckDBIndex._delete_denormalized_records"],["AgentEvaluationSuite.get_all_cases","create_edge_cases"],["DuckDBIndex._search_fts","_entry_has_tags"],["DuckDBIndex.search_by_slug","_execute_paginated_query"],["DuckDBIndex.remove_entry","DuckDBIndex._ensure_writable_connection"],["BioOntologySearchClient.search","BioOntologySearchClient.search_as_ontology_results"],["test_get_people","_write_model_file"],["ReleaseManager.run_checks","run_command"],["TestCreateAnatomicDatabase.test_database_with_batch_processing","TestCreateAnatomicDatabase.mock_batch_embeddings"],["DuckDBIndex.remove_entry","_create_search_indexes"],["DuckDBIndex.finalize_placeholder_attribute_ids","setup"],["_session_monkeypatch_setup","_fake_embedding_deterministic"],["ensure_db_file","ensure_db_file"],["ReleaseManager.release","_execute_step"],["test_validation_context_accepts_different_implementations","ValidationContext.get_existing_names"],["DuckDBIndex.get_person","_ensure_connection"],["DuckDBIndex.search","_search_semantic"],["create_edit_agent","_normalize_new_attribute_ids"],["ReleaseManager.merge_to_main","ReleaseManager.run_command"],["ReleaseManager.check_branch","run_command"],["DuckDBIndex._search_exact","DuckDBIndex._fetch_index_entry"],["DuckDBIndex.contains","_resolve_oifm_id"],["DuckDBIndex.all","_execute_paginated_query"],["ReleaseManager.get_current_version","run_command"],["DuckDBIndex._build_slug_search_clause","_build_slug_search_clause"],["get_embedding","_get_embedding_cache"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._validate_model"],["EmbeddingCache.get_embedding","_hash_text"],["test_count_method","_write_model_file"],["DuckDBIndex.add_or_update_entry_from_file","_build_embedding_text"],["DuckDBIndex.finalize_placeholder_attribute_ids","generate_attribute_id"],["test_drop_search_indexes_both","_fts_index_exists"],["DuckDBIndex.search_batch","DuckDBIndex._search_semantic_with_embedding"],["_fake_batch_embeddings","_fake_embedding_anatomic"],["DuckDBIndex.count_search","DuckDBIndex._build_slug_search_clause"],["ReleaseManager.merge_to_main","ReleaseManager.confirm"],["DuckDBIndex.get_full_batch","EmbeddingCache.setup"],["EmbeddingCache.get_embedding","EmbeddingCache._get_connection"],["create_model_stub_from_info","create_presence_element"],["BioOntologySearchClient.search_all_pages","BioOntologySearchClient.search_bioontology"],["test_validation_context_accepts_different_implementations","MockValidationContext.get_existing_oifm_ids"],["test_error_should_succeed_but_fails","_create_ctx"],["BioOntologySearchClient.search_bioontology","OntologySearchProtocol.search"],["TestAnatomicCLI.test_stats_basic","_fake_openai_client"],["edit_model_markdown","create_markdown_edit_agent"],["ReleaseManager.release","ReleaseManager.print_summary"],["ReleaseManager.run_tests","run_command"],["_process_and_insert_data","create_searchable_text"],["BioOntologySearchClient.search_bioontology","DuckDBIndex.search"],["DuckDBIndex.search_batch","_ensure_openai_client"],["main","print_header"],["DuckDBIndex.finalize_placeholder_attribute_ids","finalize_placeholder_attribute_ids"],["DuckDBIndex.add_ids_to_model","Organization.get"],["EmbeddingCache.store_embeddings_batch","_hash_text"],["DuckDBIndex.generate_model_id","_load_oifm_ids_for_source"],["DuckDBIndex._search_exact","_resolve_oifm_id"],["validate_finding_model","get_existing_names"],["test_keyword_some_found_partial_credit","_create_ctx"],["ReleaseManager.__init__","ReleaseManager._setup_logging"],["run_with_timer","_await_with_timer"],["ReleaseManager.__init__","_setup_logging"],["ReleaseManager.run_checks","ReleaseManager.run_command"],["_edited_text_instructions","_combine_instruction_sections"],["export_model_for_editing","_render_top_metadata_lines"],["test_error_should_fail_and_does","_create_ctx"],["DuckDBIndex.search_batch","DuckDBIndex._ensure_connection"],["DuckDBIndex._prepare_batch_payload","_build_row_data"],["ReleaseManager.update_version","ReleaseManager._setup_logging"],["ReleaseManager.update_version","_setup_logging"],["DuckDBIndex._prepare_batch_payload","_load_models_metadata"],["EmbeddingCache.store_embeddings_batch","EmbeddingCache._get_connection"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._calculate_file_hash"],["validate_finding_model","ValidationContext.get_attribute_ids_by_model"],["_basic_edit_validation","_validate_original_attributes_present"],["test_exact_match_handles_empty_strings","_create_ctx"],["create_markdown_edit_agent","_basic_edit_validation"],["test_add_updated_model_file","_write_model_file"],["DuckDBIndex._search_semantic","DuckDBIndex._ensure_openai_client"],["test_validation_context_accepts_different_implementations","MockValidationContext.get_existing_names"],["ReleaseManager.get_current_version","ReleaseManager.run_command"],["ReleaseManager.update_version","ReleaseManager.run_command"],["batch_embeddings_for_duckdb","_to_float32"],["DuckDBOntologySearchClient.search_with_filters","_search_single_with_filters"],["BioOntologySearchClient.search","search_as_ontology_results"],["DuckDBIndex.generate_model_id","setup"],["AgentEvaluationSuite.get_all_cases","create_successful_cases"],["create_markdown_edit_agent","_validate_output"],["DuckDBIndex.add_or_update_entry_from_file","setup"],["_process_and_insert_data","determine_sided"],["DuckDBIndex.get","DuckDBIndex._ensure_connection"],["ModelEditorCase.__init__","__init__"],["create_mock_edit_result","create_mock_edit_result"],["DuckDBIndex._load_oifma_ids_for_source","_ensure_connection"],["main","release"],["DuckDBIndex.get_full","DuckDBIndex._ensure_connection"],["ReleaseManager.update_version","ReleaseManager.check_existing_tag"],["DuckDBIndex._execute_paginated_query","_ensure_connection"],["DuckDBIndex.add_or_update_entry_from_file","_replace_attributes"],["DuckDBOntologySearchClient._find_exact_matches","DuckDBOntologySearchClient._row_to_result"],["DuckDBIndex.add_ids_to_model","generate_model_id"],["BioOntologySearchClient.search_parallel","BioOntologySearchClient.search"],["ReleaseManager.create_tag","run_command"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchResult.to_ontology_search_result"],["DuckDBIndex._insert_models_with_progress","_apply_batch_mutations"],["DuckDBIndex._generate_embeddings","DuckDBIndex._ensure_openai_client"],["ModelEditorCase.__init__","EmbeddingCache.__init__"],["EmbeddingCache.store_embeddings_batch","_to_float32"],["DuckDBOntologySearchClient._search_single","search"],["run_model_editor_task","AttributeAdditionEvaluator.evaluate"],["DuckDBIndex.count_search","_build_slug_search_clause"],["DuckDBIndex._search_semantic","DuckDBIndex._search_semantic_with_embedding"],["DuckDBIndex.count_search","DuckDBIndex._ensure_connection"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._create_search_indexes"],["ensure_db_file","fetch_manifest"],["DuckDBIndex._execute_paginated_query","DuckDBIndex.count"],["DuckDBIndex._search_semantic_with_embedding","search_batch"],["AgentEvaluationSuite.build_dataset","get_all_cases"],["DuckDBIndex.remove_entry","DuckDBIndex._drop_search_indexes"],["test_drop_search_indexes_both","_hnsw_index_exists"],["test_ontology_concept_match","perform_search_stages"],["validate_finding_model","ValidationContext.get_existing_names"],["DuckDBOntologySearchClient._search_single_with_filters","_get_embedding"],["test_validation_context_accepts_different_implementations","MockValidationContext.get_attribute_ids_by_model"],["test_structural_non_basemodel_returns_zero","_create_ctx"],["BioOntologySearchClient.search_bioontology","from_api_response"],["OntologySearchProtocol.search_parallel","BioOntologySearchClient.search"],["create_fts_index","create_fts_index"],["NumericAttributeIded.index_codes_str","_index_codes_str"],["DuckDBIndex._execute_batch_directory_update","_insert_models_with_progress"],["run_model_editor_task","ChangeTrackingEvaluator.evaluate"],["apply_edit","DemoState.mark_updated"],["DuckDBIndex.search","_search_fts"],["DuckDBIndex._search_semantic","_ensure_openai_client"],["test_update_from_directory_batch_update","_write_model_file"],["ReleaseManager.publish_pypi","run_command"],["_validate_choice_value_indices_and_bases","_validate_new_attr_suffixes"],["create_rejection_cases","load_fm_json"],["ReleaseManager.post_release_cleanup","ReleaseManager.run_command"],["DuckDBIndex._ensure_writable_connection","DuckDBIndex._ensure_connection"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._apply_rrf_fusion"],["run_model_editor_task","ExactMatchEvaluator.evaluate"],["main","load_model"],["test_update_from_directory_batch_mixed","_write_model_file"],["validate","_do_validate"],["DuckDBIndex.count_organizations","_ensure_connection"],["validate_finding_model","MockValidationContext.get_existing_oifm_ids"],["main","parse_args"],["run_model_editor_task","StructuralValidityEvaluator.evaluate"],["DuckDBIndex.count_search","DuckDBIndex.count_search"],["ModelEditorCase.__init__","DuckDBOntologySearchClient.__init__"],["DuckDBIndex.add_ids_to_model","get"],["DuckDBOntologySearchClient._search_single_with_filters","_row_to_result"],["BioOntologySearchClient.search_all_pages","search_bioontology"],["find_anatomic_locations","create_location_selection_agent"],["_validate_choice_value_indices_and_bases","_collect_value_codes"],["DuckDBIndex.get_organization","DuckDBIndex._ensure_connection"],["handle_natural_language","apply_edit"],["_print_verbose_stages","_print_ai_selection_stage"],["validate_finding_model","get_existing_oifm_ids"],["_common_editing_instructions","_combine_instruction_sections"],["test_semantic_search_returns_results","_write_model_file"],["DuckDBIndex._apply_batch_mutations","_delete_denormalized_records"],["DuckDBOntologySearchClient._find_exact_matches","_row_to_result"],["ModelEditorCase._execute","AttributeAdditionEvaluator.evaluate"],["TestEnsureDbFileMocked.test_creates_parent_directory_before_download","create_file_and_return"],["handle_save","record_save"],["BioOntologySearchClient.search_parallel","DuckDBOntologySearchClient.search"],["test_contains_handles_empty_substring","_create_ctx"],["DuckDBIndex._fetch_index_entry","_collect_contributors"],["DuckDBIndex.remove_entry","setup"],["validate_finding_model","get_attribute_ids_by_model"],["validate_finding_model","MockValidationContext.get_existing_names"],["EmbeddingCache.__aenter__","DuckDBIndex.setup"],["create_info_from_name","_normalize_finding_info"],["test_load_oifma_ids_for_source_caching","_write_model_file"],["DuckDBIndex.search_by_slug","DuckDBIndex._build_slug_search_clause"],["DuckDBIndex._search_exact","_fetch_index_entry"],["ReleaseManager.update_version","ReleaseManager.get_current_version"],["assign_real_attribute_ids","_get_index"],["test_get_organization","_write_model_file"],["DuckDBIndex._execute_batch_directory_update","_delete_old_entries"],["DuckDBIndex._execute_paginated_query","count"],["AgentEvaluationSuite.get_all_cases","AgentEvaluationSuite.create_failure_cases"],["ModelEditorCase._execute","ExactMatchEvaluator.evaluate"],["DuckDBIndex.finalize_placeholder_attribute_ids","EmbeddingCache.setup"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._load_models_metadata"],["DuckDBIndex.remove_entry","DuckDBIndex._delete_denormalized_records"],["DuckDBIndex.search_batch","_search_fts"],["find_anatomic_locations","execute_anatomic_search"],["ModelEditorCase._execute","StructuralValidityEvaluator.evaluate"],["DuckDBIndex.get_full_batch","_ensure_connection"],["DuckDBIndex.get_full","setup"],["BioOntologySearchClient.search_bioontology","BioOntologySearchClient.search"],["Organization.get","Person.get"],["add_standard_codes_to_finding_model","add_standard_codes_to_model"],["create_markdown_edit_agent","_edited_text_instructions"],["test_keyword_all_found_partial_credit","_create_ctx"],["DuckDBIndex._search_semantic_with_embedding","DuckDBIndex._entry_has_tags"],["DuckDBIndex._load_oifm_ids_for_source","DuckDBIndex._ensure_connection"],["DuckDBIndex._collect_directory_files","_calculate_file_hash"],["ModelEditorCase._execute","ErrorHandlingEvaluator.evaluate"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._ensure_writable_connection"],["DuckDBIndex.get_person","DuckDBIndex._ensure_connection"],["_print_verbose_stages","_print_categorization_stage"],["find_anatomic_locations","generate_anatomic_query_terms"],["DuckDBIndex.contains","DuckDBIndex._ensure_connection"],["run_model_editor_evals","run_model_editor_evals"],["test_write_operations_rebuild_search_indexes","_write_model_file"],["make_info","_do_make_info"],["build","progress_update"],["anatomic_validate","_do_validate"],["DuckDBIndex.add_or_update_entry_from_file","_calculate_file_hash"],["validate_finding_model","MockValidationContext.get_attribute_ids_by_model"],["test_contains_case_sensitive_option","_create_ctx"],["DuckDBIndex._delete_old_entries","_delete_denormalized_records"],["get_embedding_for_duckdb","EmbeddingCache._to_float32"],["run_model_editor_task","IDPreservationEvaluator.evaluate"],["create_markdown_edit_agent","_common_editing_instructions"],["DuckDBIndex.finalize_placeholder_attribute_ids","Person.get"],["add_ids_to_finding_model","add_ids_to_model"],["main","run_session"],["ReleaseManager.update_version","check_existing_tag"],["ReleaseManager.build_packages","run_command"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchClient.search_all_pages"],["DuckDBIndex._execute_batch_directory_update","_drop_search_indexes"],["DuckDBIndex.add_ids_to_model","DuckDBIndex.generate_model_id"],["test_denormalized_model_people_table","_table_count"],["DuckDBIndex.add_ids_to_model","generate_attribute_id"],["run_session","explain_commands"],["DuckDBIndex._build_slug_search_clause","DuckDBIndex._build_slug_search_clause"],["DuckDBIndex.search_by_slug","search_by_slug"],["ReleaseManager.commit_changes","ReleaseManager.run_command"],["demo_multiple_ontologies","print_section"],["ModelEditorCase.__init__","DemoState.__init__"],["ReleaseManager.release","ReleaseManager._should_skip_step"],["DuckDBIndex.add_or_update_entry_from_file","EmbeddingCache.setup"],["DuckDBIndex.__aenter__","DuckDBIndex._ensure_connection"],["EmbeddingCache.get_embeddings_batch","_get_connection"],["EmbeddingCache.__aenter__","setup"],["BioOntologySearchClient.search_bioontology","DuckDBOntologySearchClient.search"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._build_embedding_text"],["_print_verbose_stages","_print_final_output_stage"],["create_markdown_edit_agent","_combine_instruction_sections"],["ModelEditorCase.__init__","DuckDBIndex.__init__"],["Person.get","DuckDBIndex.get"],["test_keyword_none_found_returns_zero","_create_ctx"],["DuckDBIndex.search_batch","DuckDBIndex._ensure_openai_client"],["ReleaseManager.build_packages","ReleaseManager.run_command"],["Person.organization","Organization.get"],["DuckDBIndex._fetch_index_entry","DuckDBIndex._collect_contributors"],["DuckDBIndex._load_oifma_ids_for_source","DuckDBIndex._ensure_connection"],["ModelEditorCase.__init__","BioOntologySearchClient.__init__"],["test_remove_entry_clears_related_rows","_write_model_file"],["DuckDBIndex._execute_paginated_query","DuckDBIndex._ensure_connection"],["BioOntologySearchClient.search_parallel","search"],["DuckDBIndex.update_from_directory","DuckDBIndex._collect_directory_files"],["DuckDBIndex.setup","_ensure_connection"],["AgentEvaluationSuite.get_all_cases","AgentEvaluationSuite.create_successful_cases"],["create_edit_agent","_validate_output"],["DuckDBIndex._load_base_contributors","Organization.get"],["DuckDBIndex.count_people","DuckDBIndex._ensure_connection"],["test_denormalized_tags_table","_write_model_file"],["ModelEditorCase._execute","KeywordMatchEvaluator.evaluate"],["DuckDBIndex._search_fts","DuckDBIndex._entry_has_tags"],["DuckDBIndex.add_or_update_entry_from_file","_drop_search_indexes"],["main","demo_detailed_search"],["ReleaseManager.merge_to_main","confirm"],["run_session","handle_command"],["DuckDBIndex._load_models_metadata","_validate_model"],["test_find_similar_models_basic_functionality","_StubFindingInfoAgent.run"],["model_file_name","normalize_name"],["ReleaseManager.check_existing_tag","run_command"],["test_error_should_fail_but_succeeds","_create_ctx"],["TestEnsureDbFileMocked.test_downloads_when_file_missing_and_url_configured","create_file_and_return"],["DuckDBIndex.update_from_directory","EmbeddingCache.setup"],["DuckDBIndex._entry_has_tags","all"],["DuckDBIndex.finalize_placeholder_attribute_ids","DuckDBIndex.generate_attribute_id"],["add_ids_to_model","add_ids_to_model"],["_lookup_cached_embeddings","get_embeddings_batch"],["OntologySearchProtocol.search_parallel","search"],["DuckDBOntologySearchClient._search_single_with_filters","_combine_with_exact_matches"],["test_create_hnsw_index_custom_parameters","_hnsw_index_exists"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._drop_search_indexes"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._insert_models_with_progress"],["ReleaseManager.create_github_release","ReleaseManager.run_command"],["test_exact_match_returns_one_on_match","_create_ctx"],["FindingModelFull.index_codes_str","_index_codes_str"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._find_exact_matches"],["match_ontology_concepts","build_final_output"],["create_finding_info_from_name","create_info_from_name"],["test_concurrent_id_generation","generate_ids"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._build_row_data"],["DuckDBIndex.get_organizations","_ensure_connection"],["DuckDBIndex.count_organizations","DuckDBIndex._ensure_connection"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._delete_old_entries"],["DuckDBIndex.get_full","get_full"],["validate_finding_model","check_oifm_id_conflict"],["test_batch_operation_partial_failure","_write_model_file"],["DuckDBIndex.remove_entry","EmbeddingCache.setup"],["DuckDBIndex._validate_model","_ensure_connection"],["DuckDBIndex.all","all"],["Organization.get","DuckDBIndex.get"],["DuckDBIndex.get_full_batch","get_full_batch"],["test_denormalized_model_organizations_table","_write_model_file"],["ReleaseManager.create_github_release","ReleaseManager.confirm"],["test_denormalized_synonyms_table","_write_model_file"],["ReleaseManager.release","_get_release_steps"],["EmbeddingCache.store_embedding","EmbeddingCache._to_float32"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_tags"],["DuckDBIndex.generate_attribute_id","setup"],["DuckDBIndex._search_semantic_with_embedding","DuckDBIndex._fetch_index_entry"],["handle_markdown_edit","run_with_timer"],["fetch_manifest","fetch_manifest"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._get_embedding"],["ReleaseManager.check_branch","ReleaseManager.run_command"],["_session_cli_monkeypatch_setup","_fake_embedding_deterministic"],["test_concurrent_index_operations","add_file"],["test_generate_model_id_collision_avoidance","_write_model_file"],["ReleaseManager.update_changelog","confirm"],["_collect_value_codes","_parse_suffix"],["test_structural_some_fields_present","_create_ctx"],["DuckDBIndex.add_or_update_entry_from_file","_validate_model"],["ModelEditorCase.__init__","_StubFindingInfoAgent.__init__"],["main","check_configuration"],["ReleaseManager.release","print_summary"],["DuckDBIndex.update_from_directory","_ensure_writable_connection"],["DuckDBIndex.get_full","EmbeddingCache.setup"],["TestCreateAnatomicDatabase.test_database_with_batch_processing","mock_batch_embeddings"],["EmbeddingCache.get_embeddings_batch","_hash_text"],["DuckDBIndex.get_full_batch","DuckDBIndex.get_full_batch"],["test_anatomic_location_search","perform_search_stages"],["Person.get","Organization.get"],["DuckDBIndex.generate_attribute_id","generate_attribute_id"],["DuckDBIndex.finalize_placeholder_attribute_ids","DuckDBIndex.get"],["DuckDBIndex.update_from_directory","_execute_batch_directory_update"],["_validate_choice_value_indices_and_bases","_validate_existing_attr_suffixes"],["DuckDBIndex._entry_has_tags","DuckDBIndex.all"],["test_batch_update_rebuilds_indexes_once","_fts_index_works"],["ReleaseManager.release","_should_skip_step"],["Person.organization","get"],["EmbeddingCache.get_embeddings_batch","EmbeddingCache._get_connection"],["validate_finding_model","check_attribute_id_conflict"],["DuckDBIndex.remove_entry","_drop_search_indexes"],["get_detail_on_finding","add_details_to_info"],["ReleaseManager.run_tests","ReleaseManager.run_command"],["DuckDBOntologySearchClient._search_single","OntologySearchProtocol.search"],["test_mock_validation_context_implements_protocol","ValidationContext.get_attribute_ids_by_model"],["DuckDBIndex.generate_model_id","DuckDBIndex.generate_model_id"],["DuckDBIndex._insert_models_with_progress","_create_chunk_payload"],["DuckDBOntologySearchClient._search_single","DuckDBIndex.search"],["DuckDBIndex._load_base_contributors","get"],["DuckDBIndex.update_from_directory","_collect_directory_files"],["DuckDBIndex.add_ids_to_model","EmbeddingCache.setup"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._delete_denormalized_records"],["DuckDBOntologySearchClient._search_single_with_filters","_apply_rrf_fusion"],["main","ReleaseManager.release"],["DuckDBIndex.get_full_batch","DuckDBIndex.setup"],["DuckDBIndex.remove_entry","_ensure_writable_connection"],["execute_ontology_search","_add_exact_matches"],["DuckDBIndex._load_models_metadata","DuckDBIndex._build_search_text"],["ReleaseManager.run_tests","ReleaseManager.confirm"],["DuckDBIndex.remove_entry","_delete_denormalized_records"],["DuckDBIndex.all","DuckDBIndex.all"],["DuckDBIndex.get_full","DuckDBIndex.get_full"],["test_add_and_retrieve_model","_write_model_file"],["demo_detailed_search","print_section"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._apply_rrf_fusion"],["DuckDBIndex.finalize_placeholder_attribute_ids","DuckDBIndex.finalize_placeholder_attribute_ids"],["_handle_reset","DemoState.reset"],["ChoiceAttributeIded.fix_max_selected","fix_max_selected_validator"],["EmbeddingCache.store_embedding","EmbeddingCache._hash_text"],["create_finding_model_from_markdown","create_model_from_markdown"],["DuckDBIndex._search_semantic_with_embedding","DuckDBIndex.search_batch"],["test_contains_case_insensitive_default","_create_ctx"],["test_denormalized_attributes_table","_table_count"],["test_create_hnsw_index_custom_name","_hnsw_index_exists"],["test_create_fts_index_custom_parameters","_fts_index_exists"],["test_validation_context_accepts_different_implementations","get_existing_oifm_ids"],["run_with_timer","_runner"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._row_to_result"],["ReleaseManager.create_tag","ReleaseManager.run_command"],["DuckDBIndex.add_ids_to_model","Person.get"],["test_semantic_search_with_real_openai_api","_write_model_file"],["create_anatomic_database","_process_and_insert_data"],["DuckDBIndex.count","DuckDBIndex._ensure_connection"],["ModelEditorCase.__init__","StructuralValidityEvaluator.__init__"],["BioOntologySearchClient.search_bioontology","BioOntologySearchResult.from_api_response"],["execute_ontology_search","_filter_anatomical_concepts"],["apply_edit","display_current"],["EmbeddingCache.clear_cache","_get_connection"],["_handle_command_input","handle_natural_language"],["handle_markdown_edit","prompt_markdown_edit"],["add_details_to_finding_info","add_details_to_info"],["test_contains_handles_empty_output","_create_ctx"],["get_embedding_for_duckdb","_to_float32"],["main","test_anatomic_location_search"],["ModelEditorCase._execute","ChangeTrackingEvaluator.evaluate"],["test_create_hnsw_index_basic","_hnsw_index_exists"],["test_write_operations_rebuild_search_indexes","_fts_index_works"],["ReleaseManager.publish_pypi","ReleaseManager.run_command"],["Person.get","get"],["_lookup_cached_embeddings","_get_embedding_cache"],["TestEnsureDbFileMocked.test_creates_parent_directory_before_download","TestEnsureDbFileMocked.create_file_and_return"],["create_info_from_name","_create_finding_info_agent"],["ChoiceValueIded.index_codes_str","_index_codes_str"],["DuckDBIndex.setup","_load_base_contributors"],["AgentEvaluationSuite.build_dataset","AgentEvaluationSuite.get_all_cases"],["run_model_editor_task","ContentPreservationEvaluator.evaluate"],["test_generate_model_id_max_attempts_exhausted","mock_random_digits"],["DuckDBIndex.add_ids_to_model","add_ids_to_model"],["DuckDBIndex._prepare_batch_payload","_generate_embeddings"],["_basic_edit_validation","_validate_new_items_have_ids"],["create_edit_agent","_combine_instruction_sections"],["DuckDBIndex.setup","DuckDBIndex._ensure_connection"],["test_search_by_slug_relevance_ranking","populated_index"],["DuckDBIndex._search_exact","_entry_has_tags"],["ReleaseManager.publish_pypi","ReleaseManager.confirm"],["test_structural_empty_required_list_returns_one","_create_ctx"],["test_remove_entry_clears_related_rows","_table_count"],["AgentEvaluationSuite.get_all_cases","create_failure_cases"],["DuckDBIndex.generate_model_id","DuckDBIndex._load_oifm_ids_for_source"],["markdown_to_fm","_do_markdown_to_fm"],["test_mock_validation_context_implements_protocol","get_attribute_ids_by_model"],["test_get_person","_write_model_file"],["test_denormalized_tags_table","_table_count"],["DuckDBOntologySearchClient._search_single","_find_exact_matches"],["ModelEditorCase.__init__","ReleaseManager.__init__"],["run_model_editor_task","RejectionAccuracyEvaluator.evaluate"],["DuckDBIndex._search_semantic_with_embedding","_fetch_index_entry"],["_basic_edit_validation","_validate_model_id"],["test_keyword_some_found_no_partial_credit","_create_ctx"],["test_batch_update_rebuilds_indexes_once","_hnsw_index_exists"],["test_tag_filtering_works_in_all_search_paths","_write_model_file"],["add_ids_to_finding_model","DuckDBIndex.add_ids_to_model"],["DuckDBIndex.get","_ensure_connection"],["parse_args","parse_args"],["_validate_existing_attr_suffixes","_parse_suffix"],["DuckDBIndex.add_ids_to_model","DuckDBIndex.generate_attribute_id"],["DuckDBIndex.get_full","_ensure_connection"],["categorize_with_validation","create_categorization_agent"],["DuckDBIndex.generate_attribute_id","EmbeddingCache.setup"],["TestLoadAnatomicData.test_http_error","TestLoadAnatomicData.raise_http_error"],["strip_quotes_secret","strip_quotes"],["_process_and_insert_data","validate_anatomic_record"],["DuckDBIndex.search","DuckDBIndex._search_fts"],["run_session","handle_natural_language"],["DuckDBOntologySearchClient.search","DuckDBOntologySearchClient._search_single"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._combine_with_exact_matches"],["run_model_editor_task","ContainsEvaluator.evaluate"],["DuckDBOntologySearchClient.search","_search_single"],["ModelEditorCase.__init__","MockValidationContext.__init__"],["DuckDBIndex.count_search","count_search"],["handle_markdown_edit","apply_edit"],["ReleaseManager.update_version","validate_version"],["DuckDBIndex.generate_model_id","EmbeddingCache.setup"],["ReleaseManager.release","ReleaseManager._get_release_steps"],["EmbeddingCache.get_embedding","EmbeddingCache._hash_text"],["DuckDBIndex.finalize_placeholder_attribute_ids","DuckDBIndex.setup"],["DuckDBIndex._load_models_metadata","_build_search_text"],["DuckDBIndex.search","DuckDBIndex._search_exact"],["test_exact_match_is_case_sensitive","_create_ctx"],["OntologySearchResult.as_index_code","normalize_concept"],["ModelEditorCase._execute","RejectionAccuracyEvaluator.evaluate"],["_session_monkeypatch_setup","_fake_client_for_testing"],["DuckDBIndex.search","DuckDBIndex._search_semantic"],["main","demo_pagination"],["DuckDBIndex.update_from_directory","DuckDBIndex._prepare_batch_payload"],["ModelEditorCase._execute","IDPreservationEvaluator.evaluate"],["EmbeddingCache.clear_cache","EmbeddingCache._get_connection"],["test_ontology_concept_match","_print_verbose_stages"],["run_model_editor_task","evaluate"],["create_edit_agent","_basic_edit_validation"],["compare_models","compare_models"],["ModelEditorCase.__init__","KeywordMatchEvaluator.__init__"],["EmbeddingCache.store_embeddings_batch","EmbeddingCache._hash_text"],["DuckDBIndex._ensure_writable_connection","_ensure_connection"],["BioOntologySearchClient.search_parallel","OntologySearchProtocol.search"],["test_error_should_succeed_and_does","_create_ctx"],["DuckDBIndex._execute_paginated_query","search_by_slug"],["ModelEditorCase.__init__","ModelEditorCase.__init__"],["test_anatomic_location_search","_print_summary"],["BioOntologySearchClient.search_parallel","DuckDBIndex.search"],["test_mock_validation_context_implements_protocol","ValidationContext.get_existing_oifm_ids"],["DuckDBIndex.add_ids_to_model","DuckDBIndex.get"],["AgentEvaluationSuite.get_all_cases","AgentEvaluationSuite.create_edge_cases"],["DuckDBIndex.get_organization","_ensure_connection"],["test_validation_context_accepts_different_implementations","ValidationContext.get_attribute_ids_by_model"],["DuckDBIndex.search_batch","_search_semantic_with_embedding"],["create_finding_model_stub_from_finding_info","create_model_stub_from_info"],["DuckDBIndex._load_models_metadata","DuckDBIndex._validate_model"],["_handle_reset","reset"],["demo_detailed_search","display_results"],["ReleaseManager.merge_to_main","run_command"],["DuckDBIndex.search_batch","DuckDBIndex._search_fts"],["OntologySearchProtocol.search_parallel","OntologySearchProtocol.search"],["create_markdown_edit_cases","load_fm_json"],["test_read_only_mode_blocks_writes","_fake_openai_client"],["DuckDBIndex._load_models_metadata","_build_embedding_text"],["TestAnatomicCLI.test_build_basic","_fake_openai_client"],["OntologySearchProtocol.search_parallel","DuckDBIndex.search"],["DuckDBIndex.add_or_update_entry_from_file","_build_search_text"],["add_ids_to_model","DuckDBIndex.add_ids_to_model"],["DuckDBIndex._search_fts","_fetch_index_entry"],["test_write_operations_rebuild_search_indexes","_hnsw_index_exists"],["DuckDBIndex.add_or_update_entry_from_file","_ensure_writable_connection"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient.search"],["validate","_validate_single_file"],["test_ontology_concept_match","_print_summary"],["DuckDBIndex.search","_search_exact"],["DuckDBIndex.search_batch","DuckDBIndex._search_exact"],["DuckDBIndex.setup","DuckDBIndex._load_base_contributors"],["_session_cli_monkeypatch_setup","_fake_client_for_testing"],["ModelEditorCase._execute","evaluate"],["DuckDBIndex.add_or_update_entry_from_file","_delete_denormalized_records"],["DuckDBIndex.setup","DuckDBIndex._create_search_indexes"],["BioOntologySearchClient.search_as_ontology_results","search_all_pages"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex.setup"],["categorize_with_validation","ensure_exact_matches_post_process"],["TestEnsureDbFileMocked.test_downloads_when_file_missing_and_url_configured","TestEnsureDbFileMocked.create_file_and_return"],["DuckDBIndex.get","DuckDBIndex._resolve_oifm_id"],["describe_finding_name","create_info_from_name"],["DuckDBIndex.generate_attribute_id","_load_oifma_ids_for_source"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_attributes"],["create_model_stub_from_info","create_change_element"],["ReleaseManager.check_git_status","run_command"],["_handle_reset","display_current"],["load_fm_json","load_fm_json"],["DuckDBIndex._insert_models_with_progress","DuckDBIndex._create_chunk_payload"],["update","progress_update"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._get_embedding"],["_process_and_insert_data","_insert_batch"],["DuckDBIndex.update_from_directory","_prepare_batch_payload"],["main","demo_semantic_type_filter"],["run_model_editor_evals","main"],["DuckDBIndex._load_oifm_ids_for_source","_ensure_connection"],["_natural_language_instructions","_combine_instruction_sections"],["apply_edit","render_rejections"],["DuckDBIndex.contains","_ensure_connection"],["ChoiceAttributeIded.index_codes_str","_index_codes_str"],["DuckDBIndex.get","_fetch_index_entry"],["ReleaseManager.check_existing_tag","ReleaseManager.run_command"],["demo_semantic_type_filter","print_section"],["ReleaseManager.update_version","run_command"],["test_load_oifm_ids_for_source_caching","_write_model_file"],["TestLoadAnatomicData.test_http_error","raise_http_error"],["stats","_do_stats"],["index","fake_embedding"],["DuckDBIndex.generate_attribute_id","DuckDBIndex.generate_attribute_id"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._upsert_contributors"],["export_model_for_editing","_render_attribute_lines"],["test_keyword_case_insensitive_matching","_create_ctx"],["main","test_ontology_concept_match"],["test_count_people","_write_model_file"],["get_embeddings_batch","_fetch_and_store_embeddings"],["test_denormalized_model_people_table","_write_model_file"],["DuckDBIndex._search_semantic","_search_semantic_with_embedding"],["DuckDBOntologySearchClient._search_single","_combine_with_exact_matches"],["test_read_only_mode_blocks_writes","_write_model_file"],["validate_finding_model","check_name_conflict"],["Person.organization","Person.get"],["index","_fake_openai_client"],["demo_basic_search","print_section"],["DuckDBIndex.update_from_directory","DuckDBIndex.setup"],["create_anatomic_database","_create_indexes"],["make_stub_model","_do_make_stub_model"],["test_search_with_single_tag","_write_model_file"],["test_mock_validation_context_implements_protocol","get_existing_names"],["ReleaseManager.run_tests","confirm"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._create_search_indexes"],["DuckDBIndex.search_batch","_search_exact"],["DuckDBIndex._collect_directory_files","DuckDBIndex._calculate_file_hash"],["test_create_info_from_name_normalizes_and_logs","fake_info"],["extract_text_for_keywords","extract_text_for_keywords"],["DuckDBIndex.get_full_batch","DuckDBIndex._ensure_connection"],["create_edit_agent","_natural_language_instructions"],["ReleaseManager.check_git_status","ReleaseManager.run_command"],["test_concurrent_cache_operations","store_embedding_task"],["BioOntologySearchClient.search_bioontology","search"],["DuckDBIndex._load_base_contributors","Person.get"],["test_keyword_all_found_no_partial_credit","_create_ctx"],["build","_do_build"],["DuckDBIndex.search_by_slug","DuckDBIndex._execute_paginated_query"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._find_exact_matches"],["_lookup_cached_embeddings","EmbeddingCache.get_embeddings_batch"],["main","display_current"],["get_attribute_names","get_attribute_names"],["test_drop_search_indexes_missing_gracefully","_fts_index_exists"],["add_standard_codes_to_model","_add_index_codes"],["DuckDBIndex.__aenter__","_ensure_connection"],["DuckDBIndex.add_or_update_entry_from_file","_replace_tags"],["test_validation_context_accepts_different_implementations","get_attribute_ids_by_model"],["get_embedding","EmbeddingCache.get_embedding"],["DuckDBIndex.add_or_update_entry_from_file","_replace_synonyms"],["DuckDBIndex.all","DuckDBIndex._execute_paginated_query"],["test_search_with_nonexistent_tags","_write_model_file"],["DuckDBIndex.remove_entry","DuckDBIndex.setup"],["_fake_client_for_testing","_fake_openai_client"],["test_setup_creates_search_indexes","_fts_index_works"],["DuckDBIndex.update_from_directory","DuckDBIndex._classify_directory_changes"],["DuckDBIndex.contains","DuckDBIndex._resolve_oifm_id"],["ReleaseManager.update_version","ReleaseManager.validate_version"],["test_search_by_slug_relevance_ranking","fake_embedding"],["DuckDBIndex.get_people","_ensure_connection"],["anatomic_build","_do_build"],["test_find_similar_models_basic_functionality","run"],["find_similar_models","_generate_search_terms_with_fallback"],["EmbeddingCache.store_embedding","_get_connection"],["ReleaseManager.post_release_cleanup","run_command"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._row_to_result"],["DuckDBIndex.search","_ensure_connection"],["match_ontology_concepts","generate_finding_query_terms"],["DuckDBIndex.update_from_directory","_stage_directory_files"],["DuckDBIndex.setup","_create_search_indexes"],["ReleaseManager.update_changelog","ReleaseManager.confirm"],["handle_save","save_model"],["DuckDBOntologySearchClient.search_with_filters","DuckDBOntologySearchClient._search_single_with_filters"],["create_markdown_edit_agent","_normalize_new_attribute_ids"],["_fetch_and_store_embeddings","_get_embedding_cache"],["create_edit_agent","_common_editing_instructions"],["main","demo_basic_search"],["DuckDBIndex.get_full","DuckDBIndex.setup"],["DuckDBIndex.count_people","_ensure_connection"],["EmbeddingCache.__aenter__","EmbeddingCache.setup"],["Organization.get","Organization.get"],["test_mock_validation_context_implements_protocol","ValidationContext.get_existing_names"],["DuckDBIndex.search_by_slug","DuckDBIndex.search_by_slug"],["test_get_organizations","_write_model_file"],["DuckDBIndex._search_fts","DuckDBIndex._fetch_index_entry"],["generate_oifm_id","_random_digits"],["edit_model_natural_language","create_edit_agent"],["DuckDBOntologySearchClient._search_single","_apply_rrf_fusion"],["markdown_to_fm","print_info_truncate_detail"],["weighted_fusion","normalize_scores"],["test_count_organizations","_write_model_file"],["create_anatomic_database","_verify_database"],["ChoiceAttribute.fix_max_selected","fix_max_selected_validator"],["ReleaseManager.release","ReleaseManager.handle_error"],["DuckDBIndex.add_ids_to_model","DuckDBIndex.setup"]],"d":{".github/copilot-instructions.md":["Copilot Instructions \u00b7 FindingModel"],".github/prompts/implement-plan.prompt.md":["Implement Development Plan","Approach: One Phase at a Time","Before Starting Phase","During Implementation","After Completing Phase","If Something Goes Wrong","Remember"],".github/prompts/review-plan.prompt.md":["Plan Review Assessment","Context","Review Process","Step 1: Check Historical Context","Step 2: Goal Assessment","Step 3: Work Breakdown Evaluation","Step 4: Technical Approach Validation","Step 5: Completeness Check","Output","Executive Summary"],".serena/memories/agent_evaluation_best_practices_2025.md":["Agent Evaluation Best Practices - 2025","Framework: Pydantic AI Evals","Core Pattern","1. Define data models","2. Create focused evaluators (return 0.0-1.0)","3. Build dataset AT MODULE LEVEL with evaluators","4. Run evaluation (evaluators already in Dataset)","Logfire Integration (Automatic)","What Happens Automatically","For New Eval Suites"],".serena/memories/ai_assistant_usage_2025.md":["AI Assistant Usage Guidelines (2025-10-06)","Core Principles","Instruction File Strategy","Best Practices (Sources: GitHub Copilot Custom Instructions Guidance, Claude Code Memory Docs)","Testing Guidelines (Updated 2025-10-06)","Model Editing Feature (v0.4)","Required Behaviors for Agents"],".serena/memories/anatomic_location_search_implementation.md":["Anatomic Location Search Implementation","Overview","CLI Commands (2025-10-13)","Build database from default URL","Build from custom source with force overwrite  ","Validate data without building database","Show database statistics","Architecture Decisions","Two-Agent Pattern","DuckDB Backend (2025-09)"],".serena/memories/api_integration.md":["API Integration and External Services","Required API Keys","OpenAI API","Perplexity API","MongoDB (Optional)","Configuration Management","Testing with External APIs","API Error Handling"],".serena/memories/bioontology_integration_2025.md":["BioOntology API Integration (2025-09-09)","Overview","Implementation Details","BioOntologySearchClient","Key Features","API Response Mapping","Integration with Protocol","Performance Characteristics","Configuration Requirements",".env file"],".serena/memories/code_style_conventions.md":["Code Style and Conventions","Python Version","Code Style","Code Patterns","Logging","Testing","Error Handling","Naming Conventions","Design Principles","Package Data Pattern"],".serena/memories/documentation_corrections_2025.md":["Documentation Corrections - January 2025","Overview","Major Corrections","1. Index Class Documentation","2. find_similar_models() Function","Wrong signature and behavior","Returns list of tuples (wrong)","Actual signature and behavior","Returns SimilarModelAnalysis object with:","- recommendation: \"edit_existing\", \"create_new\", or \"review_needed\""],".serena/memories/duckdb_hybrid_search_research_2025.md":["DuckDB Hybrid Search Best Practices (2025)","Overview","Key Technical Approaches","1. Full-Text Search (FTS)","2. Vector Embeddings","3. Hybrid Search Fusion","4. Schema Design Best Practices","Implementation Pattern from Anatomic Location Search","References"],".serena/memories/index_duckdb_migration_decisions_2025.md":["Index DuckDB Migration - Key Decisions","Architecture Decisions","Drop/Rebuild HNSW Strategy (2025-10-08)","No Foreign Key Constraints (2025-10-08)","Separate Contributor Tables (2025-10-08)","Denormalized Tables (2025-10-08)","Batch Directory Ingestion (2025-10-08)","Read-Only Mode by Default (2025-10-08)","Semantic Search Always Enabled (2025-10-08)","Remote Database Downloads (2025-10-11)"],".serena/memories/index_duckdb_migration_status_2025.md":["DuckDB Index Migration Status","Phase 1: Technology Migration - COMPLETE \u2705","Implementation Complete","Tests Complete","Bug Fixes Applied","What's Next","Integration Tasks (can be separate PR)","Optional Enhancements (deferred)","Phase 2: Architectural Refactoring","Key Architectural Decisions"],".serena/memories/instruction_files_plan_2025.md":["Instruction File Alignment Plan (2025-09-28)","Goal","Structure Blueprint","Update Process"],".serena/memories/logfire_observability_2025.md":["Logfire Observability for FindingModel - 2025","Overview","Key Design Principles - FindingModel Implementation","1. Settings-Based Configuration (NOT os.getenv)","Configure Logfire using project settings","Instrument Pydantic AI agents (PRIMARY instrumentation)","2. Environment Variables (Managed by Settings)","3. ConsoleOptions for Console Configuration","Structured Logging Patterns","Use Named Parameters"],".serena/memories/model_editing_guardrails_2025-09-26.md":["Model Editing Guardrails (September 26, 2025)"],".serena/memories/multi_agent_orchestration_system_2025.md":["Multi-Agent Orchestration System (2025)","Overview","Architecture","Orchestrator Layer","Implementation Agents","Evaluation Agents","Workflow","Evaluation Criteria","Orchestration Patterns","Parallel Processing"],".serena/memories/ontology_concept_search_refactoring.md":["Ontology Concept Search Refactoring (2025-09-04)","Overview","Key Architecture Changes","Performance Optimization (85% improvement)","Pydantic AI Pattern Corrections","Query Generation","Text Normalization Improvements","Post-Processing for Exact Matches","Testing Improvements","Framework Consistency"],".serena/memories/ontology_search_optimizations_2025.md":["Ontology Search Optimizations (2025-09-15)","Performance Improvements Implemented","1. Reduced Default Ontology Set","2. Cohere Reranking Configuration","3. SNOMEDCT Prioritization","4. Code Complexity Management","Architecture Decisions","Protocol-Based Backend Support","Configuration Philosophy","Testing Strategy"],".serena/memories/project_overview.md":["FindingModel Project Overview","Purpose","Tech Stack","Project Structure","Key Features"],".serena/memories/project_state_january_2025.md":["Project State - January 2025","Current Status","\u2705 All Tests Passing","\u2705 Code Quality","\u2705 Documentation","Recent Major Improvements","Test Suite Enhancements","Documentation Fixes","Code Quality Improvements","Known Working Commands"],".serena/memories/protocol_based_architecture_2025.md":["Protocol-Based Architecture Pattern (2025-09-09)","Overview","Key Design Decisions","Protocol Interface Design","Implementation Pattern","Backend Implementations","Auto-Detection and Parallel Execution","Benefits","Flexibility","Performance"],".serena/memories/pydantic_ai_best_practices_2025_09.md":["Pydantic AI Usage Notes (Sep 2025)"],".serena/memories/pydantic_ai_testing_best_practices.md":["Pydantic AI Testing Best Practices","Core Philosophy","Essential Patterns","1. Prevent Accidental API Calls","2. Use TestModel for Simple Testing","3. Use FunctionModel for Complex Behavior","4. Integration Test Pattern","Anti-Patterns to Avoid","\u274c Testing Library Functionality","BAD - tests Pydantic AI, not your code"],".serena/memories/pytest_fixtures_reference_2025.md":["Pytest Fixtures Reference","Overview","Critical Rules for Test Implementation","\u274c DO NOT","\u2705 DO","Available Fixtures","1. `full_model` - Valid Test Model with IDs","2. `real_model` - Real Pulmonary Embolism Model","3. `tmp_defs_path` - Directory of Test Files","4. `base_model` - Model Without IDs"],".serena/memories/suggested_commands.md":["Development Commands","Primary Commands (using Task)","Testing","Code Quality","Building","Alternative Commands (using uv directly)","Testing","Code Quality","Building","CLI Usage"],".serena/memories/task_completion_checklist.md":["Task Completion Checklist","1. Code Quality Checks (REQUIRED)","2. Run Tests (REQUIRED)","3. Test External APIs (if modified)","4. Verify Specific Changes","5. Check Git Status","Important Notes","When to Skip Checks"],".serena/memories/test_suite_improvements_2025.md":["Test Suite Improvements - January 2025","Overview","Added Test Coverage","1. Index.search() Functionality Tests (test_index.py)","2. AI Tools Integration Tests (test_tools.py)","3. find_similar_models() Coverage (test_tools.py)","4. Error Handling Tests","Linting Fixes Applied","Test Statistics","Running Tests"],"CHANGELOG.md":["Changelog","[Unreleased (presumed 0.5.0)]","Added","Changed","Deprecated","Removed","Fixed","[0.4.0] - 2025-10-20","Added","Changed"],"CLAUDE.md":["CLAUDE.md","0. Operate via Serena MCP at all times","1. Project snapshot (see Serena `project_overview`)","2. Architecture touchpoints","3. Coding standards (Serena `code_style_conventions`)","4. Testing + QA (Serena `pydantic_ai_testing_best_practices`)","Three-Tier Testing Structure","Test Data and Fixtures","Tasks","5. Workflow expectations"],"README.md":["`findingmodel` Package","Features","Installation","Required API Keys","Required for AI features","Optional for enhanced features","CLI","Models","`FindingModelBase`","`FindingModelFull`"],"docs/database-management.md":["Database Management Guide","Overview","Database Architecture","Finding Models Index","Anatomic Locations Database","Automatic Database Downloads","Finding models index","Anatomic locations database","CLI Commands","Finding Models Index Management"],"docs/logfire_observability_guide.md":["Logfire Observability Guide for FindingModel","Overview","Table of Contents","Installation and Setup","Installation","Install all dev dependencies including logfire","Or install logfire specifically","Authentication","Authenticate with Logfire (interactive)","This creates credentials in ~/.logfire/"],"docs/manifest_schema.md":["Manifest.json Schema","Purpose","Schema (v1.0)","Field Definitions","Top Level","Database Entry","Validation Rules","Update Process","Backward Compatibility"],"evals/CLAUDE.md":["CLAUDE.md - Eval Development Quick Reference","Purpose","Documentation Map","Essential Quick Facts","File Naming","No Logfire Code Needed","Standard Pattern","1. Data models (input, expected output, actual output)","2. Evaluators inheriting from Evaluator base class","3. Dataset at module level with cases + evaluators"],"evals/README.md":["Eval Suites for FindingModel AI Agents","What are Evals?","How to Run Evals","Run all eval suites","Run specific eval suite","Or directly:","From Python","Calculate overall score (average of all evaluator scores across all cases)","How to Read Eval Output","Understanding Scores"],"evals/evals_guide.md":["Evaluation Guide for FindingModel AI Agents","Overview","Table of Contents","Why Evaluate AI Agents","Two-Level Evaluation Strategy","Evaluation Framework","Pydantic AI Evals","Core Concepts","Pydantic Evals Architecture","The Standard Pattern"],"specs/001-ai-based-finding/contracts/markdown_api.md":["API Contract: Markdown Editing","`export_model_for_editing`","Inputs","Behavior","Output","`edit_model_markdown`","Inputs","Behavior","Output","Post-processing Requirements"],"specs/001-ai-based-finding/contracts/natural_language_api.md":["API Contract: Natural Language Editing","`edit_model_natural_language`","Inputs","Behavior","Output","Post-processing Requirements","Related Tests"],"specs/001-ai-based-finding/plan.md":["Implementation Plan: AI-Based Finding Model Editor","Execution Flow (/plan command scope)","Summary","Technical Context","Technical Context","Constitution Check","Project Structure","Implementation Approach"],"specs/001-ai-based-finding/quickstart.md":["Quickstart: AI-Based Finding Model Editor (Simplified)","Prerequisites","Natural Language Editing","Markdown Editing","User edits markdown_content..."],"specs/001-ai-based-finding/research.md":["Research: AI-Based Finding Model Editor (Expanded)","Technical Context","Pydantic AI Agent Usage Patterns","Testing Pydantic AI Agents","Example: Async Agent Test","Patterns from Existing Code","Rationale"],"specs/001-ai-based-finding/spec.md":["Feature Specification: AI-Based Finding Model Editor","\u26a1 Quick Guidelines","User Scenarios & Testing","Primary User Story","Acceptance Scenarios","Edge Cases","Requirements","Functional Requirements (Minimal Plan)","Key Entities (Minimal Plan)"],"specs/001-ai-based-finding/tasks.md":["Tasks: AI-Based Finding Model Editor","Task List","T001. [P] Project Setup and Linting \u2705 COMPLETED","T002. [P] Contract Test: Natural Language Editing \u2705 COMPLETED","T003. [P] Contract Test: Markdown Editing \u2705 COMPLETED","T004. Implement: Natural Language Editing \u2705 COMPLETED","T005. Implement: Markdown Editing \u2705 COMPLETED","T006. Demo Script: Natural Language Editing \u2705 COMPLETED","T007. Demo Script: Markdown Editing \u2705 COMPLETED","T008. [P] Polish: Documentation and Final Tests \u2705 COMPLETED"],"specs/001-ai-based-finding/team-update-2025-09-26.md":["Team Update \u2014 26 September 2025","Highlights","What To Know","Follow-Up Actions","Lessons Learned"],"tasks/anatomic-location-cleanup.md":["Anatomic Location Search Cleanup","Goal","Implementation","Phase 1: Refactor Search Client","Phase 2: Create CLI Commands","Phase 3: Add Tests","Phase 4: Cleanup","Key Files","Notes"],"tasks/deferred_to_0_5_1.md":["Deferred to v0.5.1","1. Manifest and Database Distribution Enhancements","Overview","1.1 CLI Command for Manifest Generation","1.2 S3 Upload and Deployment","Upload databases and generate manifest in one command","In FindingModelConfig or env vars","1.3 Version History and Pinning"],"tasks/done/anatomic-location-search-implementation-plan.md":["Implementation Plan for Anatomic Location Search Tool","Current Status","Phase 1: Refactor Common Utilities \u2705 COMPLETED","Phase 2: Create Ontology Search Module \u2705 COMPLETED","Phase 3: Add LanceDB Configuration \u2705 COMPLETED","Phase 4: Implement Anatomic Location Search \u2705 COMPLETED","Phase 5: Testing \ud83d\udd04 IN PROGRESS - MAJOR ISSUES IDENTIFIED","Critical Issues Found (2025-08-29):"],"tasks/done/anatomic-location-search-prd.md":["PRD: Anatomic Location Search Tool for FindingModel","Overview","Core Architecture","1. Modular File Structure","2. Core Components","src/findingmodel/tools/ontology_search.py","Table constants","src/findingmodel/tools/common.py (add this function)"],"tasks/done/drive_to_040.md":["Drive to v0.4.0 Release","Overview","Phase 1: DuckDB Utilities Extraction","Current Duplication","Implementation Tasks","Phase 2: MongoDB \u2192 DuckDB Swap","File Operations","Config Updates","Dependency Updates","Testing"],"tasks/done/evaluation_system_phase_0_complete.md":["Evaluation System - Next Steps","Context","What's Been Completed","The Problem","Phase 0: Fix Logfire Observability Architecture \u2705 COMPLETE","Task 0.1: Create Centralized Logfire Configuration","Configure Logfire once for entire evals package","Follows Python logging best practice: configure at package level","Instrument Pydantic AI once for automatic agent/model/tool tracing","Task 0.2: Refactor evals/model_editor.py"],"tasks/done/expand_agent_eval_coverage.md":["Expand Agent Evaluation Coverage","Status: Planning","Overview","Scope","Agent Evaluation Plans","1. Anatomic Location Search","2. Ontology Concept Match","3. Finding Description"],"tasks/done/refactor_model_editor_evals.md":["Refactor Model Editor Evaluation Suite","Status: Phase 3 Complete - All Core Work Done","Overview","Current State","Implemented (in PR `copilot/add-eval-case-functionality`)","Phase 2 Improvements (NOW COMPLETE)","Goals","Implementation Plan","Phase 1: Foundation \u2705 IMPLEMENTED (except tests)","Evaluators to implement:"],"tasks/done/separate_evals_from_tests_plan.md":["Separate Evals from Tests - Implementation Plan","Vision & Context","The Problem","The Solution","Outcome","Overall Phases","Task Breakdown","Phase 1: Create evals/ Directory Structure"],"tasks/duckdb-common-patterns.md":["DuckDB Common Patterns - Code Consolidation Plan","Goal","Analysis: Common Patterns","1. Connection Management \u2705 **EXTRACT**","src/findingmodel/tools/duckdb_utils.py","In DuckDBOntologySearchClient","In DuckDBIndex","2. Embedding Generation \u2705 **EXTRACT**","src/findingmodel/tools/duckdb_utils.py"],"tasks/finding_info_generation_rework_prd.md":["FindingInfo Generation Rework PRD","1. Overview","2. Background","3. Problem Statement","4. Goals & Non-Goals","Goals","Non-Goals","5. User Stories","6. Functional Requirements","7. Non-Functional Requirements"],"tasks/finding_info_generation_rework_tasks.md":["FindingInfo Generation Rework Tasks","Task 1 \u2014 Replace Instructor client with Pydantic AI Agent","Task 2 \u2014 Revise finding description prompt instructions","Task 3 \u2014 Light-touch normalization helper (optional)","Task 4 \u2014 Update CLI and imports","Task 5 \u2014 Add deterministic unit tests for agent behavior","Task 6 \u2014 Documentation and verification"],"tasks/index-duckdb-migration.md":["Index DuckDB Migration Plan - Phase 1","Goal","Current State (2025-10-11)","Phase 1 Implementation Complete \u2705","What's Remaining for Integration \u23f3","Anatomic Location Search Status","Architectural Note","Why Phase 1 First?"],"tasks/index_api_enhancements_plan.md":["Index API Enhancements and Database Self-Containment Plan","Overview","Key Architecture Decisions","JSON Storage","Manifest Schema","Code Quality","Background","Current Problems","Real-World Impact","\u274c Breaking abstraction - accessing internal connection"],"tasks/ontology-concept-search-prd.md":["Product Requirements Document: Comprehensive Ontology Concept Search Tool","Overview","Purpose","Key Differentiators from Anatomic Location Search","Functional Requirements","1. Search Scope","2. Multi-Agent Architecture","3. Output Format","4. Search Strategy","Pydantic AI Agent Architecture"],"tasks/pending-fixes.md":["Pending Fixes and Technical Debt","Anatomic Location Search - Hardcoded Dimensions","Migration Script - Config Usage","Anatomic Location DuckDB Rebuild - Preserve Embeddings","DuckDB Migration Script","Issue: Uses hardcoded embedding configuration","Future Refactoring","Consolidate DuckDB common code","Remove Cohere references"],"tasks/refactoring/01-index-decomposition.md":["Index Class Decomposition Plan - Phase 2","Executive Summary","Current State Analysis (Post-Phase 1)","Two Monolithic Implementations","Common Problems","Key Methods by Responsibility","Database Operations (10 methods)","Validation (6 methods)  ","File Operations (5 methods)","Search (4 methods)"],"tasks/refactoring/02-api-cleanup.md":["API Cleanup and Deprecation Plan","Executive Summary","Current State Analysis","Duplicate Functions Identified","Problems","Target State","Naming Convention","Public API Structure","src/findingmodel/tools/__init__.py","Implementation Plan"],"tasks/refactoring/03-validation-framework.md":["Validation Framework Plan","Executive Summary","Current State Analysis","Problems with Current Validation","Target Architecture","Core Design Pattern: Chain of Responsibility","src/findingmodel/validation/base.py","Specific Validators","src/findingmodel/validation/validators/id_validator.py","src/findingmodel/validation/validators/name_validator.py"],"tasks/refactoring/04-circular-dependencies.md":["Breaking Circular Dependencies Plan","Executive Summary","Current State Analysis","Circular Dependency Map","Problems","Current problematic code","Person references Index directly","Target Architecture","Design Patterns Applied","New Architecture"],"tasks/refactoring/05-performance-optimizations.md":["Performance Optimizations Plan","Executive Summary","Current Performance Analysis","Identified Bottlenecks","Current: Multiple get() calls in validation","Current: Process files one by one","Current: Individual inserts in batch operations","Target Performance Improvements","Optimization Goals","Implementation Details"],"tasks/test-multi-agent-system.md":["Test Multi-Agent System Plan","Goal","Phase 1: Create Simple Utility Function","Phase 2: Add Tests for Utility Function","Notes"],"test/data/pulmonary_embolism.md":["Pulmonary embolism\u2014`OIFM_MSFT_932618`","Attributes","Presence\u2014`OIFMA_MSFT_463871`","Change from prior\u2014`OIFMA_MSFT_592864`","Other presence\u2014`OIFMA_MSFT_463872`","Size\u2014`OIFMA_MSFT_592865`"],"test/data/thyroid_nodule_codes.md":["Thyroid nodule\u2014`OIFM_MGB_274588`","Attributes","Presence\u2014`OIFMA_MGB_771712`","Size\u2014`OIFMA_MGB_337706`","Change from prior\u2014`OIFMA_MGB_337707`"]},"deps":{"evals/base.py":["abc","typing","pydantic","pydantic_evals","pydantic_evals.evaluators"],"evals/model_editor.py":["pathlib","pydantic","pydantic_evals","pydantic_evals.evaluators","pydantic_evals.reporting","evals.utils","findingmodel.finding_model","findingmodel.tools","asyncio"],"evals/utils.py":["__future__","pathlib","typing","findingmodel.finding_model","findingmodel.tools","findingmodel.tools"],"notebooks/demo_anatomic_location_search.py":["argparse","asyncio","json","sys","time","pathlib","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","asyncio","traceback"],"notebooks/demo_bioontology_search.py":["asyncio","sys","time","findingmodel.config","findingmodel.tools.ontology_search","traceback","traceback"],"notebooks/demo_edit_finding_model.py":["__future__","argparse","asyncio","json","shlex","collections.abc","pathlib","typing","prompt_toolkit","prompt_toolkit.completion","prompt_toolkit.formatted_text","prompt_toolkit.history","prompt_toolkit.shortcuts","rich.console","rich.markdown","rich.panel","rich.progress","rich.table","findingmodel.finding_model","findingmodel.index","findingmodel.tools.model_editor"],"notebooks/demo_edit_model_from_markdown.py":["asyncio","random","pathlib","findingmodel.finding_model","findingmodel.tools.model_editor"],"notebooks/demo_find_similar.py":["dotenv","logfire","findingmodel","findingmodel.tools","findingmodel.tools.similar_finding_models","asyncio","sys"],"notebooks/demo_ontology_concept_match.py":["argparse","asyncio","sys","time","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.ontology_concept_match","traceback"],"scripts/release.py":["argparse","hashlib","re","shutil","subprocess","sys","datetime","pathlib","typing","loguru"],"src/findingmodel/abstract_finding_model.py":["typing","findingmodel.finding_model"],"src/findingmodel/anatomic_migration.py":["json","pathlib","typing","duckdb","httpx","openai","findingmodel","findingmodel.config","findingmodel.tools.duckdb_utils"],"src/findingmodel/cli.py":["asyncio","json","sys","pathlib","click","openai","rich.console","rich.table","rich.markdown","findingmodel.config","tempfile","findingmodel.config","findingmodel.config","findingmodel.config"],"src/findingmodel/common.py":["re"],"src/findingmodel/config.py":["pathlib","typing","httpx","openai","platformdirs","pydantic","pydantic_settings","findingmodel","pooch","findingmodel"],"src/findingmodel/contributor.py":["pathlib","typing","pydantic","typing_extensions"],"src/findingmodel/embedding_cache.py":["__future__","hashlib","array","pathlib","typing","duckdb","platformdirs","findingmodel"],"src/findingmodel/finding_info.py":["pydantic"],"src/findingmodel/finding_model.py":["random","re","enum","typing","pydantic","findingmodel.contributor"],"src/findingmodel/index.py":["__future__","hashlib","collections.abc","dataclasses","datetime","enum","pathlib","types","typing","duckdb","openai","pydantic","findingmodel","findingmodel.common","findingmodel.config","findingmodel.contributor","findingmodel.finding_model","findingmodel.tools.duckdb_utils","findingmodel.config","findingmodel.finding_model","findingmodel.finding_model","json","importlib.resources"],"src/findingmodel/index_code.py":["pydantic"],"src/findingmodel/index_validation.py":["typing","findingmodel.common","findingmodel.finding_model"],"src/findingmodel/tools/__init__.py":["findingmodel.finding_model","findingmodel.index","warnings"],"src/findingmodel/tools/anatomic_location_search.py":["json","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search"],"src/findingmodel/tools/common.py":["pathlib","instructor","openai","pydantic_ai.models.openai","pydantic_ai.providers.openai","findingmodel","findingmodel.config","findingmodel.embedding_cache"],"src/findingmodel/tools/create_stub.py":["findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/duckdb_search.py":["pathlib","typing","duckdb","openai","findingmodel.config","findingmodel.tools.duckdb_utils","findingmodel.tools.ontology_search","findingmodel.config"],"src/findingmodel/tools/duckdb_utils.py":["__future__","array","collections.abc","contextlib","pathlib","typing","duckdb","openai","findingmodel","findingmodel.config","findingmodel.tools.common"],"src/findingmodel/tools/finding_description.py":["warnings","typing","pydantic_ai","findingmodel","findingmodel.config","findingmodel.finding_info"],"src/findingmodel/tools/index_codes.py":["typing","findingmodel.finding_model","findingmodel.index_code","warnings"],"src/findingmodel/tools/markdown_in.py":["pathlib","findingmodel.config","findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/model_editor.py":["dataclasses","typing","pydantic","pydantic_ai","pydantic_ai.agent","findingmodel","findingmodel.config","findingmodel.finding_model","findingmodel.index","findingmodel.tools.common"],"src/findingmodel/tools/ontology_concept_match.py":["json","dataclasses","pydantic","pydantic_ai","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/ontology_search.py":["asyncio","typing","httpx","pydantic","findingmodel","findingmodel.config","findingmodel.index_code"],"src/findingmodel/tools/prompt_template.py":["re","pathlib","typing","jinja2","openai.types.chat"],"src/findingmodel/tools/similar_finding_models.py":["json","dataclasses","typing","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.index","findingmodel.tools.common","time"],"test/conftest.py":["pathlib","pytest","findingmodel","findingmodel.finding_info","findingmodel.finding_model","shutil"],"test/test_anatomic_locations.py":["__future__","json","pathlib","typing","unittest.mock","duckdb","httpx","pytest","click.testing","openai","pydantic_ai.models.test","collections.abc","findingmodel.anatomic_migration","findingmodel.cli","findingmodel.config","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search","findingmodel"],"test/test_base_evaluators.py":["typing","pytest","pydantic","pydantic_evals.evaluators","evals.base"],"test/test_cli.py":["__future__","asyncio","json","pathlib","typing","pytest","click.testing","collections.abc","findingmodel","findingmodel.cli","findingmodel.config","findingmodel.index"],"test/test_duckdb_index.py":["__future__","asyncio","json","shutil","pathlib","typing","duckdb","pytest","pytest_asyncio","pydantic","collections.abc","findingmodel","findingmodel.config","findingmodel.contributor","findingmodel.finding_model","findingmodel.index","shutil","findingmodel.index","pydantic","pydantic","time","time","time","findingmodel.common","tempfile","findingmodel.finding_model","asyncio","findingmodel","findingmodel","findingmodel.index","findingmodel.index","findingmodel.index","findingmodel.index","findingmodel.index","findingmodel.index","findingmodel.index"],"test/test_duckdb_utils.py":["__future__","duckdb","pytest","findingmodel.tools.duckdb_utils"],"test/test_embedding_cache.py":["__future__","asyncio","pathlib","typing","pytest","collections.abc","findingmodel.embedding_cache"],"test/test_index_validation.py":["pytest","findingmodel.finding_model","findingmodel.index_validation","asyncio"],"test/test_manifest_integration.py":["__future__","contextlib","pathlib","unittest.mock","pytest","findingmodel.config","findingmodel.index","findingmodel.config"],"test/test_model_editor.py":["collections.abc","pytest","pydantic_ai","pydantic_ai.models.test","findingmodel","findingmodel.finding_model","findingmodel.index","findingmodel.tools"],"test/test_models.py":["pathlib","typing","pytest","pydantic","findingmodel.contributor","findingmodel.finding_model"],"test/test_ontology_search.py":["inspect","unittest.mock","pytest","pydantic_ai.models.test","findingmodel.config","findingmodel.tools.ontology_concept_match","findingmodel.tools.ontology_search"],"test/test_remote_resource.py":["pathlib","unittest.mock","pytest","findingmodel.config","findingmodel.config","findingmodel.config","findingmodel.config"],"test/test_tools.py":["pathlib","types","pytest","findingmodel.tools","findingmodel.tools.finding_description","findingmodel","findingmodel.config","findingmodel.finding_model","findingmodel.index_code","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_model","findingmodel.tools","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","asyncio","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools.create_stub","concurrent.futures"]},"dir_purposes":{".serena/memories":"Test files and test utilities","docs":"Project documentation","evals":"Data models and schemas","notebooks":"Data models and schemas","scripts":"Build and utility scripts","specs/001-ai-based-finding":"Test files and test utilities","src/findingmodel":"Data models and schemas","src/findingmodel/tools":"Data models and schemas","tasks":"Test files and test utilities","tasks/done":"Test files and test utilities","test":"Test files and test utilities","test/data":"Test files and test utilities"},"staleness":1761160625.779064}