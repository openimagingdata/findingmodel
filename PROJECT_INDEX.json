{"at":"2025-09-17T09:35:02.589146","root":".","tree":[".","\u251c\u2500\u2500 data/","\u251c\u2500\u2500 notebooks/ (7 files)","\u2502   \u2514\u2500\u2500 data/ (1 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 scripts/ (1 files)","\u251c\u2500\u2500 src/ (25 files)","\u2502   \u2514\u2500\u2500 findingmodel/ (25 files)","\u2502       \u2514\u2500\u2500 tools/ (13 files)","\u2502           \u2514\u2500\u2500 prompt_templates/","\u251c\u2500\u2500 tasks/","\u2502   \u251c\u2500\u2500 done/","\u2502   \u2514\u2500\u2500 refactoring/","\u251c\u2500\u2500 test/ (17 files)","\u2502   \u2514\u2500\u2500 data/ (8 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 pyproject.toml","\u2514\u2500\u2500 README.md"],"stats":{"total_files":49,"total_directories":21,"fully_parsed":{"python":40},"listed_only":{"json":9},"markdown_files":28},"f":{"notebooks/demo_anatomic_location_search.py":["p",["perform_search_stages:24:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","display_results_comparison:96:(original:list, reranked:list, limit:int = 10)>None::Display comparison of results before and after reranking.","_create_finding_info:125:(finding_name:str, description:Optional[str])>tuple[FindingInfo, str, float]:_async_create_finding_info:Create FindingInfo and return info, source, and timing.","_print_finding_info_stage:145:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_verbose_stages:159:(results:dict)>None:_print_ai_selection_stage,_print_cohere_stage:Print all verbose stage outputs.","_print_cohere_stage:188:(results:dict)>None:display_results_comparison:Print Cohere reranking stage output.","_print_ai_selection_stage:210:(results:dict)>None::Print AI selection stage output.","_print_summary:228:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_anatomic_location_search:245:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test anatomic location search with timing information.","check_configuration:292:()>bool::Check if the configuration is valid for running the tool.","parse_args:326:()>argparse.Namespace::Parse command-line arguments.","main:350:async ()>None:check_configuration,parse_args,test_anatomic_location_search:Main entry point for the anatomic location search tool."]],"notebooks/demo_bioontology_search.py":["p",["print_header:20:(text:str)>None::Print a formatted header.","print_section:27:(title:str)>None::Print a section title.","display_results:33:(results:list[BioOntologySearchResult], query:str, ontologies:list[str])>None:print_header:Display search results in a readable format.","demo_basic_search:51:async ()>None:display_results,print_section:Demonstrate basic search functionality.","demo_detailed_search:61:async ()>None:display_results,print_section:Demonstrate detailed search with specific parameters.","demo_semantic_type_filter:79:async ()>None:print_section:Demonstrate filtering by semantic type.","demo_multiple_ontologies:100:async ()>None:print_section:Demonstrate searching across multiple ontologies.","demo_pagination:123:async ()>None:print_section:Demonstrate pagination handling.","main:151:async ()>None:demo_basic_search,demo_detailed_search,demo_multiple_ontologies,demo_pagination,demo_semantic_type_filter,print_header:Main demonstration function."]],"notebooks/demo_find_similar.py":["p",["main:10:async ()>SimilarModelAnalysis::"]],"notebooks/demo_ontology_concept_match.py":["p",["perform_search_stages:21:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","display_results_comparison:112:(original:list, reranked:list, limit:int = 10)>None::Display comparison of results before and after reranking.","_print_finding_info_stage:144:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_query_terms_stage:158:(results:dict)>None::Print query terms generation stage.","_print_bio_search_stage:167:(results:dict)>None::Print BioOntology search stage.","_print_cohere_rerank_stage:182:(results:dict)>None:display_results_comparison:Print Cohere reranking stage.","_print_categorization_stage:204:(results:dict)>None::Print AI categorization stage.","_print_final_output_stage:219:(results:dict)>None::Print final output building stage.","_print_verbose_stages:250:(results:dict)>None:_print_bio_search_stage,_print_categorization_stage,_print_cohere_rerank_stage,_print_final_output_stage,_print_query_terms_stage:Print all verbose stage outputs.","_print_summary:259:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_ontology_concept_match:285:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test ontology concept matching with timing information.","check_configuration:330:()>bool::Check if the configuration is valid for running the tool.","parse_args:363:()>argparse.Namespace::Parse command-line arguments.","main:387:async ()>None:check_configuration,parse_args,test_ontology_concept_match:Main entry point for the ontology concept matching tool."]],"notebooks/migrate_anatomic_to_duckdb.py":["p",["create_searchable_text:25:(record:dict[str, Any])>str::","determine_sided:56:(record:dict[str, Any])>str::","create_database:88:(db_path:Path)>duckdb.DuckDBPyConnection::","load_json_data:128:(json_path:Path)>list[dict[str, Any]]::","process_and_insert_data:154:async (conn:duckdb.DuckDBPyConnection, records:list[dict[str, Any]], openai_client:AsyncOpenAI, batch_size:int = 50, # Smaller batches for embedding API)>tuple[int, int]:_insert_batch,create_searchable_text,determine_sided:","_insert_batch:267:(conn:duckdb.DuckDBPyConnection, batch:list[tuple])>None::","create_indexes:284:(conn:duckdb.DuckDBPyConnection)>None::","verify_database:333:(conn:duckdb.DuckDBPyConnection)>None::","main:395:async ()>None:create_database,create_indexes,load_json_data,process_and_insert_data,verify_database:Main migration function."]],"s/release.py":["p",["main:613:()>None:release:Main entry point."],{"ReleaseError":["36",[]],"ReleaseManager":["42",["__init__:47:(self, version:Optional[str] = None, dry_run:bool = False, yes:bool = False, check_only:bool = False)>None:_setup_logging:","_setup_logging:68:(self)>None::Configure loguru logging with file output.","run_command:95:(self, cmd:str, check:bool = True, capture_output:bool = True)>subprocess.CompletedProcess[str]::Execute a shell command with logging and optional dry-run.","confirm:129:(self, message:str)>bool::Get user confirmation unless --yes flag is used.","get_current_version:141:(self)>str:run_command:Read current version from pyproject.toml.","validate_version:166:(self, version:str)>bool::Validate version format (semantic versioning).","check_git_status:179:(self)>None:run_command:Ensure git working directory is clean.","check_branch:191:(self)>None:run_command:Ensure we're on dev branch and up to date.","check_existing_tag:216:(self, version:str)>None:run_command:Check if version tag already exists.","run_tests:226:(self)>None:confirm,run_command:Run the test suite.","run_checks:256:(self)>None:run_command:Run code quality checks.","update_version:266:(self)>None:_setup_logging,check_existing_tag,get_current_version,run_command,validate_version:Update version in pyproject.toml using uv.","update_changelog:287:(self)>None:confirm:Update CHANGELOG.md with release date.","clean_dist:322:(self)>None::Clean the dist directory of old builds.","build_packages:333:(self)>List[Path]:run_command:Build wheel and source distribution packages.","commit_changes:368:(self)>None:run_command:Commit version and changelog changes.","merge_to_main:388:(self)>None:confirm,run_command:Merge dev branch to main.","create_tag:406:(self)>None:run_command:Create and push git tag.","publish_pypi:419:(self)>None:confirm,run_command:Publish packages to PyPI using uv publish.","create_github_release:432:(self, built_files:List[Path])>None:confirm,run_command:Create GitHub release with artifacts.","post_release_cleanup:452:(self)>None:run_command:Switch back to dev branch and prepare for next development cycle.","print_summary:467:(self, built_files:List[Path])>None::Print release summary.","handle_error:494:(self, step_name:str, error:Exception)>None::Handle errors and provide recovery instructions.","_get_release_steps:522:(self)>list[tuple[str, str, Callable[..., Any]]]::Get the list of release steps.","_should_skip_step:541:(self, step_id:str)>bool::Check if step should be skipped in check-only mode.","_execute_step:557:(self, step_id:str, step_func:Callable[..., Any], built_files:List[Path])>List[Path]::Execute a single release step.","release:571:(self)>None:_execute_step,_get_release_steps,_should_skip_step,handle_error,print_summary:Execute the complete release process."]]}],"sr/findingmodel/abstract_finding_model.py":["p",{"AbstractNumericAttribute":["6",[]],"AbstractChoiceValue":["18",[]],"AbstractChoiceAttribute":["25",[]],"AbstractFindingModel":["36",["as_markdown:45:(self)>str::Render the finding model as a markdown string."]]}],"sr/findingmodel/cli.py":["p",["cli:21:()>None::","config:26:()>None::Show the currently active configuration.","print_info_truncate_detail:33:(console:Console, finding_info:FindingInfo)>None::","make_info:46:(finding_name:str, detailed:bool, output:Path | None)>None:_do_make_info,print_info_truncate_detail:Generate description/synonyms and more details/citations for a finding name.","make_stub_model:83:(finding_name:str, tags:list[str], with_codes:bool, with_ids:bool, source:str | None, output:Path | None)>None:_do_make_stub_model:Generate a simple finding model object (presence and change elements only) fr...","markdown_to_fm:124:(finding_path:Path, with_ids:bool, source:str | None, output:Path | None)>None:_do_markdown_to_fm,print_info_truncate_detail:Convert markdown file to finding model format.","fm_to_markdown:161:(finding_model_path:Path, output:Path | None)>None::Convert finding model JSON file to Markdown format."]],"sr/findingmodel/common.py":["p",["normalize_name:4:(name:str)>str::","model_file_name:12:(name:str)>str:normalize_name:Convert a finding model name to a file name."]],"sr/findingmodel/config.py":["p",["strip_quotes:12:(value:str)>str::","strip_quotes_secret:16:(value:str | SecretStr)>str:strip_quotes:"],{"ConfigurationError":["8",[]],"FindingModelConfig":["28",["check_ready_for_openai:69:(self)>Literal[True]::","check_ready_for_perplexity:74:(self)>Literal[True]::"]]}],"sr/findingmodel/contributor.py":["p",{"Organization":["16",["_register_org:24:(self)>Self::","get:32:(cls, code:str)>Self | None:get:","organizations:39:(cls)>list[Self]::","load_jsonl:46:(cls, jsonl_file:str | Path)>None::","save_jsonl:58:(cls, jsonl_file:str | Path)>None::"]],"Person":["68",["organization:78:(self)>Organization:get:","_register_person:87:(self)>Self::","get:95:(cls, username:str)>Self | None:get:","people:102:(cls)>list[Self]::","load_jsonl:109:(cls, jsonl_file:str | Path)>None::","save_jsonl:121:(cls, jsonl_file:str | Path)>None::"]]}],"sr/findingmodel/finding_info.py":["p",{"FindingInfo":["4",[]]}],"sr/findingmodel/finding_model.py":["p",["_random_digits:36:(length:int)>str::","generate_oifma_id:40:(source:str)>str:_random_digits:","_index_codes_str:70:(index_codes:Iterable[IndexCode] | None)>str | None::","fix_max_selected_validator:126:(cls, data:dict[str, Any])>dict[str, Any]::","generate_oifm_id:347:(source:str)>str:_random_digits:"],{"ChoiceValue":["44",[]],"ChoiceValueIded":["74",["index_codes_str:85:(self)>str | None:_index_codes_str:"]],"ChoiceAttribute":["137",["fix_max_selected:152:(cls, data):fix_max_selected_validator:"]],"ChoiceAttributeIded":["156",["fix_max_selected:168:(cls, data):fix_max_selected_validator:","add_value_codes:173:(cls, data)::Add the value codes to the choice values if they are not already present.","index_codes_str:193:(self)>str | None:_index_codes_str:"]],"NumericAttribute":["224",[]],"NumericAttributeIded":["237",["index_codes_str:250:(self)>str | None:_index_codes_str:"]],"FindingModelBase":["311",["as_markdown:325:(self)>str::"]],"FindingModelFull":["354",["as_markdown:370:(self, hide_ids:bool = False)>str::","index_codes_str:407:(self)>str | None:_index_codes_str:"]]}],"sr/findingmodel/index.py":["p",{"AttributeInfo":["18",[]],"IndexEntry":["26",["match:40:(self, name_or_id_or_synonym:str)>bool:match:"]],"Index":["60",["__init__:70:(self, *, mongodb_uri:str | None = None, db_name:str | None = None, client:AsyncIOMotorClient[Any] | None = None, branch:str = \"main\",)>None::","setup_indexes:92:async (self)>None::","count:143:async (self)>int::Returns the number of entries in the index.","count_people:147:async (self)>int::Returns the number of people in the people collection.","count_organizations:151:async (self)>int::Returns the number of organizations in the organizations collection.","_id_or_name_or_syn_query:155:(self, id_or_name_or_syn:str)>dict[str, Any]::Helper method to create a query for ID, name, or synonym.","contains:165:async (self, id_or_name_or_syn:str)>bool:_id_or_name_or_syn_query:Checks if an ID or name exists in the index.","get:171:async (self, id_or_name_or_syn:str)>IndexEntry | None:_id_or_name_or_syn_query:Retrieves an IndexEntry by its ID, name, or synonym.","get_person:179:async (self, github_username:str)>Person | None::Retrieve a Person by github_username.","get_organization:186:async (self, code:str)>Organization | None::Retrieve an Organization by code.","_calculate_file_hash:193:(self, filename:str | Path)>str::Calculates the SHA-256 hash of a file.","_entry_from_model_file:206:(self, model:FindingModelFull, filepath:str | Path, file_hash:str | None = None)>IndexEntry:_calculate_file_hash:Creates an IndexEntry from a FindingModelFull object and a filename.","_get_validation_data:240:async (self)>tuple[dict[str, str], dict[str, str], dict[str, str]]:get:Get dicts for validation: name->oifm_id, attr_id->oifm_id, oifm_id->filename.","_check_id_conflict:257:(self, oifm_id:str, name_fold:str, oifm_to_name:dict[str, str], exclude_oifm_id:str | None)>str | None::Check for ID conflicts.","_check_name_conflict:267:(self, name_fold:str, name_to_oifm:dict[str, str], batch_names:dict[str, str], exclude_oifm_id:str | None)>list[str]::Check for name conflicts.","_check_attribute_id_conflict:287:(self, aid:str, oifm_id:str, attrid_to_oifm:dict[str, str], batch_attrids:dict[str, str], oifm_to_filename:dict[str, str], exclude_oifm_id:str | None,)>list[str]:get:Check for attribute ID conflicts.","validate_models_batch:303:async (self, models:list[tuple[FindingModelFull, str | None]], allow_duplicate_synonyms:bool = False)>dict[str, list[str]]:_check_attribute_id_conflict,_check_id_conflict,_check_name_conflict,_get_validation_data:Validate multiple models efficiently with detailed conflict info.","validate_model:340:async (self, model:FindingModelFull, allow_duplicate_synonyms:bool = False, exclude_oifm_id:str | None = None)>list[str]:validate_models_batch:Validates a FindingModelFull object using the new batch validation logic.","add_or_update_contributors:344:async (self, contributors:list[Person | Organization])>list[str] | None::","add_or_update_entry_from_file:423:async (self, filename:str | Path, model:FindingModelFull | None = None, allow_duplicate_synonyms:bool = False)>IndexReturnType:_calculate_file_hash,_entry_from_model_file,add_or_update_contributors,get,validate_model:Adds a FindingModelFull object to the index.","remove_entry:457:async (self, id_or_name:str)>bool::Removes an entry from the index by its ID or name.","remove_unused_entries:463:async (self, active_filenames:Iterable[str])>Iterable[str]::","search:486:async (self, query:str, limit:int = 10)>list[IndexEntry]::","search_batch:502:async (self, queries:list[str], limit_per_query:int = 10)>dict[str, list[IndexEntry]]:_search_batch_combined,_search_batch_individual:","_search_batch_combined:524:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:_entry_matches_query:Attempt to search all queries in a single MongoDB call using $or.","_search_batch_individual:557:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:search:Fallback: perform individual searches for each query.","_entry_matches_query:570:(self, entry:IndexEntry, query:str)>bool::","_get_existing_file_info:589:async (self)>dict[str, dict[str, str]]::Get all existing filename/hash/oifm_id pairs from the database.","_get_local_file_info:597:(self, file_paths:list[Path])>dict[str, dict[str, Any]]:_calculate_file_hash:Get all filename/hash pairs from the local directory.","_determine_operations:608:(self, local_files:dict[str, dict[str, Any]], existing_entries:dict[str, dict[str, str]])>tuple[list[tuple[str, dict[str, Any]]], list[tuple[str, dict[str, Any], str]], list[tuple[str, str]], int]::Determine what operations need to be performed.","_prepare_entries_for_batch:640:async (self, to_insert:list[tuple[str, dict[str, Any]]], to_update:list[tuple[str, dict[str, Any], str]], allow_duplicate_synonyms:bool,)>tuple[list[dict[str, Any]], list[tuple[str | None, dict[str, Any]]]]:_entry_from_model_file,add_or_update_contributors,validate_models_batch:Prepare IndexEntry objects for batch operations.","_execute_batch_operations:698:async (self, to_remove:list[tuple[str, str]], update_entries:list[tuple[str | None, dict[str, Any]]], insert_entries:list[dict[str, Any]],)>None::Execute the batch database operations.","update_from_directory:725:async (self, directory:str | Path, allow_duplicate_synonyms:bool = False)>tuple[int, int, int]:_determine_operations,_execute_batch_operations,_get_existing_file_info,_get_local_file_info,_prepare_entries_for_batch:","to_markdown:772:async (self)>str:count:Converts the index to a Markdown table."]]}],"sr/findingmodel/index_code.py":["p",{"IndexCode":["4",[]]}],"sr/findingmodel/tools/add_ids.py":["p",{"IdManager":["16",["__init__:17:(self, url:str | None = None)>None::","load_used_ids_from_github:22:(self, refresh_cache:bool = False)>None::","add_ids_to_model:64:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:load_used_ids_from_github:","add_ids_to_finding_model:94:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:add_ids_to_model:"]]}],"sr/findingmodel/tools/anatomic_location_search.py":["p",["generate_anatomic_query_terms:44:async (finding_name:str, finding_description:str | None = None, model:str | None = None)>AnatomicQueryTerms::","execute_anatomic_search:115:async (query_info:AnatomicQueryTerms, client:OntologySearchProtocol, limit:int = 30)>list[OntologySearchResult]::","create_location_selection_agent:163:(model:str | None = None)>Agent[None, LocationSearchResponse]::","find_anatomic_locations:204:async (finding_name:str, description:str | None = None, use_duckdb:bool = True,)>LocationSearchResponse:create_location_selection_agent,execute_anatomic_search,generate_anatomic_query_terms:"],{"AnatomicQueryTerms":["29",[]],"LocationSearchResponse":["155",[]]}],"sr/findingmodel/tools/common.py":["p",["get_async_instructor_client:14:()>AsyncInstructor::","get_async_perplexity_client:19:()>AsyncOpenAI::","get_openai_model:26:(model_name:str)>OpenAIModel::Helper function to get OpenAI model instance - moved from similar_finding_mod...","get_embedding:36:async (text:str, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512)>list[float] | None::","get_embeddings_batch:67:async (texts:list[str], client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512)>list[list[float] | None]::","get_markdown_text_from_path_or_text:101:(*, markdown_text:str | None = None, markdown_path:str | Path | None = None)>str::"]],"sr/findingmodel/tools/create_stub.py":["p",["create_model_stub_from_info:9:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_change_element,create_presence_element:","create_finding_model_stub_from_finding_info:65:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_model_stub_from_info:"]],"sr/findingmodel/tools/duckdb_search.py":["p",{"DuckDBOntologySearchClient":["14",["__init__:17:(self, db_path:str | None = None)>None::","__aenter__:30:async (self)>\"DuckDBOntologySearchClient\"::Enter async context.","__aexit__:48:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Exit async context.","search:59:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:_search_single:","search_parallel:98:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:_search_single:","search_with_filters:138:async (self, queries:list[str], region:str | None = None, sided_filter:list[str] | None = None, limit_per_query:int = 30,)>list[OntologySearchResult]:_search_single_with_filters:","_search_single:174:async (self, query:str, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result,search:","_find_exact_matches:242:(self, query:str, where_clause:str | None = None, params:list[Any] | None = None)>list[OntologySearchResult]:_row_to_result:","_row_to_result:299:(self, row:tuple[Any, ...], score:float)>OntologySearchResult::","_apply_rrf_fusion:321:(self, fts_results:list[tuple[Any, ...]], vector_results:list[tuple[Any, ...]], limit:int,)>list[tuple[Any, ...]]::","_combine_with_exact_matches:361:(self, exact_matches:list[OntologySearchResult], other_results:list[OntologySearchResult], limit:int)>list[OntologySearchResult]::","_search_single_with_filters:389:async (self, query:str, region:str | None = None, sided_filter:list[str] | None = None, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result:","_get_embedding:471:async (self, text:str)>list[float] | None::"]]}],"sr/findingmodel/tools/finding_description.py":["p",["create_info_from_name:12:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo::","add_details_to_info:33:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None::","describe_finding_name:69:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","get_detail_on_finding:82:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:","create_finding_info_from_name:96:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","add_details_to_finding_info:111:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:"]],"sr/findingmodel/tools/index_codes.py":["p",["_add_index_codes:11:(target:Codeable, name:str)>None::","add_standard_codes_to_model:26:(finding_model:FindingModelFull)>None:_add_index_codes:","add_standard_codes_to_finding_model:40:(finding_model:FindingModelFull)>None:add_standard_codes_to_model:"],{"Codeable":["7",[]]}],"sr/findingmodel/tools/markdown_in.py":["p",["create_model_from_markdown:19:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase::","create_finding_model_from_markdown:58:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase:create_model_from_markdown:"]],"sr/findingmodel/tools/ontology_concept_match.py":["p",["_filter_anatomical_concepts:66:(search_results:list[OntologySearchResult])>list[OntologySearchResult]::Filter out anatomical concepts from search results.","_add_exact_matches:92:(sorted_results:list[OntologySearchResult], query_terms:list[str], max_results:int, selected_ids:set[str])>tuple[list[OntologySearchResult], int]::Add exact matches that were ranked lower to the top results.","_apply_cohere_reranking:118:async (top_results:list[OntologySearchResult], query_terms:list[str])>list[OntologySearchResult]::Apply Cohere reranking if configured.","execute_ontology_search:156:async (query_terms:list[str], exclude_anatomical:bool = True, base_limit:int = 30, max_results:int = 12, ontologies:list[str] | None = None,)>list[OntologySearchResult]:_add_exact_matches,_apply_cohere_reranking,_filter_anatomical_concepts:","create_categorization_agent:243:()>Agent[CategorizationContext, CategorizedConcepts]::","ensure_exact_matches_post_process:300:(output:CategorizedConcepts, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts::","create_query_generator_agent:369:()>Agent[None, list[str]]::","generate_finding_query_terms:397:async (finding_name:str, finding_description:str | None = None)>list[str]:create_query_generator_agent:","categorize_with_validation:439:async (finding_name:str, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts:create_categorization_agent,ensure_exact_matches_post_process:","build_final_output:498:(categorized:CategorizedConcepts, search_results:list[OntologySearchResult], max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10,)>CategorizedOntologyConcepts::","match_ontology_concepts:567:async (finding_name:str, finding_description:str | None = None, exclude_anatomical:bool = True, max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10, ontologies:list[str] | None = None,)>CategorizedOntologyConcepts:build_final_output,categorize_with_validation,execute_ontology_search,generate_finding_query_terms:"],{"CategorizedConcepts":["28",[]],"CategorizedOntologyConcepts":["37",[]],"CategorizationContext":["58",[]]}],"sr/findingmodel/tools/ontology_search.py":["p",["normalize_concept:35:(text:str)>str::","rerank_with_cohere:608:async (query:str, documents:list[OntologySearchResult], client:cohere.AsyncClientV2 | None = None, model:str = \"rerank-v3.5\", top_n:int | None = None, retry_attempts:int = 1,)>list[OntologySearchResult]:_rerank:"],{"OntologySearchProtocol":["88",["search:101:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[\"OntologySearchResult\"]::","__aenter__:114:async (self)>\"OntologySearchProtocol\"::Async context manager entry.","__aexit__:123:async (self, _exc_type:type[BaseException] | None, _exc_val:BaseException | None, _exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_parallel:133:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[\"OntologySearchResult\"]:search:"]],"OntologySearchResult":["148",["as_index_code:160:(self)>IndexCode:normalize_concept:Convert to IndexCode format"]],"BioOntologySearchResult":["170",["from_api_response:182:(cls, item:dict[str, Any])>\"BioOntologySearchResult\"::Create from BioOntology API response item.","to_ontology_search_result:223:(self)>OntologySearchResult::Convert to standard OntologySearchResult format."]],"BioOntologySearchResults":["246",[]],"BioOntologySearchClient":["256",["__init__:263:(self, api_key:Optional[str] = None, client:Optional[httpx.AsyncClient] = None)>None::","__aenter__:286:async (self)>\"BioOntologySearchClient\"::Async context manager entry.","__aexit__:297:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_bioontology:314:async (self, query:str, ontologies:Optional[list[str]] = None, page_size:int = 50, page:int = 1, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>BioOntologySearchResults:from_api_response,search:","search_all_pages:398:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 100, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>list[BioOntologySearchResult]:search_bioontology:","search_as_ontology_results:448:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 50, **kwargs:Any, # noqa:ANN401)>list[OntologySearchResult]:search_all_pages,to_ontology_search_result:","search:477:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:search_as_ontology_results:","search_parallel:548:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:search:"]]}],"sr/findingmodel/tools/prompt_template.py":["p",["load_prompt_template:16:(template_file_name:str)>Template::","create_prompt_messages:27:(template:Template, **kwargs:Any)>list[ChatCompletionMessageParam]::"]],"sr/findingmodel/tools/similar_finding_models.py":["p",["search_models_tool:56:async (ctx:RunContext[SearchContext], query:str, limit:int = 5)>str::","create_search_agent:89:(openai_model:str)>Agent[SearchContext, SearchStrategy]::Create the search agent for gathering comprehensive results.","create_term_generation_agent:121:(openai_model:str)>Agent[None, SearchTerms]::Create a lightweight agent for generating search terms.","create_analysis_agent:154:(openai_model:str)>Agent[None, SimilarModelAnalysis]::Create the analysis agent for evaluating similarity and making recommendations.","find_similar_models:203:async (# noqa:C901 finding_name:str, description:str | None = None, synonyms:list[str] | None = None, index:Index | None = None, search_model:str | None = None, analysis_model:str | None = None,)>SimilarModelAnalysis:_generate_search_terms_with_fallback:","_generate_search_terms_with_fallback:349:async (term_prompt:str, search_model:str, finding_name:str)>list[str]:create_term_generation_agent:"],{"SearchResult":["25",[]],"SearchTerms":["34",[]],"SearchStrategy":["40",[]],"SearchContext":["50",[]],"SimilarModelAnalysis":["140",[]]}],"test/conftest.py":["p",["configure_test_logging:20:()>None::Configure logging for test session - runs once at start of session.","base_model:29:()>FindingModelBase::","full_model:56:()>FindingModelFull::","real_model:89:()>FindingModelFull::","real_model_markdown:97:()>str::","pe_fm_json:104:()>str::","tn_fm_json:111:()>str::","tn_markdown:118:()>str::","finding_info:125:()>FindingInfo::"]],"test/test_anatomic_location_search.py":["p",{"TestOntologySearchResult":["26",["test_creation_with_all_fields:29:(self)>None::Test creating an OntologySearchResult with all fields.","test_as_index_code_radlex:38:(self)>None::Test converting a RadLex result to IndexCode.","test_as_index_code_snomedct:48:(self)>None::Test converting a SNOMED CT result to IndexCode.","test_as_index_code_anatomic_locations:60:(self)>None::Test converting an anatomic locations result to IndexCode.","test_as_index_code_unknown_table:72:(self)>None::Test converting with unknown table falls back to table name.","test_as_index_code_with_concept_normalization:83:(self)>None::Test that concept text is normalized when converting to IndexCode."]],"TestAnatomicQueryTerms":["99",["test_creation_with_region:102:(self)>None::Test creating AnatomicQueryTerms with region.","test_creation_without_region:109:(self)>None::Test creating AnatomicQueryTerms without region.","test_empty_terms:116:(self)>None::Test creating AnatomicQueryTerms with empty terms."]],"TestLocationSearchResponse":["124",["test_creation:127:(self)>None::Test creating LocationSearchResponse."]],"TestGenerateAnatomicQueryTerms":["146",["test_successful_generation:150:async (self)>None::Test successful query term generation.","test_generation_with_description:163:async (self)>None::Test query term generation with description.","test_generation_fallback_on_error:173:async (self)>None::Test fallback when generation fails."]],"TestExecuteAnatomicSearch":["185",["test_search_with_duckdb:189:async (self)>None::Test executing search with DuckDB client.","test_search_without_region:213:async (self)>None::Test executing search without region filter."]],"TestCreateLocationSelectionAgent":["229",["test_agent_creation:232:(self)>None::Test creating location selection agent.","test_agent_with_custom_model:244:(self)>None::Test creating agent with custom model."]],"TestFindAnatomicLocations":["256",["test_successful_search_with_duckdb:260:async (self)>None::Test successful anatomic location search using DuckDB.","test_empty_search_results:307:async (self)>None::Test handling of empty search results."]]}],"test/test_contributor.py":["p",["clear_registries:13:()>Generator[None, None, None]::Clears the registries before each test to ensure isolation.","sample_org_oidm:23:()>dict[str, str]::","sample_org_acr:28:()>dict[str, str]::","sample_person_john:33:(sample_org_oidm:dict[str, str])>dict[str, str]::","sample_person_jane:45:(sample_org_acr:dict[str, str])>dict[str, str]::","test_organization_creation:60:(sample_org_oidm:dict[str, str])>None::","test_organization_duplicate_code:68:(sample_org_oidm:dict[str, str])>None::","test_organization_invalid_code_pattern:78:()>None::","test_organization_organizations_list:87:(sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_save_and_load_jsonl:102:(tmp_path:Path, sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_load_jsonl_file_not_found:125:(tmp_path:Path)>None::","test_person_creation:133:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_duplicate_github_username:141:(sample_person_john:dict[str, str])>None::","test_person_organization_property:156:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_organization_property_org_deleted_after_person_creation:164:(sample_person_john:dict[str, str])>None::","test_person_get_non_existent:174:()>None::","test_person_people_list:178:(sample_person_john:dict[str, str], sample_person_jane:dict[str, str])>None::","test_person_save_and_load_jsonl:193:(tmp_path:Path, sample_person_john:dict[str, str], sample_person_jane:dict[str, str], sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str],)>None::","test_person_load_jsonl_file_not_found:223:(tmp_path:Path)>None::"]],"test/test_findingmodel.py":["p",["test_choice_value:12:()>None::","test_choice_attribute:18:()>None::","test_numeric_attribute:33:()>None::","test_multichoice_attribute:48:()>None::","test_finding_model_base:60:(tmp_path)>None::","test_load_finding_model:92:(pe_fm_json:str)>None::","test_load_finding_model_with_codes:103:(tn_fm_json:str)>None::","test_load_finding_model_with_contributors:136:(tn_fm_json:str)>None::"]],"test/test_findingmodel_md.py":["p",["test_base_model_markdown:30:(base_model:FindingModelBase)>None::","test_full_model_markdown_with_ids:64:(full_model:FindingModelFull)>None::","test_full_model_markdown_hide_ids:71:(full_model:FindingModelFull)>None::","test_real_model_markdown:81:(real_model:FindingModelFull, real_model_markdown:str)>None::","test_real_model_markdown_with_codes:87:(tn_fm_json:str, tn_markdown:str)>None::"]],"test/test_index.py":["p",["is_mongodb_running:19:()>bool::","mongo_client:39:()>Iterator[AsyncIOMotorClient[Any]]::","test_db:46:async (mongo_client:AsyncIOMotorClient[Any])>AsyncIterator[AsyncIOMotorDatabase[Any]]::","index:53:async ()>AsyncIterator[Index]::","sample_model:62:()>FindingModelFull::","tmp_defs_path:93:(tmp_path:Path)>Path::Create a temporary path for test files.","populated_index:102:async (index:Index, tmp_defs_path:Path)>AsyncIterator[Index]::Populate the index with all *.fm.json files from test/data and test/data/defs.","test_add_and_retrieve_model:113:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_validate_model_no_duplicates:130:async (index:Index, sample_model:FindingModelFull)>None::","test_contains_method:136:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_count_method:152:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_populated_index_count:178:async (populated_index:Index)>None::","test_populated_index_retrieval:185:async (populated_index:Index)>None::","test_add_already_existing_model_unchanged:195:async (populated_index:Index)>None::","test_add_new_model:204:async (populated_index:Index, tmp_defs_path:Path)>None::","test_add_updated_model_file:215:async (populated_index:Index, tmp_defs_path:Path)>None::","test_remove_not_found_model:234:async (populated_index:Index, tmp_defs_path:Path)>None::","test_duplicate_oifm_id_fails_validation:255:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_name_fails_validation:263:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_attribute_id_fails_validation:271:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_update_from_directory:281:async (populated_index:Index, tmp_defs_path:Path)>None::Test the update_from_directory method with add, modify, and delete operations.","test_update_from_directory_empty_directory:340:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with an empty directory removes all entries.","test_update_from_directory_nonexistent_directory:363:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with a nonexistent directory raises ValueError.","test_index_initialization_with_client:371:(mongo_client:AsyncIOMotorClient[Any])>None::Test that the Index can be initialized with an existing client.","test_search_basic_functionality:383:async (populated_index:Index)>None::Test basic search functionality with populated index.","test_search_by_name:400:async (populated_index:Index)>None::Test search functionality by exact and partial name matches.","test_search_by_description:414:async (populated_index:Index)>None::Test search functionality using description content.","test_search_by_synonyms:426:async (populated_index:Index)>None::Test search functionality using synonyms.","test_search_limit_parameter:436:async (populated_index:Index)>None::Test that search respects the limit parameter.","test_search_no_results:451:async (populated_index:Index)>None::Test search with query that should return no results.","test_search_empty_query:459:async (populated_index:Index)>None::Test search behavior with empty query.","test_search_case_insensitive:467:async (populated_index:Index)>None::Test that search is case insensitive.","test_search_multiple_terms:478:async (populated_index:Index)>None::Test search with multiple terms.","test_search_with_empty_index:492:async (index:Index)>None::Test search functionality with empty index.","test_mongodb_connection_failure:501:async ()>None::Test Index behavior when MongoDB connection fails.","test_add_entry_with_invalid_json_file:515:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid JSON.","test_add_entry_with_nonexistent_file:527:async (index:Index, tmp_path:Path)>None::Test error handling when adding nonexistent file.","test_add_entry_with_invalid_model_data:537:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid model data.","test_batch_operation_partial_failure:555:async (index:Index, tmp_path:Path, sample_model:FindingModelFull)>None::Test behavior when batch operations partially fail.","test_concurrent_index_operations:577:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None:add_file:Test Index behavior under concurrent operations.","test_search_with_mongodb_error:612:async (index:Index)>None::Test search behavior when MongoDB has issues.","test_large_query_handling:622:async (index:Index)>None::Test Index behavior with very large search queries."]],"test/test_ontology_concept_match.py":["p",["test_query_terms_deduplication:28:()>None::Test that duplicate terms are removed from list.","test_generate_finding_query_terms_single_word:56:async ()>None::Test query generation for single word.","test_generate_finding_query_terms_with_description:73:async ()>None::Test query generation with description.","test_create_query_generator_agent:90:()>None::Test that the query generator agent is created correctly.","test_execute_ontology_search_with_cohere_enabled:116:async ()>None::Test execute_ontology_search when Cohere reranking is enabled and configured.","test_execute_ontology_search_with_cohere_disabled:173:async ()>None::Test execute_ontology_search when Cohere reranking is disabled via config.","test_execute_ontology_search_with_cohere_no_api_key:212:async ()>None::Test execute_ontology_search when Cohere config is enabled but no API key is ...","test_execute_ontology_search_with_cohere_single_query_term:251:async ()>None::Test execute_ontology_search with Cohere enabled and single query term (no al...","test_execute_ontology_search:297:async ()>None::Test executing search with filtering using BioOntology API.","test_execute_ontology_search_with_custom_ontologies:343:async ()>None::Test execute_ontology_search with custom ontologies parameter.","test_execute_ontology_search_with_none_ontologies:390:async ()>None::Test execute_ontology_search with ontologies=None (uses defaults).","test_execute_ontology_search_missing_api_key:430:async ()>None::Test that execute_ontology_search raises ValueError when BioOntology API key ...","test_ensure_exact_matches_adds_missing:444:()>None::Test that missing exact matches are added.","test_ensure_exact_matches_respects_limit:472:()>None::Test that max_length of 5 is respected.","test_categorization_agent_creation:498:()>None::Test that agent is created properly.","test_categorization_with_test_model:517:async ()>None::Test categorization using TestModel.","test_match_ontology_concepts_integration:553:async ()>None::Test the complete workflow using BioOntology API.","test_match_ontology_concepts_with_custom_ontologies:602:async ()>None::Test match_ontology_concepts with custom ontologies parameter.","test_match_ontology_concepts_with_none_ontologies:663:async ()>None::Test match_ontology_concepts with ontologies=None (uses defaults).","test_match_ontology_concepts_missing_api_key:722:async ()>None::Test that match_ontology_concepts raises ValueError when BioOntology API key ...","test_bioontology_integration:738:async ()>None::Integration test: Use real BioOntologySearchClient."]],"test/test_ontology_search.py":["p",["test_bioontology_implements_protocol:21:()>None::Test that BioOntologySearchClient implements OntologySearchProtocol.","test_protocol_context_managers:43:async ()>None::Test that BioOntology client works as async context manager.","test_bioontology_search_result_from_api_response:57:()>None::Test creating a search result from API response.","test_bioontology_search_result_minimal:83:()>None::Test creating a search result with minimal fields.","test_bioontology_client_no_api_key:104:()>None::Test that client raises error without API key.","test_bioontology_search_pneumonia:123:async ()>None::Integration test: search for pneumonia concepts.","test_bioontology_search_all_pages:162:async ()>None::Integration test: search with pagination.","test_bioontology_search_as_ontology_results:192:async ()>None::Integration test: test conversion to OntologySearchResult format.","test_bioontology_semantic_type_filter:225:async ()>None::Integration test: test filtering by semantic type.","test_rerank_with_cohere_no_api_key:263:()>None::Test that rerank_with_cohere returns original order when no API key is config...","test_rerank_with_cohere_empty_documents:287:()>None::Test that rerank_with_cohere handles empty document list.","test_rerank_with_cohere_with_mock_client:298:async ()>None::Test rerank_with_cohere with a mocked Cohere client.","test_rerank_with_cohere_top_n:338:async ()>None::Test rerank_with_cohere with top_n parameter.","test_rerank_with_cohere_integration:375:async ()>None::Integration test for Cohere reranking (requires COHERE_API_KEY).","test_default_ontologies_limited:401:()>None::"]],"test/test_tools.py":["p",["test_create_stub:15:(finding_info:FindingInfo)>None::Test creating a stub finding model from a FindingInfo object.","test_add_ids_to_finding_model:27:(base_model:FindingModelBase)>None::Test adding IDs to a finding model.","test_add_ids_with_empty_cache:48:(base_model:FindingModelBase)>None::Test adding IDs when cache is empty (first call).","test_add_ids_with_populated_cache:73:(base_model:FindingModelBase)>None::Test adding IDs when cache already has data (avoids duplicate IDs).","test_add_ids_uses_cache_on_second_call:101:(base_model:FindingModelBase)>None::Test that second call uses cache and doesn't make HTTP request.","test_add_ids_handles_http_timeout:124:(base_model:FindingModelBase)>None::Test that function handles HTTP timeout gracefully.","test_add_ids_handles_http_error:140:(base_model:FindingModelBase)>None::Test that function handles HTTP errors gracefully.","test_add_ids_refresh_cache:156:(base_model:FindingModelBase)>None::Test forcing cache refresh.","test_load_used_ids_from_github_directly:177:()>None::Test the load_used_ids_from_github function directly.","test_load_used_ids_with_custom_url:201:()>None::Test load_used_ids_from_github with custom URL.","test_add_index_codes_to_finding_model:219:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_add_index_codes_to_finding_model_no_duplicates:241:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_create_model_stub_from_info_new_api:254:(finding_info:FindingInfo)>None::Test creating a stub finding model using the new function name.","test_add_ids_to_model_new_api:266:(base_model:FindingModelBase)>None::Test adding IDs to a finding model using the new function name.","test_add_standard_codes_to_model_new_api:284:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name.","test_add_standard_codes_to_model_no_duplicates_new_api:306:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name (no duplicat...","test_create_info_from_name_integration:320:async ()>None::Integration test for create_info_from_name with real OpenAI API.","test_create_info_from_name_edge_cases:347:async ()>None::Test create_info_from_name with edge cases.","test_add_details_to_info_integration:364:async ()>None::Integration test for add_details_to_info with real Perplexity API.","test_create_model_from_markdown_integration:395:async ()>None::Integration test for create_model_from_markdown with real OpenAI API.","test_create_model_from_markdown_file_integration:455:async (tmp_path:Path)>None::Integration test for create_model_from_markdown using file input.","test_ai_tools_error_handling:496:async ()>None::Test AI tools error handling with invalid inputs.","test_ai_tools_consistency:516:async ()>None::Test that AI tools produce consistent results for the same input.","test_find_similar_models_basic_functionality:535:()>None::Test basic functionality of find_similar_models without API calls.","test_find_similar_models_integration:562:async ()>None::Integration test for find_similar_models with real OpenAI API.","test_find_similar_models_edge_cases:588:async ()>None::Test find_similar_models with edge cases.","test_add_ids_network_timeout_handling:618:(base_model:FindingModelBase)>None::Test ID generation when GitHub API is unreachable.","test_add_ids_http_error_handling:637:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns HTTP error.","test_add_ids_invalid_response_data:656:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns invalid data.","test_ai_tools_api_key_missing:676:async ()>None::Test AI tools behavior when API keys are missing or invalid.","test_ai_tools_rate_limiting:720:async ()>None::Test AI tools behavior under rate limiting conditions.","test_ai_tools_malformed_response_handling:749:async ()>None::Test AI tools handling of malformed API responses.","test_tools_import_failures:777:()>None::Test graceful handling when optional dependencies are missing.","test_concurrent_id_generation:797:(base_model:FindingModelBase)>None:generate_ids:Test ID generation under concurrent access."]]},"g":[["Index.validate_models_batch","_check_name_conflict"],["execute_ontology_search","_add_exact_matches"],["IdManager.add_ids_to_model","IdManager.load_used_ids_from_github"],["ReleaseManager.update_version","run_command"],["ReleaseManager.publish_pypi","confirm"],["demo_detailed_search","display_results"],["FindingModelFull.index_codes_str","_index_codes_str"],["ReleaseManager.run_checks","run_command"],["ReleaseManager.post_release_cleanup","ReleaseManager.run_command"],["Index._search_batch_combined","_entry_matches_query"],["Index.update_from_directory","_execute_batch_operations"],["match_ontology_concepts","categorize_with_validation"],["BioOntologySearchClient.search_bioontology","BioOntologySearchClient.search"],["make_info","print_info_truncate_detail"],["Organization.get","Person.get"],["BioOntologySearchClient.search_bioontology","Index.search"],["create_finding_model_stub_from_finding_info","create_model_stub_from_info"],["DuckDBOntologySearchClient._search_single","search"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._apply_rrf_fusion"],["generate_finding_query_terms","create_query_generator_agent"],["BioOntologySearchClient.search","BioOntologySearchClient.search_as_ontology_results"],["OntologySearchProtocol.search_parallel","search"],["Index.update_from_directory","Index._execute_batch_operations"],["ReleaseManager.release","handle_error"],["Index.update_from_directory","Index._prepare_entries_for_batch"],["Index._get_validation_data","get"],["ReleaseManager.release","ReleaseManager._execute_step"],["Index.validate_models_batch","Index._check_name_conflict"],["Index.update_from_directory","_get_local_file_info"],["Index.search_batch","_search_batch_individual"],["main","create_database"],["test_anatomic_location_search","_print_verbose_stages"],["demo_multiple_ontologies","print_section"],["Index.search_batch","Index._search_batch_combined"],["_print_verbose_stages","_print_cohere_stage"],["DuckDBOntologySearchClient._find_exact_matches","DuckDBOntologySearchClient._row_to_result"],["OntologySearchProtocol.search_parallel","OntologySearchProtocol.search"],["Index._entry_from_model_file","_calculate_file_hash"],["ReleaseManager.run_tests","ReleaseManager.run_command"],["ReleaseManager.commit_changes","run_command"],["Index.validate_models_batch","Index._check_id_conflict"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._apply_rrf_fusion"],["Index.contains","Index._id_or_name_or_syn_query"],["rerank_with_cohere","_rerank"],["ReleaseManager.create_github_release","run_command"],["execute_ontology_search","_filter_anatomical_concepts"],["BioOntologySearchClient.search_bioontology","from_api_response"],["BioOntologySearchClient.search_bioontology","OntologySearchProtocol.search"],["generate_oifm_id","_random_digits"],["DuckDBOntologySearchClient._search_single","_apply_rrf_fusion"],["Index._prepare_entries_for_batch","Index.validate_models_batch"],["Index.update_from_directory","_determine_operations"],["ReleaseManager.release","ReleaseManager._get_release_steps"],["demo_basic_search","print_section"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._find_exact_matches"],["ReleaseManager.run_tests","confirm"],["Index.validate_models_batch","Index._check_attribute_id_conflict"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._row_to_result"],["BioOntologySearchClient.search_parallel","DuckDBOntologySearchClient.search"],["ReleaseManager.merge_to_main","ReleaseManager.confirm"],["Index._check_attribute_id_conflict","Index.get"],["Index.validate_models_batch","_check_id_conflict"],["ReleaseManager.publish_pypi","ReleaseManager.run_command"],["DuckDBOntologySearchClient.search_parallel","DuckDBOntologySearchClient._search_single"],["_print_verbose_stages","_print_cohere_rerank_stage"],["_print_cohere_rerank_stage","display_results_comparison"],["Person.get","Index.get"],["OntologySearchProtocol.search_parallel","DuckDBOntologySearchClient.search"],["BioOntologySearchClient.search_parallel","Index.search"],["Index._prepare_entries_for_batch","Index.add_or_update_contributors"],["main","verify_database"],["Index.add_or_update_entry_from_file","Index.validate_model"],["ReleaseManager.create_tag","ReleaseManager.run_command"],["demo_basic_search","display_results"],["Index.add_or_update_entry_from_file","Index.add_or_update_contributors"],["ReleaseManager.create_github_release","confirm"],["Index._prepare_entries_for_batch","add_or_update_contributors"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._find_exact_matches"],["main","demo_detailed_search"],["Index._check_attribute_id_conflict","Person.get"],["OntologySearchResult.as_index_code","normalize_concept"],["_print_cohere_stage","display_results_comparison"],["Index.add_or_update_entry_from_file","add_or_update_contributors"],["ReleaseManager.update_version","get_current_version"],["Index.contains","_id_or_name_or_syn_query"],["Index.validate_models_batch","Index._get_validation_data"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._row_to_result"],["process_and_insert_data","create_searchable_text"],["DuckDBOntologySearchClient.search_with_filters","_search_single_with_filters"],["match_ontology_concepts","execute_ontology_search"],["BioOntologySearchClient.search_bioontology","DuckDBOntologySearchClient.search"],["ReleaseManager.update_version","_setup_logging"],["BioOntologySearchClient.search_all_pages","BioOntologySearchClient.search_bioontology"],["_create_finding_info","_async_create_finding_info"],["Organization.get","Organization.get"],["markdown_to_fm","print_info_truncate_detail"],["BioOntologySearchClient.search_parallel","search"],["_print_verbose_stages","_print_query_terms_stage"],["ReleaseManager.update_version","ReleaseManager.run_command"],["Index._get_validation_data","Organization.get"],["Person.organization","Index.get"],["Index.search_batch","_search_batch_combined"],["DuckDBOntologySearchClient.search_with_filters","DuckDBOntologySearchClient._search_single_with_filters"],["ReleaseManager.update_changelog","ReleaseManager.confirm"],["main","test_anatomic_location_search"],["demo_pagination","print_section"],["main","test_ontology_concept_match"],["main","load_json_data"],["ReleaseManager.run_checks","ReleaseManager.run_command"],["ReleaseManager.release","print_summary"],["test_ontology_concept_match","_print_finding_info_stage"],["Organization.get","get"],["find_anatomic_locations","create_location_selection_agent"],["BioOntologySearchClient.search_parallel","OntologySearchProtocol.search"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchResult.to_ontology_search_result"],["main","demo_pagination"],["ReleaseManager.check_existing_tag","run_command"],["Index._prepare_entries_for_batch","_entry_from_model_file"],["Index._get_local_file_info","Index._calculate_file_hash"],["make_info","_do_make_info"],["Index.update_from_directory","_get_existing_file_info"],["DuckDBOntologySearchClient._search_single","_find_exact_matches"],["categorize_with_validation","ensure_exact_matches_post_process"],["Index.add_or_update_entry_from_file","Index.get"],["BioOntologySearchClient.search_bioontology","search"],["Index._prepare_entries_for_batch","Index._entry_from_model_file"],["Index.search_batch","Index._search_batch_individual"],["test_ontology_concept_match","_print_summary"],["main","check_configuration"],["_print_verbose_stages","_print_categorization_stage"],["ReleaseManager.check_branch","run_command"],["ReleaseManager.release","ReleaseManager.handle_error"],["ChoiceAttribute.fix_max_selected","fix_max_selected_validator"],["DuckDBOntologySearchClient.search","_search_single"],["ReleaseManager.get_current_version","run_command"],["make_stub_model","_do_make_stub_model"],["Index.add_or_update_entry_from_file","_calculate_file_hash"],["BioOntologySearchClient.search_bioontology","BioOntologySearchResult.from_api_response"],["ReleaseManager.commit_changes","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","Person.get"],["test_ontology_concept_match","perform_search_stages"],["Index.get","Index._id_or_name_or_syn_query"],["Index.validate_model","Index.validate_models_batch"],["demo_semantic_type_filter","print_section"],["ReleaseManager.post_release_cleanup","run_command"],["ReleaseManager.create_github_release","ReleaseManager.run_command"],["DuckDBOntologySearchClient._search_single_with_filters","_find_exact_matches"],["_print_verbose_stages","_print_final_output_stage"],["Index.update_from_directory","Index._get_existing_file_info"],["ReleaseManager.check_git_status","ReleaseManager.run_command"],["model_file_name","normalize_name"],["generate_oifma_id","_random_digits"],["test_concurrent_id_generation","generate_ids"],["describe_finding_name","create_info_from_name"],["ReleaseManager.update_version","ReleaseManager.validate_version"],["Index._prepare_entries_for_batch","validate_models_batch"],["ReleaseManager.update_version","ReleaseManager.check_existing_tag"],["process_and_insert_data","_insert_batch"],["Index._entry_from_model_file","Index._calculate_file_hash"],["main","ReleaseManager.release"],["Index.update_from_directory","Index._get_local_file_info"],["IdManager.add_ids_to_model","load_used_ids_from_github"],["Index.update_from_directory","_prepare_entries_for_batch"],["test_anatomic_location_search","_print_finding_info_stage"],["categorize_with_validation","create_categorization_agent"],["IdManager.add_ids_to_finding_model","add_ids_to_model"],["add_standard_codes_to_finding_model","add_standard_codes_to_model"],["main","demo_semantic_type_filter"],["Index._check_attribute_id_conflict","get"],["main","print_header"],["Person.get","Person.get"],["ReleaseManager.__init__","_setup_logging"],["create_model_stub_from_info","create_change_element"],["BioOntologySearchClient.search_as_ontology_results","search_all_pages"],["create_finding_model_from_markdown","create_model_from_markdown"],["IndexEntry.match","match"],["Index.get","_id_or_name_or_syn_query"],["test_anatomic_location_search","_print_summary"],["match_ontology_concepts","generate_finding_query_terms"],["ChoiceAttributeIded.index_codes_str","_index_codes_str"],["BioOntologySearchClient.search","search_as_ontology_results"],["Index._search_batch_individual","BioOntologySearchClient.search"],["DuckDBOntologySearchClient.search","DuckDBOntologySearchClient._search_single"],["execute_ontology_search","_apply_cohere_reranking"],["ReleaseManager.update_version","ReleaseManager.get_current_version"],["ReleaseManager.update_version","validate_version"],["ReleaseManager.release","_get_release_steps"],["create_finding_info_from_name","create_info_from_name"],["display_results","print_header"],["ReleaseManager.run_tests","ReleaseManager.confirm"],["test_anatomic_location_search","perform_search_stages"],["main","demo_basic_search"],["Index.add_or_update_entry_from_file","_entry_from_model_file"],["Person.organization","Person.get"],["ReleaseManager.build_packages","run_command"],["ReleaseManager.release","_should_skip_step"],["IdManager.add_ids_to_finding_model","IdManager.add_ids_to_model"],["_print_verbose_stages","_print_ai_selection_stage"],["DuckDBOntologySearchClient._search_single","_combine_with_exact_matches"],["DuckDBOntologySearchClient._find_exact_matches","_row_to_result"],["ReleaseManager.update_version","check_existing_tag"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._combine_with_exact_matches"],["ReleaseManager.check_existing_tag","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","Index._entry_from_model_file"],["Index.update_from_directory","Index._determine_operations"],["ReleaseManager.merge_to_main","run_command"],["demo_detailed_search","print_section"],["ReleaseManager.publish_pypi","ReleaseManager.confirm"],["find_anatomic_locations","execute_anatomic_search"],["DuckDBOntologySearchClient._search_single","BioOntologySearchClient.search"],["_print_verbose_stages","_print_bio_search_stage"],["markdown_to_fm","_do_markdown_to_fm"],["Index.add_or_update_entry_from_file","get"],["add_details_to_finding_info","add_details_to_info"],["ReleaseManager.check_branch","ReleaseManager.run_command"],["Index._search_batch_individual","OntologySearchProtocol.search"],["DuckDBOntologySearchClient._search_single_with_filters","_combine_with_exact_matches"],["OntologySearchProtocol.search_parallel","BioOntologySearchClient.search"],["ReleaseManager.get_current_version","ReleaseManager.run_command"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._combine_with_exact_matches"],["main","demo_multiple_ontologies"],["Organization.get","Index.get"],["BioOntologySearchClient.search_as_ontology_results","to_ontology_search_result"],["test_concurrent_index_operations","add_file"],["Index.validate_models_batch","_check_attribute_id_conflict"],["Index._get_validation_data","Index.get"],["DuckDBOntologySearchClient._search_single","_get_embedding"],["DuckDBOntologySearchClient._search_single","_row_to_result"],["Index.validate_model","validate_models_batch"],["NumericAttributeIded.index_codes_str","_index_codes_str"],["Index._check_attribute_id_conflict","Organization.get"],["DuckDBOntologySearchClient.search_parallel","_search_single"],["main","process_and_insert_data"],["ReleaseManager.merge_to_main","confirm"],["strip_quotes_secret","strip_quotes"],["Person.get","Organization.get"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._get_embedding"],["main","create_indexes"],["Index.add_or_update_entry_from_file","Index._calculate_file_hash"],["BioOntologySearchClient.search_all_pages","search_bioontology"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchClient.search_all_pages"],["_generate_search_terms_with_fallback","create_term_generation_agent"],["find_similar_models","_generate_search_terms_with_fallback"],["Index._get_validation_data","Person.get"],["Person.get","get"],["ReleaseManager.run_tests","run_command"],["ReleaseManager.__init__","ReleaseManager._setup_logging"],["DuckDBOntologySearchClient._search_single_with_filters","_get_embedding"],["ReleaseManager.release","ReleaseManager.print_summary"],["DuckDBOntologySearchClient._search_single_with_filters","_row_to_result"],["DuckDBOntologySearchClient._search_single_with_filters","_apply_rrf_fusion"],["DuckDBOntologySearchClient._search_single","OntologySearchProtocol.search"],["ReleaseManager.update_version","ReleaseManager._setup_logging"],["get_detail_on_finding","add_details_to_info"],["match_ontology_concepts","build_final_output"],["Index._search_batch_individual","DuckDBOntologySearchClient.search"],["IndexEntry.match","IndexEntry.match"],["ReleaseManager.release","ReleaseManager._should_skip_step"],["ChoiceValueIded.index_codes_str","_index_codes_str"],["main","release"],["create_model_stub_from_info","create_presence_element"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._get_embedding"],["Index._search_batch_individual","Index.search"],["Person.organization","Organization.get"],["main","parse_args"],["ReleaseManager.check_git_status","run_command"],["add_standard_codes_to_model","_add_index_codes"],["ReleaseManager.update_changelog","confirm"],["Person.organization","get"],["Index.add_or_update_entry_from_file","validate_model"],["ReleaseManager.publish_pypi","run_command"],["Index.validate_models_batch","_get_validation_data"],["process_and_insert_data","determine_sided"],["test_ontology_concept_match","_print_verbose_stages"],["ReleaseManager.create_github_release","ReleaseManager.confirm"],["ReleaseManager.create_tag","run_command"],["Index.to_markdown","count"],["ReleaseManager.build_packages","ReleaseManager.run_command"],["Index._search_batch_individual","search"],["Index.add_or_update_entry_from_file","Organization.get"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient.search"],["BioOntologySearchClient.search_parallel","BioOntologySearchClient.search"],["Index.to_markdown","Index.count"],["find_anatomic_locations","generate_anatomic_query_terms"],["ChoiceAttributeIded.fix_max_selected","fix_max_selected_validator"],["Index._search_batch_combined","Index._entry_matches_query"],["ReleaseManager.release","_execute_step"],["DuckDBOntologySearchClient._search_single","Index.search"],["Index._get_local_file_info","_calculate_file_hash"],["ReleaseManager.merge_to_main","ReleaseManager.run_command"],["OntologySearchProtocol.search_parallel","Index.search"]],"d":{".github/copilot-instructions.md":["Copilot Instructions for FindingModel","Project Overview","Core Commands","Build & Package","Testing","Code Quality","CLI Usage","Architecture","Core Components","Data Models"],".serena/memories/anatomic_location_search_implementation.md":["Anatomic Location Search Implementation","Overview","Architecture Decisions","Two-Agent Pattern","Reusable Components","Testing Patterns Established","Pydantic AI Testing","Project Conventions","Key Implementation Details","Error Handling"],".serena/memories/api_integration.md":["API Integration and External Services","Required API Keys","OpenAI API","Perplexity API","MongoDB (Optional)","Configuration Management","Testing with External APIs","API Error Handling"],".serena/memories/bioontology_integration_2025.md":["BioOntology API Integration (2025-09-09)","Overview","Implementation Details","BioOntologySearchClient","Key Features","API Response Mapping","Integration with Protocol","Performance Characteristics","Configuration Requirements",".env file"],".serena/memories/code_style_conventions.md":["Code Style and Conventions","Python Version","Code Style","Code Patterns","Testing","Error Handling","Naming Conventions","File Organization"],".serena/memories/documentation_corrections_2025.md":["Documentation Corrections - January 2025","Overview","Major Corrections","1. Index Class Documentation","2. find_similar_models() Function","Wrong signature and behavior","Returns list of tuples (wrong)","Actual signature and behavior","Returns SimilarModelAnalysis object with:","- recommendation: \"edit_existing\", \"create_new\", or \"review_needed\""],".serena/memories/ontology_concept_search_refactoring.md":["Ontology Concept Search Refactoring (2025-09-04)","Overview","Key Architecture Changes","Performance Optimization (85% improvement)","Pydantic AI Pattern Corrections","Query Generation","Text Normalization Improvements","Post-Processing for Exact Matches","Testing Improvements","Framework Consistency"],".serena/memories/ontology_search_optimizations_2025.md":["Ontology Search Optimizations (2025-09-15)","Performance Improvements Implemented","1. Reduced Default Ontology Set","2. Cohere Reranking Configuration","3. SNOMEDCT Prioritization","4. Code Complexity Management","Architecture Decisions","Protocol-Based Backend Support","Configuration Philosophy","Testing Strategy"],".serena/memories/project_overview.md":["FindingModel Project Overview","Purpose","Tech Stack","Project Structure","Key Features"],".serena/memories/project_state_january_2025.md":["Project State - January 2025","Current Status","\u2705 All Tests Passing","\u2705 Code Quality","\u2705 Documentation","Recent Major Improvements","Test Suite Enhancements","Documentation Fixes","Code Quality Improvements","Known Working Commands"],".serena/memories/protocol_based_architecture_2025.md":["Protocol-Based Architecture Pattern (2025-09-09)","Overview","Key Design Decisions","Protocol Interface Design","Implementation Pattern","Backend Implementations","Auto-Detection and Parallel Execution","Benefits","Flexibility","Performance"],".serena/memories/pydantic_ai_testing_best_practices.md":["Pydantic AI Testing Best Practices","Core Philosophy","Essential Patterns","1. Prevent Accidental API Calls","2. Use TestModel for Simple Testing","3. Use FunctionModel for Complex Behavior","4. Integration Test Pattern","Anti-Patterns to Avoid","\u274c Testing Library Functionality","BAD - tests Pydantic AI, not your code"],".serena/memories/suggested_commands.md":["Development Commands","Primary Commands (using Task)","Testing","Code Quality","Building","Alternative Commands (using uv directly)","Testing","Code Quality","Building","CLI Usage"],".serena/memories/task_completion_checklist.md":["Task Completion Checklist","1. Code Quality Checks (REQUIRED)","2. Run Tests (REQUIRED)","3. Test External APIs (if modified)","4. Verify Specific Changes","5. Check Git Status","Important Notes","When to Skip Checks"],".serena/memories/test_suite_improvements_2025.md":["Test Suite Improvements - January 2025","Overview","Added Test Coverage","1. Index.search() Functionality Tests (test_index.py)","2. AI Tools Integration Tests (test_tools.py)","3. find_similar_models() Coverage (test_tools.py)","4. Error Handling Tests","Linting Fixes Applied","Test Statistics","Running Tests"],"CHANGELOG.md":["Changelog","[Unreleased]","[0.4.0] - 2025-09-15","Added","Changed","Fixed","Removed","[0.3.3] - 2025-09-04","Added","Changed"],"CLAUDE.md":["CLAUDE.md","Project Overview","Development Commands","Core Commands (using Task)","Run tests (excluding external API calls)","Run full test suite (including API integration tests)  ","Run specific test","Lint and format code","Build the package","Run all checks quietly"],"README.md":["`findingmodel` Package","Features","Installation","Required API Keys","Required for AI features","Optional for enhanced ontology search","Optional for MongoDB indexing","CLI","Models","`FindingModelBase`"],"tasks/done/anatomic-location-search-implementation-plan.md":["Implementation Plan for Anatomic Location Search Tool","Current Status","Phase 1: Refactor Common Utilities \u2705 COMPLETED","Phase 2: Create Ontology Search Module \u2705 COMPLETED","Phase 3: Add LanceDB Configuration \u2705 COMPLETED","Phase 4: Implement Anatomic Location Search \u2705 COMPLETED","Phase 5: Testing \ud83d\udd04 IN PROGRESS - MAJOR ISSUES IDENTIFIED","Critical Issues Found (2025-08-29):"],"tasks/done/anatomic-location-search-prd.md":["PRD: Anatomic Location Search Tool for FindingModel","Overview","Core Architecture","1. Modular File Structure","2. Core Components","src/findingmodel/tools/ontology_search.py","Table constants","src/findingmodel/tools/common.py (add this function)"],"tasks/ontology-concept-search-prd.md":["Product Requirements Document: Comprehensive Ontology Concept Search Tool","Overview","Purpose","Key Differentiators from Anatomic Location Search","Functional Requirements","1. Search Scope","2. Multi-Agent Architecture","3. Output Format","4. Search Strategy","Pydantic AI Agent Architecture"],"tasks/refactoring/01-index-decomposition.md":["Index Class Decomposition Plan","Executive Summary","Current State Analysis","Problems","Key Methods by Responsibility","Database Operations (10 methods)","Validation (6 methods)  ","File Operations (5 methods)","Search (4 methods)","Other (9 methods)"],"tasks/refactoring/02-api-cleanup.md":["API Cleanup and Deprecation Plan","Executive Summary","Current State Analysis","Duplicate Functions Identified","Problems","Target State","Naming Convention","Public API Structure","src/findingmodel/tools/__init__.py","Implementation Plan"],"tasks/refactoring/03-validation-framework.md":["Validation Framework Plan","Executive Summary","Current State Analysis","Problems with Current Validation","Target Architecture","Core Design Pattern: Chain of Responsibility","src/findingmodel/validation/base.py","Specific Validators","src/findingmodel/validation/validators/id_validator.py","src/findingmodel/validation/validators/name_validator.py"],"tasks/refactoring/04-circular-dependencies.md":["Breaking Circular Dependencies Plan","Executive Summary","Current State Analysis","Circular Dependency Map","Problems","Current problematic code","Person references Index directly","Target Architecture","Design Patterns Applied","New Architecture"],"tasks/refactoring/05-performance-optimizations.md":["Performance Optimizations Plan","Executive Summary","Current Performance Analysis","Identified Bottlenecks","Current: Multiple get() calls in validation","Current: Process files one by one","Current: Individual inserts in batch operations","Target Performance Improvements","Optimization Goals","Implementation Details"],"test/data/pulmonary_embolism.md":["Pulmonary embolism\u2014`OIFM_MSFT_932618`","Attributes","Presence\u2014`OIFMA_MSFT_463871`","Change from prior\u2014`OIFMA_MSFT_592864`","Other presence\u2014`OIFMA_MSFT_463872`","Size\u2014`OIFMA_MSFT_592865`"],"test/data/thyroid_nodule_codes.md":["Thyroid nodule\u2014`OIFM_MGB_274588`","Attributes","Presence\u2014`OIFMA_MGB_771712`","Size\u2014`OIFMA_MGB_337706`","Change from prior\u2014`OIFMA_MGB_337707`"]},"deps":{"notebooks/demo_anatomic_location_search.py":["argparse","asyncio","json","sys","time","pathlib","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search","asyncio","traceback"],"notebooks/demo_bioontology_search.py":["asyncio","sys","time","findingmodel.config","findingmodel.tools.ontology_search","traceback","traceback"],"notebooks/demo_find_similar.py":["dotenv","logfire","findingmodel","findingmodel.index","findingmodel.tools","findingmodel.tools.similar_finding_models","asyncio","sys"],"notebooks/demo_ontology_concept_match.py":["argparse","asyncio","sys","time","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.ontology_concept_match","traceback"],"notebooks/migrate_anatomic_to_duckdb.py":["asyncio","json","logging","pathlib","typing","duckdb","openai","findingmodel.tools.common","findingmodel.config"],"scripts/release.py":["argparse","hashlib","re","shutil","subprocess","sys","datetime","pathlib","typing","loguru"],"src/findingmodel/abstract_finding_model.py":["typing","findingmodel.finding_model"],"src/findingmodel/cli.py":["asyncio","pathlib","click","rich.console","rich.markdown"],"src/findingmodel/common.py":["re"],"src/findingmodel/config.py":["typing","openai","pydantic","pydantic_settings"],"src/findingmodel/contributor.py":["pathlib","typing","pydantic","typing_extensions"],"src/findingmodel/finding_info.py":["pydantic"],"src/findingmodel/finding_model.py":["random","re","enum","typing","pydantic","findingmodel.contributor"],"src/findingmodel/index.py":["hashlib","collections","enum","pathlib","typing","motor.motor_asyncio","pydantic","pymongo","findingmodel","findingmodel.common","findingmodel.config","findingmodel.contributor","findingmodel.finding_model"],"src/findingmodel/index_code.py":["pydantic"],"src/findingmodel/tools/add_ids.py":["time","httpx","findingmodel","findingmodel.finding_model","warnings"],"src/findingmodel/tools/anatomic_location_search.py":["json","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search"],"src/findingmodel/tools/common.py":["pathlib","instructor","openai","pydantic_ai.models.openai","pydantic_ai.providers.openai","findingmodel","findingmodel.config"],"src/findingmodel/tools/create_stub.py":["findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/duckdb_search.py":["pathlib","typing","duckdb","openai","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/finding_description.py":["warnings","findingmodel.config","findingmodel.finding_info"],"src/findingmodel/tools/index_codes.py":["typing","findingmodel.finding_model","findingmodel.index_code","warnings"],"src/findingmodel/tools/markdown_in.py":["pathlib","findingmodel.config","findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/ontology_concept_match.py":["json","dataclasses","pydantic","pydantic_ai","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/ontology_search.py":["asyncio","typing","cohere","httpx","pydantic","tenacity","findingmodel","findingmodel.config","findingmodel.index_code"],"src/findingmodel/tools/prompt_template.py":["re","pathlib","typing","jinja2","openai.types.chat"],"src/findingmodel/tools/similar_finding_models.py":["json","dataclasses","typing","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.index","findingmodel.tools.common","time"],"test/conftest.py":["pathlib","pytest","findingmodel","findingmodel.finding_info","findingmodel.finding_model"],"test/test_anatomic_location_search.py":["unittest.mock","pytest","pydantic_ai","pydantic_ai.models.test","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search"],"test/test_contributor.py":["pathlib","typing","pytest","pydantic","findingmodel.contributor"],"test/test_findingmodel.py":["findingmodel.contributor","findingmodel.finding_model"],"test/test_findingmodel_md.py":["findingmodel"],"test/test_index.py":["json","shutil","socket","pathlib","typing","pytest","motor.motor_asyncio","pymongo.errors","findingmodel.finding_model","findingmodel.index","findingmodel.index","pymongo.errors","pydantic","asyncio"],"test/test_ontology_concept_match.py":["unittest.mock","pytest","pydantic_ai","pydantic_ai.models.test","findingmodel.tools.ontology_concept_match","findingmodel.tools.ontology_search","pydantic_ai.models.test","pydantic_ai.models.test","findingmodel.config"],"test/test_ontology_search.py":["inspect","pytest","pydantic_ai","findingmodel.config","findingmodel.tools.ontology_search","asyncio","unittest.mock","findingmodel.tools.ontology_search","asyncio","findingmodel.tools.ontology_search","unittest.mock","findingmodel.tools.ontology_search","unittest.mock","findingmodel.tools.ontology_search","findingmodel.tools.ontology_search"],"test/test_tools.py":["asyncio","pathlib","unittest.mock","httpx","pytest","findingmodel.tools","findingmodel","findingmodel.finding_model","findingmodel.index_code","findingmodel.tools.add_ids","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_model","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.tools","asyncio","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","os","pydantic","findingmodel","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_info","findingmodel.tools.create_stub","findingmodel.tools.add_ids","concurrent.futures"]},"dir_purposes":{".serena/memories":"Test files and test utilities","scripts":"Build and utility scripts","src/findingmodel":"Data models and schemas","src/findingmodel/tools":"Data models and schemas","test":"Test files and test utilities"},"staleness":1757511302.713397}