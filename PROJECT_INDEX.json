{"at":"2025-08-31T16:36:35.686395","root":".","tree":[".","\u251c\u2500\u2500 notebooks/ (3 files)","\u2502   \u2514\u2500\u2500 data/","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 scripts/ (1 files)","\u251c\u2500\u2500 src/ (23 files)","\u2502   \u2514\u2500\u2500 findingmodel/ (23 files)","\u2502       \u2514\u2500\u2500 tools/ (11 files)","\u2502           \u2514\u2500\u2500 prompt_templates/","\u251c\u2500\u2500 tasks/","\u2502   \u2514\u2500\u2500 refactoring/","\u251c\u2500\u2500 test/ (15 files)","\u2502   \u2514\u2500\u2500 data/ (8 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 pyproject.toml","\u2514\u2500\u2500 README.md"],"stats":{"total_files":42,"total_directories":19,"fully_parsed":{"python":33},"listed_only":{"json":9},"markdown_files":23},"f":{"notebooks/demo_anatomic_location_search.py":["p",["test_pcl_tear:8:async ()>None::Test with PCL tear example from PRD.","test_heart_chamber_enlargement:25:async ()>None::Test with enlarged heart chambers.","test_pneumothorax:41:async ()>None::Test with pneumothorax.","test_ependymoma:57:async ()>None::Test with brain tumor.","test_edge_cases:74:async ()>None::Test edge cases.","test_performance:102:async ()>None::Test performance with different model configurations.","main:132:async ()>None::Main entry point for manual testing."]],"notebooks/demo_find_similar.py":["p",["main:10:async ()>SimilarModelAnalysis::"]],"s/release.py":["p",["main:613:()>None:release:Main entry point."],{"ReleaseError":["36",[]],"ReleaseManager":["42",["__init__:47:(self, version:Optional[str] = None, dry_run:bool = False, yes:bool = False, check_only:bool = False)>None:_setup_logging:","_setup_logging:68:(self)>None::Configure loguru logging with file output.","run_command:95:(self, cmd:str, check:bool = True, capture_output:bool = True)>subprocess.CompletedProcess[str]::Execute a shell command with logging and optional dry-run.","confirm:129:(self, message:str)>bool::Get user confirmation unless --yes flag is used.","get_current_version:141:(self)>str:run_command:Read current version from pyproject.toml.","validate_version:166:(self, version:str)>bool::Validate version format (semantic versioning).","check_git_status:179:(self)>None:run_command:Ensure git working directory is clean.","check_branch:191:(self)>None:run_command:Ensure we're on dev branch and up to date.","check_existing_tag:216:(self, version:str)>None:run_command:Check if version tag already exists.","run_tests:226:(self)>None:confirm,run_command:Run the test suite.","run_checks:256:(self)>None:run_command:Run code quality checks.","update_version:266:(self)>None:_setup_logging,check_existing_tag,get_current_version,run_command,validate_version:Update version in pyproject.toml using uv.","update_changelog:287:(self)>None:confirm:Update CHANGELOG.md with release date.","clean_dist:322:(self)>None::Clean the dist directory of old builds.","build_packages:333:(self)>List[Path]:run_command:Build wheel and source distribution packages.","commit_changes:368:(self)>None:run_command:Commit version and changelog changes.","merge_to_main:388:(self)>None:confirm,run_command:Merge dev branch to main.","create_tag:406:(self)>None:run_command:Create and push git tag.","publish_pypi:419:(self)>None:confirm,run_command:Publish packages to PyPI using uv publish.","create_github_release:432:(self, built_files:List[Path])>None:confirm,run_command:Create GitHub release with artifacts.","post_release_cleanup:452:(self)>None:run_command:Switch back to dev branch and prepare for next development cycle.","print_summary:467:(self, built_files:List[Path])>None::Print release summary.","handle_error:494:(self, step_name:str, error:Exception)>None::Handle errors and provide recovery instructions.","_get_release_steps:522:(self)>list[tuple[str, str, Callable[..., Any]]]::Get the list of release steps.","_should_skip_step:541:(self, step_id:str)>bool::Check if step should be skipped in check-only mode.","_execute_step:557:(self, step_id:str, step_func:Callable[..., Any], built_files:List[Path])>List[Path]::Execute a single release step.","release:571:(self)>None:_execute_step,_get_release_steps,_should_skip_step,handle_error,print_summary:Execute the complete release process."]]}],"sr/findingmodel/abstract_finding_model.py":["p",{"AbstractNumericAttribute":["6",[]],"AbstractChoiceValue":["18",[]],"AbstractChoiceAttribute":["25",[]],"AbstractFindingModel":["36",["as_markdown:45:(self)>str::Render the finding model as a markdown string."]]}],"sr/findingmodel/cli.py":["p",["cli:21:()>None::","config:26:()>None::Show the currently active configuration.","print_info_truncate_detail:33:(console:Console, finding_info:FindingInfo)>None::","make_info:46:(finding_name:str, detailed:bool, output:Path | None)>None:_do_make_info,print_info_truncate_detail:Generate description/synonyms and more details/citations for a finding name.","make_stub_model:83:(finding_name:str, tags:list[str], with_codes:bool, with_ids:bool, source:str | None, output:Path | None)>None:_do_make_stub_model:Generate a simple finding model object (presence and change elements only) fr...","markdown_to_fm:124:(finding_path:Path, with_ids:bool, source:str | None, output:Path | None)>None:_do_markdown_to_fm,print_info_truncate_detail:Convert markdown file to finding model format.","fm_to_markdown:161:(finding_model_path:Path, output:Path | None)>None::Convert finding model JSON file to Markdown format."]],"sr/findingmodel/common.py":["p",["normalize_name:4:(name:str)>str::","model_file_name:12:(name:str)>str:normalize_name:Convert a finding model name to a file name."]],"sr/findingmodel/config.py":["p",["strip_quotes:13:(value:str)>str::","strip_quotes_secret:17:(value:str | SecretStr)>str:strip_quotes:"],{"ConfigurationError":["9",[]],"FindingModelConfig":["29",["check_ready_for_openai:54:(self)>Literal[True]::","check_ready_for_perplexity:59:(self)>Literal[True]::"]]}],"sr/findingmodel/contributor.py":["p",{"Organization":["16",["_register_org:24:(self)>Self::","get:32:(cls, code:str)>Self | None:get:","organizations:39:(cls)>list[Self]::","load_jsonl:46:(cls, jsonl_file:str | Path)>None::","save_jsonl:58:(cls, jsonl_file:str | Path)>None::"]],"Person":["68",["organization:78:(self)>Organization:get:","_register_person:87:(self)>Self::","get:95:(cls, username:str)>Self | None:get:","people:102:(cls)>list[Self]::","load_jsonl:109:(cls, jsonl_file:str | Path)>None::","save_jsonl:121:(cls, jsonl_file:str | Path)>None::"]]}],"sr/findingmodel/finding_info.py":["p",{"FindingInfo":["4",[]]}],"sr/findingmodel/finding_model.py":["p",["_random_digits:36:(length:int)>str::","generate_oifma_id:40:(source:str)>str:_random_digits:","_index_codes_str:70:(index_codes:Iterable[IndexCode] | None)>str | None::","fix_max_selected_validator:126:(cls, data:dict[str, Any])>dict[str, Any]::","generate_oifm_id:347:(source:str)>str:_random_digits:"],{"ChoiceValue":["44",[]],"ChoiceValueIded":["74",["index_codes_str:85:(self)>str | None:_index_codes_str:"]],"ChoiceAttribute":["137",["fix_max_selected:152:(cls, data):fix_max_selected_validator:"]],"ChoiceAttributeIded":["156",["fix_max_selected:168:(cls, data):fix_max_selected_validator:","add_value_codes:173:(cls, data)::Add the value codes to the choice values if they are not already present.","index_codes_str:193:(self)>str | None:_index_codes_str:"]],"NumericAttribute":["224",[]],"NumericAttributeIded":["237",["index_codes_str:250:(self)>str | None:_index_codes_str:"]],"FindingModelBase":["311",["as_markdown:325:(self)>str::"]],"FindingModelFull":["354",["as_markdown:370:(self, hide_ids:bool = False)>str::","index_codes_str:407:(self)>str | None:_index_codes_str:"]]}],"sr/findingmodel/index.py":["p",{"AttributeInfo":["18",[]],"IndexEntry":["26",["match:40:(self, name_or_id_or_synonym:str)>bool:match:"]],"Index":["60",["__init__:70:(self, *, mongodb_uri:str | None = None, db_name:str | None = None, client:AsyncIOMotorClient[Any] | None = None, branch:str = \"main\",)>None::","setup_indexes:92:async (self)>None::","count:143:async (self)>int::Returns the number of entries in the index.","count_people:147:async (self)>int::Returns the number of people in the people collection.","count_organizations:151:async (self)>int::Returns the number of organizations in the organizations collection.","_id_or_name_or_syn_query:155:(self, id_or_name_or_syn:str)>dict[str, Any]::Helper method to create a query for ID, name, or synonym.","contains:165:async (self, id_or_name_or_syn:str)>bool:_id_or_name_or_syn_query:Checks if an ID or name exists in the index.","get:171:async (self, id_or_name_or_syn:str)>IndexEntry | None:_id_or_name_or_syn_query:Retrieves an IndexEntry by its ID, name, or synonym.","get_person:179:async (self, github_username:str)>Person | None::Retrieve a Person by github_username.","get_organization:186:async (self, code:str)>Organization | None::Retrieve an Organization by code.","_calculate_file_hash:193:(self, filename:str | Path)>str::Calculates the SHA-256 hash of a file.","_entry_from_model_file:206:(self, model:FindingModelFull, filepath:str | Path, file_hash:str | None = None)>IndexEntry:_calculate_file_hash:Creates an IndexEntry from a FindingModelFull object and a filename.","_get_validation_data:240:async (self)>tuple[dict[str, str], dict[str, str], dict[str, str]]:get:Get dicts for validation: name->oifm_id, attr_id->oifm_id, oifm_id->filename.","_check_id_conflict:257:(self, oifm_id:str, name_fold:str, oifm_to_name:dict[str, str], exclude_oifm_id:str | None)>str | None::Check for ID conflicts.","_check_name_conflict:267:(self, name_fold:str, name_to_oifm:dict[str, str], batch_names:dict[str, str], exclude_oifm_id:str | None)>list[str]::Check for name conflicts.","_check_attribute_id_conflict:287:(self, aid:str, oifm_id:str, attrid_to_oifm:dict[str, str], batch_attrids:dict[str, str], oifm_to_filename:dict[str, str], exclude_oifm_id:str | None,)>list[str]:get:Check for attribute ID conflicts.","validate_models_batch:303:async (self, models:list[tuple[FindingModelFull, str | None]], allow_duplicate_synonyms:bool = False)>dict[str, list[str]]:_check_attribute_id_conflict,_check_id_conflict,_check_name_conflict,_get_validation_data:Validate multiple models efficiently with detailed conflict info.","validate_model:340:async (self, model:FindingModelFull, allow_duplicate_synonyms:bool = False, exclude_oifm_id:str | None = None)>list[str]:validate_models_batch:Validates a FindingModelFull object using the new batch validation logic.","add_or_update_contributors:344:async (self, contributors:list[Person | Organization])>list[str] | None::","add_or_update_entry_from_file:423:async (self, filename:str | Path, model:FindingModelFull | None = None, allow_duplicate_synonyms:bool = False)>IndexReturnType:_calculate_file_hash,_entry_from_model_file,add_or_update_contributors,get,validate_model:Adds a FindingModelFull object to the index.","remove_entry:457:async (self, id_or_name:str)>bool::Removes an entry from the index by its ID or name.","remove_unused_entries:463:async (self, active_filenames:Iterable[str])>Iterable[str]::","search:486:async (self, query:str, limit:int = 10)>list[IndexEntry]::","search_batch:502:async (self, queries:list[str], limit_per_query:int = 10)>dict[str, list[IndexEntry]]:_search_batch_combined,_search_batch_individual:","_search_batch_combined:524:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:_entry_matches_query:Attempt to search all queries in a single MongoDB call using $or.","_search_batch_individual:557:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:search:Fallback: perform individual searches for each query.","_entry_matches_query:570:(self, entry:IndexEntry, query:str)>bool::","_get_existing_file_info:589:async (self)>dict[str, dict[str, str]]::Get all existing filename/hash/oifm_id pairs from the database.","_get_local_file_info:597:(self, file_paths:list[Path])>dict[str, dict[str, Any]]:_calculate_file_hash:Get all filename/hash pairs from the local directory.","_determine_operations:608:(self, local_files:dict[str, dict[str, Any]], existing_entries:dict[str, dict[str, str]])>tuple[list[tuple[str, dict[str, Any]]], list[tuple[str, dict[str, Any], str]], list[tuple[str, str]], int]::Determine what operations need to be performed.","_prepare_entries_for_batch:640:async (self, to_insert:list[tuple[str, dict[str, Any]]], to_update:list[tuple[str, dict[str, Any], str]], allow_duplicate_synonyms:bool,)>tuple[list[dict[str, Any]], list[tuple[str | None, dict[str, Any]]]]:_entry_from_model_file,add_or_update_contributors,validate_models_batch:Prepare IndexEntry objects for batch operations.","_execute_batch_operations:698:async (self, to_remove:list[tuple[str, str]], update_entries:list[tuple[str | None, dict[str, Any]]], insert_entries:list[dict[str, Any]],)>None::Execute the batch database operations.","update_from_directory:725:async (self, directory:str | Path, allow_duplicate_synonyms:bool = False)>tuple[int, int, int]:_determine_operations,_execute_batch_operations,_get_existing_file_info,_get_local_file_info,_prepare_entries_for_batch:","to_markdown:772:async (self)>str:count:Converts the index to a Markdown table."]]}],"sr/findingmodel/index_code.py":["p",{"IndexCode":["4",[]]}],"sr/findingmodel/tools/add_ids.py":["p",{"IdManager":["16",["__init__:17:(self, url:str | None = None)>None::","load_used_ids_from_github:22:(self, refresh_cache:bool = False)>None::","add_ids_to_model:64:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:load_used_ids_from_github:","add_ids_to_finding_model:94:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:add_ids_to_model:"]]}],"sr/findingmodel/tools/anatomic_location_search.py":["p",["ontology_search_tool:46:async (ctx:RunContext[SearchContext], query:str, limit:int = 10)>dict[str, Any]::","create_search_agent:70:(model_name:str)>Agent[SearchContext, RawSearchResults]::Create the search agent for generating queries and gathering results.","create_matching_agent:91:(model_name:str)>Agent[None, LocationSearchResponse]::Create the matching agent for picking best locations from search results.","find_anatomic_locations:116:async (finding_name:str, description:str | None = None, search_model:str | None = None, matching_model:str | None = None,)>LocationSearchResponse:create_matching_agent,create_search_agent:"],{"RawSearchResults":["24",[]],"LocationSearchResponse":["31",[]],"SearchContext":["40",[]]}],"sr/findingmodel/tools/common.py":["p",["get_async_instructor_client:13:()>AsyncInstructor::","get_async_perplexity_client:18:()>AsyncOpenAI::","get_openai_model:25:(model_name:str)>OpenAIModel::Helper function to get OpenAI model instance - moved from similar_finding_mod...","get_markdown_text_from_path_or_text:35:(*, markdown_text:str | None = None, markdown_path:str | Path | None = None)>str::"]],"sr/findingmodel/tools/create_stub.py":["p",["create_model_stub_from_info:9:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_change_element,create_presence_element:","create_finding_model_stub_from_finding_info:65:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_model_stub_from_info:"]],"sr/findingmodel/tools/finding_description.py":["p",["create_info_from_name:12:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo::","add_details_to_info:33:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None::","describe_finding_name:69:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","get_detail_on_finding:82:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:","create_finding_info_from_name:96:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","add_details_to_finding_info:111:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:"]],"sr/findingmodel/tools/index_codes.py":["p",["_add_index_codes:11:(target:Codeable, name:str)>None::","add_standard_codes_to_model:26:(finding_model:FindingModelFull)>None:_add_index_codes:","add_standard_codes_to_finding_model:40:(finding_model:FindingModelFull)>None:add_standard_codes_to_model:"],{"Codeable":["7",[]]}],"sr/findingmodel/tools/markdown_in.py":["p",["create_model_from_markdown:19:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase::","create_finding_model_from_markdown:58:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase:create_model_from_markdown:"]],"sr/findingmodel/tools/ontology_search.py":["p",{"OntologySearchResult":["17",["as_index_code:25:(self)>IndexCode::Convert to IndexCode format"]],"OntologySearchClient":["39",["__init__:42:(self, lancedb_uri:str | None = None, api_key:str | None = None)>None::","connected:49:(self)>bool::Check if connected to LanceDB.","connect:53:async (self)>None::Connect to LanceDB and cache table references.","disconnect:80:(self)>None::Disconnect from LanceDB (synchronous).","search_tables:90:async (self, query:str, tables:list[str] | None = None, limit_per_table:int = 10)>dict[str, list[OntologySearchResult]]::Search across specified tables using hybrid search."]]}],"sr/findingmodel/tools/prompt_template.py":["p",["load_prompt_template:16:(template_file_name:str)>Template::","create_prompt_messages:27:(template:Template, **kwargs:Any)>list[ChatCompletionMessageParam]::"]],"sr/findingmodel/tools/similar_finding_models.py":["p",["search_models_tool:56:async (ctx:RunContext[SearchContext], query:str, limit:int = 5)>str::","create_search_agent:89:(openai_model:str)>Agent[SearchContext, SearchStrategy]::Create the search agent for gathering comprehensive results.","create_term_generation_agent:121:(openai_model:str)>Agent[None, SearchTerms]::Create a lightweight agent for generating search terms.","create_analysis_agent:154:(openai_model:str)>Agent[None, SimilarModelAnalysis]::Create the analysis agent for evaluating similarity and making recommendations.","find_similar_models:203:async (# noqa:C901 finding_name:str, description:str | None = None, synonyms:list[str] | None = None, index:Index | None = None, search_model:str | None = None, analysis_model:str | None = None,)>SimilarModelAnalysis:_generate_search_terms_with_fallback:","_generate_search_terms_with_fallback:349:async (term_prompt:str, search_model:str, finding_name:str)>list[str]:create_term_generation_agent:"],{"SearchResult":["25",[]],"SearchTerms":["34",[]],"SearchStrategy":["40",[]],"SearchContext":["50",[]],"SimilarModelAnalysis":["140",[]]}],"test/conftest.py":["p",["configure_test_logging:20:()>None::Configure logging for test session - runs once at start of session.","base_model:29:()>FindingModelBase::","full_model:56:()>FindingModelFull::","real_model:89:()>FindingModelFull::","real_model_markdown:97:()>str::","pe_fm_json:104:()>str::","tn_fm_json:111:()>str::","tn_markdown:118:()>str::","finding_info:125:()>FindingInfo::"]],"test/test_anatomic_location_search.py":["p",{"TestOntologySearchResult":["34",["test_as_index_code_known_table_radlex:37:(self)>None::Test as_index_code method with known table name: radlex.","test_as_index_code_known_table_anatomic_locations:50:(self)>None::Test as_index_code method with known table name: anatomic_locations.","test_as_index_code_known_table_snomedct:63:(self)>None::Test as_index_code method with known table name: snomedct.","test_as_index_code_unknown_table_fallback:76:(self)>None::Test as_index_code method with unknown table name uses fallback.","test_as_index_code_strips_newline_content:89:(self)>None::Test as_index_code strips content after newline.","test_as_index_code_strips_parenthetical_content:104:(self)>None::Test as_index_code strips parenthetical content at end.","test_as_index_code_strips_both_newline_and_parenthetical:119:(self)>None::Test as_index_code handles both newline and parenthetical content."]],"TestOntologySearchClient":["135",["test_initialization_with_defaults:138:(self)>None::Test basic initialization with default parameters.","test_initialization_with_custom_uri:146:(self)>None::Test initialization with custom URI.","test_initialization_with_custom_api_key:153:(self)>None::Test initialization with custom API key.","test_connected_property_initially_false:160:(self)>None::Test that connected property returns False initially.","test_uri_fallback_behavior:166:(self)>None::Test URI fallback behavior when None is provided.","test_api_key_fallback_behavior:175:(self)>None::Test API key fallback behavior when None is provided."]],"TestOntologyConstants":["185",["test_ontology_tables_contents:188:(self)>None::Test ONTOLOGY_TABLES contains exactly the expected tables.","test_table_to_index_code_system_mappings:195:(self)>None::Test TABLE_TO_INDEX_CODE_SYSTEM has correct mappings.","test_constants_consistency:202:(self)>None::Test that both constants are consistent with each other."]],"TestModels":["217",["test_location_search_response_max_alternates:220:(self)>None::Test that LocationSearchResponse enforces max 3 alternates - business rule va..."]],"TestOntologySearchTool":["241",["test_ontology_search_tool_success:245:async (self)>None::Test ontology_search_tool with successful search.","test_ontology_search_tool_error_handling:281:async (self)>None::Test ontology_search_tool error handling.","test_ontology_search_tool_empty_results:300:async (self)>None::Test ontology_search_tool with empty results."]],"TestAgentConfiguration":["319",["test_search_agent_configuration:322:(self)>None::Test that search agent is configured correctly with tools and system prompt.","test_matching_agent_configuration:340:(self)>None::Test that matching agent is configured correctly without tools."]],"TestFindAnatomicLocations":["357",["test_two_agent_workflow_success:361:async (self)>None::Test the two-agent workflow with controlled responses - tests our workflow lo...","test_workflow_handles_connection_errors:421:async (self)>None::Test that our workflow properly handles database connection failures.","test_workflow_handles_empty_search_results:439:async (self)>None::Test our workflow logic when search returns no results.","test_workflow_cleanup_on_exceptions:481:async (self)>None::Test that our workflow always performs cleanup even when exceptions occur.","test_workflow_with_custom_model_parameters:505:async (self)>None::Test that our workflow properly passes custom model parameters to agent creat...","test_find_anatomic_locations_integration:555:async (self)>None::Integration test with real LanceDB and AI agents."]],"TestEdgeCases":["601",["test_workflow_handles_empty_finding_name:605:async (self)>None::Test our workflow can handle edge case of empty finding name.","test_workflow_handles_very_long_input:638:async (self)>None::Test our workflow can handle edge case of very long inputs.","test_raw_search_results_empty_lists:673:(self)>None::Test RawSearchResults handles empty lists properly - edge case validation.","test_location_search_response_empty_alternates:680:(self)>None::Test LocationSearchResponse handles empty alternates properly - edge case val..."]]}],"test/test_contributor.py":["p",["clear_registries:13:()>Generator[None, None, None]::Clears the registries before each test to ensure isolation.","sample_org_oidm:23:()>dict[str, str]::","sample_org_acr:28:()>dict[str, str]::","sample_person_john:33:(sample_org_oidm:dict[str, str])>dict[str, str]::","sample_person_jane:45:(sample_org_acr:dict[str, str])>dict[str, str]::","test_organization_creation:60:(sample_org_oidm:dict[str, str])>None::","test_organization_duplicate_code:68:(sample_org_oidm:dict[str, str])>None::","test_organization_invalid_code_pattern:78:()>None::","test_organization_organizations_list:87:(sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_save_and_load_jsonl:102:(tmp_path:Path, sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_load_jsonl_file_not_found:125:(tmp_path:Path)>None::","test_person_creation:133:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_duplicate_github_username:141:(sample_person_john:dict[str, str])>None::","test_person_organization_property:156:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_organization_property_org_deleted_after_person_creation:164:(sample_person_john:dict[str, str])>None::","test_person_get_non_existent:174:()>None::","test_person_people_list:178:(sample_person_john:dict[str, str], sample_person_jane:dict[str, str])>None::","test_person_save_and_load_jsonl:193:(tmp_path:Path, sample_person_john:dict[str, str], sample_person_jane:dict[str, str], sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str],)>None::","test_person_load_jsonl_file_not_found:223:(tmp_path:Path)>None::"]],"test/test_findingmodel.py":["p",["test_choice_value:12:()>None::","test_choice_attribute:18:()>None::","test_numeric_attribute:33:()>None::","test_multichoice_attribute:48:()>None::","test_finding_model_base:60:(tmp_path)>None::","test_load_finding_model:92:(pe_fm_json:str)>None::","test_load_finding_model_with_codes:103:(tn_fm_json:str)>None::","test_load_finding_model_with_contributors:136:(tn_fm_json:str)>None::"]],"test/test_findingmodel_md.py":["p",["test_base_model_markdown:30:(base_model:FindingModelBase)>None::","test_full_model_markdown_with_ids:64:(full_model:FindingModelFull)>None::","test_full_model_markdown_hide_ids:71:(full_model:FindingModelFull)>None::","test_real_model_markdown:81:(real_model:FindingModelFull, real_model_markdown:str)>None::","test_real_model_markdown_with_codes:87:(tn_fm_json:str, tn_markdown:str)>None::"]],"test/test_index.py":["p",["is_mongodb_running:19:()>bool::","mongo_client:39:()>Iterator[AsyncIOMotorClient[Any]]::","test_db:46:async (mongo_client:AsyncIOMotorClient[Any])>AsyncIterator[AsyncIOMotorDatabase[Any]]::","index:53:async ()>AsyncIterator[Index]::","sample_model:62:()>FindingModelFull::","tmp_defs_path:93:(tmp_path:Path)>Path::Create a temporary path for test files.","populated_index:102:async (index:Index, tmp_defs_path:Path)>AsyncIterator[Index]::Populate the index with all *.fm.json files from test/data and test/data/defs.","test_add_and_retrieve_model:113:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_validate_model_no_duplicates:130:async (index:Index, sample_model:FindingModelFull)>None::","test_contains_method:136:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_count_method:152:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_populated_index_count:178:async (populated_index:Index)>None::","test_populated_index_retrieval:185:async (populated_index:Index)>None::","test_add_already_existing_model_unchanged:195:async (populated_index:Index)>None::","test_add_new_model:204:async (populated_index:Index, tmp_defs_path:Path)>None::","test_add_updated_model_file:215:async (populated_index:Index, tmp_defs_path:Path)>None::","test_remove_not_found_model:234:async (populated_index:Index, tmp_defs_path:Path)>None::","test_duplicate_oifm_id_fails_validation:255:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_name_fails_validation:263:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_attribute_id_fails_validation:271:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_update_from_directory:281:async (populated_index:Index, tmp_defs_path:Path)>None::Test the update_from_directory method with add, modify, and delete operations.","test_update_from_directory_empty_directory:340:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with an empty directory removes all entries.","test_update_from_directory_nonexistent_directory:363:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with a nonexistent directory raises ValueError.","test_index_initialization_with_client:371:(mongo_client:AsyncIOMotorClient[Any])>None::Test that the Index can be initialized with an existing client.","test_search_basic_functionality:383:async (populated_index:Index)>None::Test basic search functionality with populated index.","test_search_by_name:400:async (populated_index:Index)>None::Test search functionality by exact and partial name matches.","test_search_by_description:414:async (populated_index:Index)>None::Test search functionality using description content.","test_search_by_synonyms:426:async (populated_index:Index)>None::Test search functionality using synonyms.","test_search_limit_parameter:436:async (populated_index:Index)>None::Test that search respects the limit parameter.","test_search_no_results:451:async (populated_index:Index)>None::Test search with query that should return no results.","test_search_empty_query:459:async (populated_index:Index)>None::Test search behavior with empty query.","test_search_case_insensitive:467:async (populated_index:Index)>None::Test that search is case insensitive.","test_search_multiple_terms:478:async (populated_index:Index)>None::Test search with multiple terms.","test_search_with_empty_index:492:async (index:Index)>None::Test search functionality with empty index.","test_mongodb_connection_failure:501:async ()>None::Test Index behavior when MongoDB connection fails.","test_add_entry_with_invalid_json_file:515:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid JSON.","test_add_entry_with_nonexistent_file:527:async (index:Index, tmp_path:Path)>None::Test error handling when adding nonexistent file.","test_add_entry_with_invalid_model_data:537:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid model data.","test_batch_operation_partial_failure:555:async (index:Index, tmp_path:Path, sample_model:FindingModelFull)>None::Test behavior when batch operations partially fail.","test_concurrent_index_operations:577:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None:add_file:Test Index behavior under concurrent operations.","test_search_with_mongodb_error:612:async (index:Index)>None::Test search behavior when MongoDB has issues.","test_large_query_handling:622:async (index:Index)>None::Test Index behavior with very large search queries."]],"test/test_tools.py":["p",["test_create_stub:15:(finding_info:FindingInfo)>None::Test creating a stub finding model from a FindingInfo object.","test_add_ids_to_finding_model:27:(base_model:FindingModelBase)>None::Test adding IDs to a finding model.","test_add_ids_with_empty_cache:48:(base_model:FindingModelBase)>None::Test adding IDs when cache is empty (first call).","test_add_ids_with_populated_cache:73:(base_model:FindingModelBase)>None::Test adding IDs when cache already has data (avoids duplicate IDs).","test_add_ids_uses_cache_on_second_call:101:(base_model:FindingModelBase)>None::Test that second call uses cache and doesn't make HTTP request.","test_add_ids_handles_http_timeout:124:(base_model:FindingModelBase)>None::Test that function handles HTTP timeout gracefully.","test_add_ids_handles_http_error:140:(base_model:FindingModelBase)>None::Test that function handles HTTP errors gracefully.","test_add_ids_refresh_cache:156:(base_model:FindingModelBase)>None::Test forcing cache refresh.","test_load_used_ids_from_github_directly:177:()>None::Test the load_used_ids_from_github function directly.","test_load_used_ids_with_custom_url:201:()>None::Test load_used_ids_from_github with custom URL.","test_add_index_codes_to_finding_model:219:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_add_index_codes_to_finding_model_no_duplicates:241:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_create_model_stub_from_info_new_api:254:(finding_info:FindingInfo)>None::Test creating a stub finding model using the new function name.","test_add_ids_to_model_new_api:266:(base_model:FindingModelBase)>None::Test adding IDs to a finding model using the new function name.","test_add_standard_codes_to_model_new_api:284:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name.","test_add_standard_codes_to_model_no_duplicates_new_api:306:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name (no duplicat...","test_create_info_from_name_integration:320:async ()>None::Integration test for create_info_from_name with real OpenAI API.","test_create_info_from_name_edge_cases:347:async ()>None::Test create_info_from_name with edge cases.","test_add_details_to_info_integration:364:async ()>None::Integration test for add_details_to_info with real Perplexity API.","test_create_model_from_markdown_integration:395:async ()>None::Integration test for create_model_from_markdown with real OpenAI API.","test_create_model_from_markdown_file_integration:455:async (tmp_path:Path)>None::Integration test for create_model_from_markdown using file input.","test_ai_tools_error_handling:496:async ()>None::Test AI tools error handling with invalid inputs.","test_ai_tools_consistency:516:async ()>None::Test that AI tools produce consistent results for the same input.","test_find_similar_models_basic_functionality:535:()>None::Test basic functionality of find_similar_models without API calls.","test_find_similar_models_integration:562:async ()>None::Integration test for find_similar_models with real OpenAI API.","test_find_similar_models_edge_cases:588:async ()>None::Test find_similar_models with edge cases.","test_add_ids_network_timeout_handling:618:(base_model:FindingModelBase)>None::Test ID generation when GitHub API is unreachable.","test_add_ids_http_error_handling:637:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns HTTP error.","test_add_ids_invalid_response_data:656:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns invalid data.","test_ai_tools_api_key_missing:676:async ()>None::Test AI tools behavior when API keys are missing or invalid.","test_ai_tools_rate_limiting:720:async ()>None::Test AI tools behavior under rate limiting conditions.","test_ai_tools_malformed_response_handling:749:async ()>None::Test AI tools handling of malformed API responses.","test_tools_import_failures:777:()>None::Test graceful handling when optional dependencies are missing.","test_concurrent_id_generation:797:(base_model:FindingModelBase)>None:generate_ids:Test ID generation under concurrent access."]]},"g":[["Index.add_or_update_entry_from_file","_calculate_file_hash"],["Index._check_attribute_id_conflict","Person.get"],["ReleaseManager.get_current_version","run_command"],["test_concurrent_id_generation","generate_ids"],["Index.validate_model","Index.validate_models_batch"],["ReleaseManager.check_git_status","run_command"],["add_standard_codes_to_model","_add_index_codes"],["ReleaseManager.create_github_release","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","Person.get"],["Index._search_batch_individual","search"],["Index.update_from_directory","_execute_batch_operations"],["ReleaseManager.create_tag","ReleaseManager.run_command"],["Index._get_validation_data","Organization.get"],["Index._prepare_entries_for_batch","Index.add_or_update_contributors"],["Index.update_from_directory","Index._get_existing_file_info"],["Organization.get","Organization.get"],["Index.update_from_directory","Index._determine_operations"],["IdManager.add_ids_to_finding_model","IdManager.add_ids_to_model"],["Index.to_markdown","Index.count"],["Index.validate_models_batch","_check_id_conflict"],["ReleaseManager.run_tests","ReleaseManager.confirm"],["Index._check_attribute_id_conflict","Index.get"],["ReleaseManager.update_version","ReleaseManager.validate_version"],["Index.add_or_update_entry_from_file","Index._entry_from_model_file"],["ReleaseManager.check_branch","ReleaseManager.run_command"],["Index._prepare_entries_for_batch","add_or_update_contributors"],["ReleaseManager.release","_should_skip_step"],["ReleaseManager.run_tests","confirm"],["Index.validate_model","validate_models_batch"],["Index.get","_id_or_name_or_syn_query"],["ReleaseManager.update_version","run_command"],["IdManager.add_ids_to_finding_model","add_ids_to_model"],["describe_finding_name","create_info_from_name"],["ReleaseManager.update_version","check_existing_tag"],["Index.validate_models_batch","Index._check_id_conflict"],["ReleaseManager.update_version","validate_version"],["ReleaseManager.release","print_summary"],["add_details_to_finding_info","add_details_to_info"],["ReleaseManager.release","ReleaseManager.handle_error"],["ReleaseManager.publish_pypi","ReleaseManager.run_command"],["Index.update_from_directory","_determine_operations"],["Person.organization","Organization.get"],["ReleaseManager.check_existing_tag","run_command"],["ReleaseManager.run_tests","run_command"],["Index._entry_from_model_file","Index._calculate_file_hash"],["Index.search_batch","_search_batch_combined"],["Index.search_batch","Index._search_batch_combined"],["Index._prepare_entries_for_batch","Index._entry_from_model_file"],["ReleaseManager.release","ReleaseManager._get_release_steps"],["Index._check_attribute_id_conflict","get"],["ReleaseManager.create_github_release","run_command"],["Index._search_batch_individual","Index.search"],["ReleaseManager.build_packages","ReleaseManager.run_command"],["ReleaseManager.merge_to_main","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","_entry_from_model_file"],["Index.to_markdown","count"],["ReleaseManager.run_checks","run_command"],["generate_oifma_id","_random_digits"],["Person.get","Person.get"],["ReleaseManager.get_current_version","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","get"],["Index.update_from_directory","_get_local_file_info"],["create_finding_model_stub_from_finding_info","create_model_stub_from_info"],["create_finding_model_from_markdown","create_model_from_markdown"],["Index.update_from_directory","Index._prepare_entries_for_batch"],["ReleaseManager.check_git_status","ReleaseManager.run_command"],["ReleaseManager.create_github_release","ReleaseManager.confirm"],["Index._get_local_file_info","Index._calculate_file_hash"],["Index.update_from_directory","_prepare_entries_for_batch"],["get_detail_on_finding","add_details_to_info"],["ReleaseManager.update_version","ReleaseManager.get_current_version"],["Index.add_or_update_entry_from_file","Index.get"],["ChoiceAttributeIded.index_codes_str","_index_codes_str"],["Index.search_batch","Index._search_batch_individual"],["create_model_stub_from_info","create_change_element"],["ChoiceAttribute.fix_max_selected","fix_max_selected_validator"],["ReleaseManager.release","_get_release_steps"],["ReleaseManager.update_changelog","ReleaseManager.confirm"],["Index.update_from_directory","Index._get_local_file_info"],["ReleaseManager.create_github_release","confirm"],["ReleaseManager.release","ReleaseManager._execute_step"],["Person.get","get"],["Index.add_or_update_entry_from_file","validate_model"],["ReleaseManager.update_version","_setup_logging"],["ReleaseManager.update_version","ReleaseManager._setup_logging"],["ReleaseManager.post_release_cleanup","run_command"],["Person.get","Index.get"],["ReleaseManager.update_changelog","confirm"],["Person.organization","Person.get"],["create_finding_info_from_name","create_info_from_name"],["make_stub_model","_do_make_stub_model"],["Index._prepare_entries_for_batch","Index.validate_models_batch"],["Index.contains","Index._id_or_name_or_syn_query"],["Index._get_validation_data","Person.get"],["Index._prepare_entries_for_batch","_entry_from_model_file"],["Organization.get","Person.get"],["ReleaseManager.__init__","_setup_logging"],["ReleaseManager.__init__","ReleaseManager._setup_logging"],["Index.validate_models_batch","Index._check_attribute_id_conflict"],["Index.search_batch","_search_batch_individual"],["Index._search_batch_combined","Index._entry_matches_query"],["ReleaseManager.update_version","ReleaseManager.run_command"],["markdown_to_fm","print_info_truncate_detail"],["main","ReleaseManager.release"],["find_anatomic_locations","create_search_agent"],["Index._entry_from_model_file","_calculate_file_hash"],["main","release"],["ReleaseManager.release","handle_error"],["ReleaseManager.create_tag","run_command"],["ReleaseManager.commit_changes","ReleaseManager.run_command"],["strip_quotes_secret","strip_quotes"],["IndexEntry.match","IndexEntry.match"],["find_anatomic_locations","create_matching_agent"],["Index._get_validation_data","get"],["Index.update_from_directory","_get_existing_file_info"],["Index.add_or_update_entry_from_file","Index._calculate_file_hash"],["Index.validate_models_batch","Index._get_validation_data"],["Organization.get","get"],["ReleaseManager.publish_pypi","ReleaseManager.confirm"],["ReleaseManager.build_packages","run_command"],["ReleaseManager.merge_to_main","run_command"],["IndexEntry.match","match"],["Index._search_batch_combined","_entry_matches_query"],["ReleaseManager.release","ReleaseManager._should_skip_step"],["create_model_stub_from_info","create_presence_element"],["make_info","print_info_truncate_detail"],["Index._get_validation_data","Index.get"],["_generate_search_terms_with_fallback","create_term_generation_agent"],["ReleaseManager.update_version","ReleaseManager.check_existing_tag"],["Organization.get","Index.get"],["ReleaseManager.check_existing_tag","ReleaseManager.run_command"],["ReleaseManager.run_tests","ReleaseManager.run_command"],["NumericAttributeIded.index_codes_str","_index_codes_str"],["IdManager.add_ids_to_model","IdManager.load_used_ids_from_github"],["Index._prepare_entries_for_batch","validate_models_batch"],["ReleaseManager.check_branch","run_command"],["ReleaseManager.publish_pypi","confirm"],["Index._get_local_file_info","_calculate_file_hash"],["ReleaseManager.merge_to_main","ReleaseManager.confirm"],["ReleaseManager.update_version","get_current_version"],["Index._check_attribute_id_conflict","Organization.get"],["Index.update_from_directory","Index._execute_batch_operations"],["Index.add_or_update_entry_from_file","Index.validate_model"],["find_similar_models","_generate_search_terms_with_fallback"],["ReleaseManager.run_checks","ReleaseManager.run_command"],["Index.contains","_id_or_name_or_syn_query"],["test_concurrent_index_operations","add_file"],["Index.add_or_update_entry_from_file","Organization.get"],["Index.validate_models_batch","Index._check_name_conflict"],["IdManager.add_ids_to_model","load_used_ids_from_github"],["ReleaseManager.merge_to_main","confirm"],["model_file_name","normalize_name"],["make_info","_do_make_info"],["ChoiceValueIded.index_codes_str","_index_codes_str"],["markdown_to_fm","_do_markdown_to_fm"],["FindingModelFull.index_codes_str","_index_codes_str"],["Index.add_or_update_entry_from_file","Index.add_or_update_contributors"],["ReleaseManager.publish_pypi","run_command"],["ChoiceAttributeIded.fix_max_selected","fix_max_selected_validator"],["Person.get","Organization.get"],["Index.validate_models_batch","_check_attribute_id_conflict"],["Person.organization","get"],["ReleaseManager.release","_execute_step"],["ReleaseManager.post_release_cleanup","ReleaseManager.run_command"],["Index.validate_models_batch","_get_validation_data"],["Person.organization","Index.get"],["Index.get","Index._id_or_name_or_syn_query"],["add_standard_codes_to_finding_model","add_standard_codes_to_model"],["generate_oifm_id","_random_digits"],["Index.add_or_update_entry_from_file","add_or_update_contributors"],["Index.validate_models_batch","_check_name_conflict"],["ReleaseManager.commit_changes","run_command"],["ReleaseManager.release","ReleaseManager.print_summary"]],"d":{".github/copilot-instructions.md":["Copilot Instructions for FindingModel","Project Overview","Core Commands","Build & Package","Testing","Code Quality","CLI Usage","Architecture","Core Components","Data Models"],".serena/memories/anatomic_location_search_implementation.md":["Anatomic Location Search Implementation","Overview","Architecture Decisions","Two-Agent Pattern","Reusable Components","Testing Patterns Established","Pydantic AI Testing","Project Conventions","Key Implementation Details","Error Handling"],".serena/memories/api_integration.md":["API Integration and External Services","Required API Keys","OpenAI API","Perplexity API","MongoDB (Optional)","Configuration Management","Testing with External APIs","API Error Handling"],".serena/memories/code_style_conventions.md":["Code Style and Conventions","Python Version","Code Style","Code Patterns","Testing","Error Handling","Naming Conventions","File Organization"],".serena/memories/documentation_corrections_2025.md":["Documentation Corrections - January 2025","Overview","Major Corrections","1. Index Class Documentation","2. find_similar_models() Function","Wrong signature and behavior","Returns list of tuples (wrong)","Actual signature and behavior","Returns SimilarModelAnalysis object with:","- recommendation: \"edit_existing\", \"create_new\", or \"review_needed\""],".serena/memories/project_overview.md":["FindingModel Project Overview","Purpose","Tech Stack","Project Structure","Key Features"],".serena/memories/project_state_january_2025.md":["Project State - January 2025","Current Status","\u2705 All Tests Passing","\u2705 Code Quality","\u2705 Documentation","Recent Major Improvements","Test Suite Enhancements","Documentation Fixes","Code Quality Improvements","Known Working Commands"],".serena/memories/pydantic_ai_testing_best_practices.md":["Pydantic AI Testing Best Practices","Core Philosophy","Essential Patterns","1. Prevent Accidental API Calls","2. Use TestModel for Simple Testing","3. Use FunctionModel for Complex Behavior","4. Integration Test Pattern","Anti-Patterns to Avoid","\u274c Testing Library Functionality","BAD - tests Pydantic AI, not your code"],".serena/memories/suggested_commands.md":["Development Commands","Primary Commands (using Task)","Testing","Code Quality","Building","Alternative Commands (using uv directly)","Testing","Code Quality","Building","CLI Usage"],".serena/memories/task_completion_checklist.md":["Task Completion Checklist","1. Code Quality Checks (REQUIRED)","2. Run Tests (REQUIRED)","3. Test External APIs (if modified)","4. Verify Specific Changes","5. Check Git Status","Important Notes","When to Skip Checks"],".serena/memories/test_suite_improvements_2025.md":["Test Suite Improvements - January 2025","Overview","Added Test Coverage","1. Index.search() Functionality Tests (test_index.py)","2. AI Tools Integration Tests (test_tools.py)","3. find_similar_models() Coverage (test_tools.py)","4. Error Handling Tests","Linting Fixes Applied","Test Statistics","Running Tests"],"CHANGELOG.md":["Changelog","[Unreleased]","Added","Changed","Fixed","[0.3.2] - 2025-08-20","Added","Changed","Fixed","Removed"],"CLAUDE.md":["CLAUDE.md","Project Overview","Development Commands","Core Commands (using Task)","Run tests (excluding external API calls)","Run full test suite (including API integration tests)  ","Run specific test","Lint and format code","Build the package","Run all checks quietly"],"README.md":["`findingmodel` Package","CLI","Models","`FindingModelBase`","`FindingModelFull`","`FindingInfo`","Index","Basic Usage","> {'attributes': [{'attribute_id': 'OIFMA_MSFT_898601',",">                  'name': 'presence',"],"tasks/anatomic-location-search-implementation-plan.md":["Implementation Plan for Anatomic Location Search Tool","Current Status","Phase 1: Refactor Common Utilities \u2705 COMPLETED","Phase 2: Create Ontology Search Module \u2705 COMPLETED","Phase 3: Add LanceDB Configuration \u2705 COMPLETED","Phase 4: Implement Anatomic Location Search \u2705 COMPLETED","Phase 5: Testing \ud83d\udd04 IN PROGRESS - MAJOR ISSUES IDENTIFIED","Critical Issues Found (2025-08-29):"],"tasks/anatomic-location-search-prd.md":["PRD: Anatomic Location Search Tool for FindingModel","Overview","Core Architecture","1. Modular File Structure","2. Core Components","src/findingmodel/tools/ontology_search.py","Table constants","src/findingmodel/tools/common.py (add this function)"],"tasks/refactoring/01-index-decomposition.md":["Index Class Decomposition Plan","Executive Summary","Current State Analysis","Problems","Key Methods by Responsibility","Database Operations (10 methods)","Validation (6 methods)  ","File Operations (5 methods)","Search (4 methods)","Other (9 methods)"],"tasks/refactoring/02-api-cleanup.md":["API Cleanup and Deprecation Plan","Executive Summary","Current State Analysis","Duplicate Functions Identified","Problems","Target State","Naming Convention","Public API Structure","src/findingmodel/tools/__init__.py","Implementation Plan"],"tasks/refactoring/03-validation-framework.md":["Validation Framework Plan","Executive Summary","Current State Analysis","Problems with Current Validation","Target Architecture","Core Design Pattern: Chain of Responsibility","src/findingmodel/validation/base.py","Specific Validators","src/findingmodel/validation/validators/id_validator.py","src/findingmodel/validation/validators/name_validator.py"],"tasks/refactoring/04-circular-dependencies.md":["Breaking Circular Dependencies Plan","Executive Summary","Current State Analysis","Circular Dependency Map","Problems","Current problematic code","Person references Index directly","Target Architecture","Design Patterns Applied","New Architecture"],"tasks/refactoring/05-performance-optimizations.md":["Performance Optimizations Plan","Executive Summary","Current Performance Analysis","Identified Bottlenecks","Current: Multiple get() calls in validation","Current: Process files one by one","Current: Individual inserts in batch operations","Target Performance Improvements","Optimization Goals","Implementation Details"],"test/data/pulmonary_embolism.md":["Pulmonary embolism\u2014`OIFM_MSFT_932618`","Attributes","Presence\u2014`OIFMA_MSFT_463871`","Change from prior\u2014`OIFMA_MSFT_592864`","Other presence\u2014`OIFMA_MSFT_463872`","Size\u2014`OIFMA_MSFT_592865`"],"test/data/thyroid_nodule_codes.md":["Thyroid nodule\u2014`OIFM_MGB_274588`","Attributes","Presence\u2014`OIFMA_MGB_771712`","Size\u2014`OIFMA_MGB_337706`","Change from prior\u2014`OIFMA_MGB_337707`"]},"deps":{"notebooks/demo_anatomic_location_search.py":["asyncio","findingmodel.tools.anatomic_location_search","sys","findingmodel.config"],"notebooks/demo_find_similar.py":["dotenv","logfire","findingmodel","findingmodel.index","findingmodel.tools","findingmodel.tools.similar_finding_models","asyncio","sys"],"scripts/release.py":["argparse","hashlib","re","shutil","subprocess","sys","datetime","pathlib","typing","loguru"],"src/findingmodel/abstract_finding_model.py":["typing","findingmodel.finding_model"],"src/findingmodel/cli.py":["asyncio","pathlib","click","rich.console","rich.markdown"],"src/findingmodel/common.py":["re"],"src/findingmodel/config.py":["os","typing","openai","pydantic","pydantic_settings"],"src/findingmodel/contributor.py":["pathlib","typing","pydantic","typing_extensions"],"src/findingmodel/finding_info.py":["pydantic"],"src/findingmodel/finding_model.py":["random","re","enum","typing","pydantic","findingmodel.contributor"],"src/findingmodel/index.py":["hashlib","collections","enum","pathlib","typing","motor.motor_asyncio","pydantic","pymongo","findingmodel","findingmodel.common","findingmodel.config","findingmodel.contributor","findingmodel.finding_model"],"src/findingmodel/index_code.py":["pydantic"],"src/findingmodel/tools/add_ids.py":["time","httpx","findingmodel","findingmodel.finding_model","warnings"],"src/findingmodel/tools/anatomic_location_search.py":["json","dataclasses","typing","pydantic","pydantic_ai","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/common.py":["pathlib","instructor","openai","pydantic_ai.models.openai","pydantic_ai.providers.openai","findingmodel.config"],"src/findingmodel/tools/create_stub.py":["findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/finding_description.py":["warnings","findingmodel.config","findingmodel.finding_info"],"src/findingmodel/tools/index_codes.py":["typing","findingmodel.finding_model","findingmodel.index_code","warnings"],"src/findingmodel/tools/markdown_in.py":["pathlib","findingmodel.config","findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/ontology_search.py":["re","lancedb","pydantic","findingmodel","findingmodel.config","findingmodel.index_code"],"src/findingmodel/tools/prompt_template.py":["re","pathlib","typing","jinja2","openai.types.chat"],"src/findingmodel/tools/similar_finding_models.py":["json","dataclasses","typing","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.index","findingmodel.tools.common","time"],"test/conftest.py":["pathlib","pytest","findingmodel","findingmodel.finding_info","findingmodel.finding_model"],"test/test_anatomic_location_search.py":["unittest.mock","pytest","pydantic_ai","pydantic_ai.models.test","findingmodel.index_code","findingmodel.tools.anatomic_location_search","findingmodel.tools.ontology_search"],"test/test_contributor.py":["pathlib","typing","pytest","pydantic","findingmodel.contributor"],"test/test_findingmodel.py":["findingmodel.contributor","findingmodel.finding_model"],"test/test_findingmodel_md.py":["findingmodel"],"test/test_index.py":["json","shutil","socket","pathlib","typing","pytest","motor.motor_asyncio","pymongo.errors","findingmodel.finding_model","findingmodel.index","findingmodel.index","pymongo.errors","pydantic","asyncio"],"test/test_tools.py":["asyncio","pathlib","unittest.mock","httpx","pytest","findingmodel.tools","findingmodel","findingmodel.finding_model","findingmodel.index_code","findingmodel.tools.add_ids","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_model","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.tools","asyncio","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","os","pydantic","findingmodel","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_info","findingmodel.tools.create_stub","findingmodel.tools.add_ids","concurrent.futures"]},"dir_purposes":{".serena/memories":"Test files and test utilities","scripts":"Build and utility scripts","src/findingmodel":"Data models and schemas","src/findingmodel/tools":"Data models and schemas","test":"Test files and test utilities"},"staleness":1756067795.771091}