{"at":"2025-10-09T16:30:57.796985","root":".","tree":[".","\u251c\u2500\u2500 data/","\u251c\u2500\u2500 notebooks/ (10 files)","\u2502   \u2514\u2500\u2500 data/ (1 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 scripts/ (1 files)","\u251c\u2500\u2500 specs/","\u2502   \u2514\u2500\u2500 001-ai-based-finding/","\u2502       \u2514\u2500\u2500 contracts/","\u251c\u2500\u2500 src/ (28 files)","\u2502   \u2514\u2500\u2500 findingmodel/ (28 files)","\u2502       \u2514\u2500\u2500 tools/ (15 files)","\u2502           \u2514\u2500\u2500 prompt_templates/","\u251c\u2500\u2500 tasks/","\u2502   \u251c\u2500\u2500 done/","\u2502   \u2514\u2500\u2500 refactoring/","\u251c\u2500\u2500 test/ (19 files)","\u2502   \u2514\u2500\u2500 data/ (8 files)","\u2502       \u2514\u2500\u2500 defs/ (6 files)","\u251c\u2500\u2500 pyproject.toml"],"stats":{"total_files":57,"total_directories":25,"fully_parsed":{"python":48},"listed_only":{"json":9},"markdown_files":52},"f":{"notebooks/demo_anatomic_location_search.py":["p",["perform_search_stages:24:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","display_results_comparison:96:(original:list, reranked:list, limit:int = 10)>None::Display comparison of results before and after reranking.","_create_finding_info:125:(finding_name:str, description:Optional[str])>tuple[FindingInfo, str, float]:_async_create_finding_info:Create FindingInfo and return info, source, and timing.","_print_finding_info_stage:145:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_verbose_stages:159:(results:dict)>None:_print_ai_selection_stage,_print_cohere_stage:Print all verbose stage outputs.","_print_cohere_stage:188:(results:dict)>None:display_results_comparison:Print Cohere reranking stage output.","_print_ai_selection_stage:210:(results:dict)>None::Print AI selection stage output.","_print_summary:228:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_anatomic_location_search:245:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test anatomic location search with timing information.","check_configuration:292:()>bool::Check if the configuration is valid for running the tool.","parse_args:326:()>argparse.Namespace::Parse command-line arguments.","main:350:async ()>None:check_configuration,parse_args,test_anatomic_location_search:Main entry point for the anatomic location search tool."]],"notebooks/demo_bioontology_search.py":["p",["print_header:20:(text:str)>None::Print a formatted header.","print_section:27:(title:str)>None::Print a section title.","display_results:33:(results:list[BioOntologySearchResult], query:str, ontologies:list[str])>None:print_header:Display search results in a readable format.","demo_basic_search:51:async ()>None:display_results,print_section:Demonstrate basic search functionality.","demo_detailed_search:61:async ()>None:display_results,print_section:Demonstrate detailed search with specific parameters.","demo_semantic_type_filter:79:async ()>None:print_section:Demonstrate filtering by semantic type.","demo_multiple_ontologies:100:async ()>None:print_section:Demonstrate searching across multiple ontologies.","demo_pagination:123:async ()>None:print_section:Demonstrate pagination handling.","main:151:async ()>None:demo_basic_search,demo_detailed_search,demo_multiple_ontologies,demo_pagination,demo_semantic_type_filter,print_header:Main demonstration function."]],"notebooks/demo_edit_finding_model.py":["p",["_await_with_timer:64:async (coro:Awaitable[T], message:str)>T::","run_with_timer:81:(coro:Awaitable[T], message:str)>T:_await_with_timer,_runner:","load_model:88:(path:Path)>FindingModelFull::","save_model:93:(model:FindingModelFull, path:Path)>None::","render_rejections:97:(rejections:list[str])>None::","render_changes:107:(changes:list[str])>None::","display_current:118:(state:DemoState)>None::","explain_commands:123:()>None::","prompt_markdown_edit:155:(state:DemoState)>str | None::","prompt_command_text:172:(provided:list[str])>str::","apply_edit:187:(state:DemoState, result:EditResult, context:str)>None:display_current,mark_updated,render_changes,render_rejections:","handle_natural_language:206:(state:DemoState, text:str)>None:apply_edit,run_with_timer:","handle_markdown_edit:221:(state:DemoState)>None:apply_edit,prompt_markdown_edit,run_with_timer:","handle_save:239:(state:DemoState, maybe_path:list[str])>None:record_save,save_model:","_handle_command_input:255:(state:DemoState, args:list[str])>None:handle_natural_language,prompt_command_text:","_handle_reset:261:(state:DemoState, _:list[str])>None:display_current,reset:","handle_command:276:(state:DemoState, command:str, args:list[str])>bool::","run_session:288:(state:DemoState)>None:explain_commands,handle_command,handle_natural_language:","parse_args:321:()>argparse.Namespace:parse_args:","main:339:()>int:display_current,load_model,parse_args,run_session:"],{"DemoState":["37",["__init__:40:(self, model:FindingModelFull, save_path:Path)>None::","markdown:47:(self)>str::","mark_updated:50:(self, result:EditResult)>None::","reset:55:(self)>None::","record_save:59:(self)>None::"]]}],"notebooks/demo_edit_model_from_markdown.py":["p",["main:9:async ()>None::"]],"notebooks/demo_find_similar.py":["p",["main:10:async ()>SimilarModelAnalysis::"]],"notebooks/demo_ontology_concept_match.py":["p",["perform_search_stages:21:async (finding_info:FindingInfo)>dict::Perform the search in stages, returning results and timing for each.","display_results_comparison:112:(original:list, reranked:list, limit:int = 10)>None::Display comparison of results before and after reranking.","_print_finding_info_stage:144:(finding_info:FindingInfo, source:str, timing:float)>None::Print the finding info stage output.","_print_query_terms_stage:158:(results:dict)>None::Print query terms generation stage.","_print_bio_search_stage:167:(results:dict)>None::Print BioOntology search stage.","_print_cohere_rerank_stage:182:(results:dict)>None:display_results_comparison:Print Cohere reranking stage.","_print_categorization_stage:204:(results:dict)>None::Print AI categorization stage.","_print_final_output_stage:219:(results:dict)>None::Print final output building stage.","_print_verbose_stages:250:(results:dict)>None:_print_bio_search_stage,_print_categorization_stage,_print_cohere_rerank_stage,_print_final_output_stage,_print_query_terms_stage:Print all verbose stage outputs.","_print_summary:259:(finding_name:str, results:dict, total_time:float)>None::Print non-verbose summary output.","test_ontology_concept_match:285:async (finding_name:str, description:Optional[str] = None, verbose:bool = False)>None:_print_finding_info_stage,_print_summary,_print_verbose_stages,perform_search_stages:Test ontology concept matching with timing information.","check_configuration:330:()>bool::Check if the configuration is valid for running the tool.","parse_args:363:()>argparse.Namespace::Parse command-line arguments.","main:387:async ()>None:check_configuration,parse_args,test_ontology_concept_match:Main entry point for the ontology concept matching tool."]],"notebooks/migrate_anatomic_to_duckdb.py":["p",["create_searchable_text:25:(record:dict[str, Any])>str::","determine_sided:56:(record:dict[str, Any])>str::","create_database:88:(db_path:Path)>duckdb.DuckDBPyConnection::","load_json_data:128:(json_path:Path)>list[dict[str, Any]]::","process_and_insert_data:154:async (conn:duckdb.DuckDBPyConnection, records:list[dict[str, Any]], openai_client:AsyncOpenAI, batch_size:int = 50, # Smaller batches for embedding API)>tuple[int, int]:_insert_batch,create_searchable_text,determine_sided:","_insert_batch:267:(conn:duckdb.DuckDBPyConnection, batch:list[tuple])>None::","create_indexes:284:(conn:duckdb.DuckDBPyConnection)>None::","verify_database:333:(conn:duckdb.DuckDBPyConnection)>None::","main:395:async ()>None:create_database,create_indexes,load_json_data,process_and_insert_data,verify_database:Main migration function."]],"s/release.py":["p",["main:613:()>None:release:Main entry point."],{"ReleaseError":["36",[]],"ReleaseManager":["42",["__init__:47:(self, version:Optional[str] = None, dry_run:bool = False, yes:bool = False, check_only:bool = False)>None:_setup_logging:","_setup_logging:68:(self)>None::Configure loguru logging with file output.","run_command:95:(self, cmd:str, check:bool = True, capture_output:bool = True)>subprocess.CompletedProcess[str]::Execute a shell command with logging and optional dry-run.","confirm:129:(self, message:str)>bool::Get user confirmation unless --yes flag is used.","get_current_version:141:(self)>str:run_command:Read current version from pyproject.toml.","validate_version:166:(self, version:str)>bool::Validate version format (semantic versioning).","check_git_status:179:(self)>None:run_command:Ensure git working directory is clean.","check_branch:191:(self)>None:run_command:Ensure we're on dev branch and up to date.","check_existing_tag:216:(self, version:str)>None:run_command:Check if version tag already exists.","run_tests:226:(self)>None:confirm,run_command:Run the test suite.","run_checks:256:(self)>None:run_command:Run code quality checks.","update_version:266:(self)>None:_setup_logging,check_existing_tag,get_current_version,run_command,validate_version:Update version in pyproject.toml using uv.","update_changelog:287:(self)>None:confirm:Update CHANGELOG.md with release date.","clean_dist:322:(self)>None::Clean the dist directory of old builds.","build_packages:333:(self)>List[Path]:run_command:Build wheel and source distribution packages.","commit_changes:368:(self)>None:run_command:Commit version and changelog changes.","merge_to_main:388:(self)>None:confirm,run_command:Merge dev branch to main.","create_tag:406:(self)>None:run_command:Create and push git tag.","publish_pypi:419:(self)>None:confirm,run_command:Publish packages to PyPI using uv publish.","create_github_release:432:(self, built_files:List[Path])>None:confirm,run_command:Create GitHub release with artifacts.","post_release_cleanup:452:(self)>None:run_command:Switch back to dev branch and prepare for next development cycle.","print_summary:467:(self, built_files:List[Path])>None::Print release summary.","handle_error:494:(self, step_name:str, error:Exception)>None::Handle errors and provide recovery instructions.","_get_release_steps:522:(self)>list[tuple[str, str, Callable[..., Any]]]::Get the list of release steps.","_should_skip_step:541:(self, step_id:str)>bool::Check if step should be skipped in check-only mode.","_execute_step:557:(self, step_id:str, step_func:Callable[..., Any], built_files:List[Path])>List[Path]::Execute a single release step.","release:571:(self)>None:_execute_step,_get_release_steps,_should_skip_step,handle_error,print_summary:Execute the complete release process."]]}],"sr/findingmodel/abstract_finding_model.py":["p",{"AbstractNumericAttribute":["6",[]],"AbstractChoiceValue":["18",[]],"AbstractChoiceAttribute":["25",[]],"AbstractFindingModel":["36",["as_markdown:45:(self)>str::Render the finding model as a markdown string."]]}],"sr/findingmodel/cli.py":["p",["cli:21:()>None::","config:26:()>None::Show the currently active configuration.","print_info_truncate_detail:33:(console:Console, finding_info:FindingInfo)>None::","make_info:46:(finding_name:str, detailed:bool, output:Path | None)>None:_do_make_info,print_info_truncate_detail:Generate description/synonyms and more details/citations for a finding name.","make_stub_model:83:(finding_name:str, tags:list[str], with_codes:bool, with_ids:bool, source:str | None, output:Path | None)>None:_do_make_stub_model:Generate a simple finding model object (presence and change elements only) fr...","markdown_to_fm:124:(finding_path:Path, with_ids:bool, source:str | None, output:Path | None)>None:_do_markdown_to_fm,print_info_truncate_detail:Convert markdown file to finding model format.","fm_to_markdown:161:(finding_model_path:Path, output:Path | None)>None::Convert finding model JSON file to Markdown format."]],"sr/findingmodel/common.py":["p",["normalize_name:4:(name:str)>str::","model_file_name:12:(name:str)>str:normalize_name:Convert a finding model name to a file name."]],"sr/findingmodel/config.py":["p",["strip_quotes:12:(value:str)>str::","strip_quotes_secret:16:(value:str | SecretStr)>str:strip_quotes:"],{"ConfigurationError":["8",[]],"FindingModelConfig":["28",["check_ready_for_openai:75:(self)>Literal[True]::","check_ready_for_perplexity:80:(self)>Literal[True]::"]]}],"sr/findingmodel/contributor.py":["p",{"Organization":["16",["_register_org:24:(self)>Self::","get:32:(cls, code:str)>Self | None:get:","organizations:39:(cls)>list[Self]::","load_jsonl:46:(cls, jsonl_file:str | Path)>None::","save_jsonl:58:(cls, jsonl_file:str | Path)>None::"]],"Person":["68",["organization:78:(self)>Organization:get:","_register_person:87:(self)>Self::","get:95:(cls, username:str)>Self | None:get:","people:102:(cls)>list[Self]::","load_jsonl:109:(cls, jsonl_file:str | Path)>None::","save_jsonl:121:(cls, jsonl_file:str | Path)>None::"]]}],"sr/findingmodel/duckdb_index.py":["p",{"AttributeInfo":["33",[]],"IndexEntry":["41",["match:55:(self, identifier:str)>bool::Check if the identifier matches the ID, name, or synonyms."]],"_BatchPayload":["74",[]],"_RowData":["87",[]],"DuckDBIndex":["206",["__init__:209:(self, db_path:str | Path | None = None, *, read_only:bool = True)>None::","setup:215:async (self)>None:_create_search_indexes,_ensure_connection:Ensure the database exists, connection opened, and schema ready.","__aenter__:229:async (self)>DuckDBIndex:_ensure_connection:Enter async context manager, ensuring a connection is available.","__aexit__:240:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:TracebackType | None,)>None::Close the database connection when leaving the context.","contains:247:async (self, identifier:str)>bool:_ensure_connection,_resolve_oifm_id:Return True if an ID, name, or synonym exists in the index.","get:253:async (self, identifier:str)>IndexEntry | None:_ensure_connection,_fetch_index_entry,_resolve_oifm_id:Retrieve an index entry by ID, name, or synonym.","count:262:async (self)>int:_ensure_connection:Return the number of finding models in the index.","count_people:269:async (self)>int:_ensure_connection:Return the number of people in the normalized table.","count_organizations:276:async (self)>int:_ensure_connection:Return the number of organizations in the normalized table.","get_person:283:async (self, github_username:str)>Person | None:_ensure_connection:Retrieve a person by GitHub username.","get_organization:305:async (self, code:str)>Organization | None:_ensure_connection:Retrieve an organization by code.","add_or_update_entry_from_file:327:async (self, filename:str | Path, model:FindingModelFull | None = None, *, allow_duplicate_synonyms:bool = False,)>IndexReturnType:_build_embedding_text,_build_search_text,_calculate_file_hash,_create_search_indexes,_delete_denormalized_records,_drop_search_indexes,_ensure_openai_client,_ensure_writable_connection,_replace_attributes,_replace_synonyms,_replace_tags,_upsert_contributors,_validate_model,setup:Insert or update a finding model from a `.fm.json` file.","_collect_directory_files:422:(self, directory:Path)>list[tuple[str, str, Path]]:_calculate_file_hash:","_stage_directory_files:429:(self, conn:duckdb.DuckDBPyConnection, files:Sequence[tuple[str, str, Path]])>None::","_classify_directory_changes:442:(self, conn:duckdb.DuckDBPyConnection,)>tuple[set[str], dict[str, str], set[str]]::","_prepare_batch_payload:480:async (self, filenames_to_process:Sequence[str], files_by_name:Mapping[str, tuple[str, Path]], updated_entries:Mapping[str, str], removed_ids:Iterable[str], *, allow_duplicate_synonyms:bool = False,)>_BatchPayload:_build_row_data,_generate_embeddings,_load_models_metadata:","_execute_batch_directory_update:508:(self, conn:duckdb.DuckDBPyConnection, payload:_BatchPayload)>None:_apply_batch_mutations,_create_search_indexes,_drop_search_indexes:","_load_models_metadata:534:(self, filenames_to_process:Sequence[str], files_by_name:Mapping[str, tuple[str, Path]], *, allow_duplicate_synonyms:bool = False,)>tuple[list[tuple[FindingModelFull, str, str, str]], list[str]]:_build_embedding_text,_build_search_text,_validate_model:","_generate_embeddings:554:async (self, embedding_payloads:Sequence[str])>list[list[float]]:_ensure_openai_client:","_build_row_data:572:(self, metadata:Sequence[tuple[FindingModelFull, str, str, str]], embeddings:Sequence[list[float]],)>_RowData::","_apply_batch_mutations:646:(self, conn:duckdb.DuckDBPyConnection, payload:_BatchPayload)>None:_delete_denormalized_records:","update_from_directory:777:async (self, directory:str | Path, *, allow_duplicate_synonyms:bool = False,)>dict[str, int]:_classify_directory_changes,_collect_directory_files,_ensure_writable_connection,_execute_batch_directory_update,_prepare_batch_payload,_stage_directory_files,setup:Batch-update the index to match the contents of a directory.","remove_entry:838:async (self, oifm_id:str)>bool:_create_search_indexes,_delete_denormalized_records,_drop_search_indexes,_ensure_writable_connection,setup:Remove a finding model by ID.","search:866:async (self, query:str, *, limit:int = 10, tags:Sequence[str] | None = None,)>list[IndexEntry]:_ensure_connection,_search_exact,_search_fts,_search_semantic:Search for finding models, returning exact matches if present.","_ensure_connection:898:(self)>duckdb.DuckDBPyConnection::","_ensure_writable_connection:905:(self)>duckdb.DuckDBPyConnection:_ensure_connection:","_ensure_openai_client:910:async (self)>AsyncOpenAI::","_fetch_index_entry:916:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str)>IndexEntry | None:_collect_contributors:","_collect_contributors:963:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str)>list[str]::","_resolve_oifm_id:980:(self, conn:duckdb.DuckDBPyConnection, identifier:str)>str | None::","_upsert_contributors:1015:(self, conn:duckdb.DuckDBPyConnection, model:FindingModelFull)>None::","_replace_synonyms:1076:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str, synonyms:Sequence[str] | None,)>None::","_replace_tags:1089:(self, conn:duckdb.DuckDBPyConnection, oifm_id:str, tags:Sequence[str] | None,)>None::","_replace_attributes:1097:(self, conn:duckdb.DuckDBPyConnection, model:FindingModelFull)>None::","_build_search_text:1122:(self, model:FindingModelFull)>str::","_build_embedding_text:1133:(self, model:FindingModelFull)>str::","_validate_model:1147:(self, model:FindingModelFull)>list[str]::Placeholder until validation is ported in later steps.","_calculate_file_hash:1153:(self, filename:Path)>str::","_search_exact:1164:(self, conn:duckdb.DuckDBPyConnection, query:str, *, tags:Sequence[str] | None = None,)>list[IndexEntry]:_entry_has_tags,_fetch_index_entry,_resolve_oifm_id:","_entry_has_tags:1178:(self, entry:IndexEntry, tags:Sequence[str])>bool::","_search_fts:1189:(self, conn:duckdb.DuckDBPyConnection, query:str, *, limit:int, tags:Sequence[str] | None = None,)>list[tuple[IndexEntry, float]]:_entry_has_tags,_fetch_index_entry:","_delete_denormalized_records:1235:(self, conn:duckdb.DuckDBPyConnection, oifm_ids:Sequence[str],)>None::","_create_search_indexes:1248:(self, conn:duckdb.DuckDBPyConnection)>None::","_drop_search_indexes:1254:(self, conn:duckdb.DuckDBPyConnection)>None::","_search_semantic:1267:async (self, conn:duckdb.DuckDBPyConnection, query:str, *, limit:int, tags:Sequence[str] | None = None,)>list[tuple[IndexEntry, float]]:_ensure_openai_client,_entry_has_tags,_fetch_index_entry:"]]}],"sr/findingmodel/finding_info.py":["p",{"FindingInfo":["4",[]]}],"sr/findingmodel/finding_model.py":["p",["_random_digits:36:(length:int)>str::","generate_oifma_id:40:(source:str)>str:_random_digits:","_index_codes_str:69:(index_codes:Iterable[IndexCode] | None)>str | None::","fix_max_selected_validator:122:(cls, data:dict[str, Any])>dict[str, Any]::","generate_oifm_id:338:(source:str)>str:_random_digits:"],{"ChoiceValue":["44",[]],"ChoiceValueIded":["73",["index_codes_str:84:(self)>str | None:_index_codes_str:"]],"ChoiceAttribute":["133",["fix_max_selected:148:(cls, data):fix_max_selected_validator:"]],"ChoiceAttributeIded":["152",["fix_max_selected:164:(cls, data):fix_max_selected_validator:","add_value_codes:169:(cls, data)::Add the value codes to the choice values if they are not already present.","index_codes_str:189:(self)>str | None:_index_codes_str:"]],"NumericAttribute":["217",[]],"NumericAttributeIded":["230",["index_codes_str:243:(self)>str | None:_index_codes_str:"]],"FindingModelBase":["302",["as_markdown:316:(self)>str::"]],"FindingModelFull":["345",["as_markdown:361:(self, hide_ids:bool = False)>str::","index_codes_str:398:(self)>str | None:_index_codes_str:"]]}],"sr/findingmodel/index.py":["p",{"AttributeInfo":["18",[]],"IndexEntry":["26",["match:40:(self, name_or_id_or_synonym:str)>bool:match:"]],"Index":["60",["__init__:70:(self, *, mongodb_uri:str | None = None, db_name:str | None = None, client:AsyncIOMotorClient[Any] | None = None, branch:str = \"main\",)>None::","setup_indexes:92:async (self)>None::","count:143:async (self)>int::Returns the number of entries in the index.","count_people:147:async (self)>int::Returns the number of people in the people collection.","count_organizations:151:async (self)>int::Returns the number of organizations in the organizations collection.","_id_or_name_or_syn_query:155:(self, id_or_name_or_syn:str)>dict[str, Any]::Helper method to create a query for ID, name, or synonym.","contains:165:async (self, id_or_name_or_syn:str)>bool:_id_or_name_or_syn_query:Checks if an ID or name exists in the index.","get:171:async (self, id_or_name_or_syn:str)>IndexEntry | None:_id_or_name_or_syn_query:Retrieves an IndexEntry by its ID, name, or synonym.","get_person:179:async (self, github_username:str)>Person | None::Retrieve a Person by github_username.","get_organization:186:async (self, code:str)>Organization | None::Retrieve an Organization by code.","_calculate_file_hash:193:(self, filename:str | Path)>str::Calculates the SHA-256 hash of a file.","_entry_from_model_file:206:(self, model:FindingModelFull, filepath:str | Path, file_hash:str | None = None)>IndexEntry:_calculate_file_hash:Creates an IndexEntry from a FindingModelFull object and a filename.","_get_validation_data:240:async (self)>tuple[dict[str, str], dict[str, str], dict[str, str]]:get:Get dicts for validation: name->oifm_id, attr_id->oifm_id, oifm_id->filename.","_check_id_conflict:257:(self, oifm_id:str, name_fold:str, oifm_to_name:dict[str, str], exclude_oifm_id:str | None)>str | None::Check for ID conflicts.","_check_name_conflict:267:(self, name_fold:str, name_to_oifm:dict[str, str], batch_names:dict[str, str], exclude_oifm_id:str | None)>list[str]::Check for name conflicts.","_check_attribute_id_conflict:287:(self, aid:str, oifm_id:str, attrid_to_oifm:dict[str, str], batch_attrids:dict[str, str], oifm_to_filename:dict[str, str], exclude_oifm_id:str | None,)>list[str]:get:Check for attribute ID conflicts.","validate_models_batch:303:async (self, models:list[tuple[FindingModelFull, str | None]], allow_duplicate_synonyms:bool = False)>dict[str, list[str]]:_check_attribute_id_conflict,_check_id_conflict,_check_name_conflict,_get_validation_data:Validate multiple models efficiently with detailed conflict info.","validate_model:340:async (self, model:FindingModelFull, allow_duplicate_synonyms:bool = False, exclude_oifm_id:str | None = None)>list[str]:validate_models_batch:Validates a FindingModelFull object using the new batch validation logic.","add_or_update_contributors:344:async (self, contributors:list[Person | Organization])>list[str] | None::","add_or_update_entry_from_file:423:async (self, filename:str | Path, model:FindingModelFull | None = None, allow_duplicate_synonyms:bool = False)>IndexReturnType:_calculate_file_hash,_entry_from_model_file,add_or_update_contributors,get,validate_model:Adds a FindingModelFull object to the index.","remove_entry:457:async (self, id_or_name:str)>bool::Removes an entry from the index by its ID or name.","remove_unused_entries:463:async (self, active_filenames:Iterable[str])>Iterable[str]::","search:486:async (self, query:str, limit:int = 10)>list[IndexEntry]::","search_batch:502:async (self, queries:list[str], limit_per_query:int = 10)>dict[str, list[IndexEntry]]:_search_batch_combined,_search_batch_individual:","_search_batch_combined:524:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:_entry_matches_query:Attempt to search all queries in a single MongoDB call using $or.","_search_batch_individual:557:async (self, queries:list[str], limit_per_query:int)>dict[str, list[IndexEntry]]:search:Fallback: perform individual searches for each query.","_entry_matches_query:570:(self, entry:IndexEntry, query:str)>bool::","_get_existing_file_info:589:async (self)>dict[str, dict[str, str]]::Get all existing filename/hash/oifm_id pairs from the database.","_get_local_file_info:597:(self, file_paths:list[Path])>dict[str, dict[str, Any]]:_calculate_file_hash:Get all filename/hash pairs from the local directory.","_determine_operations:608:(self, local_files:dict[str, dict[str, Any]], existing_entries:dict[str, dict[str, str]])>tuple[list[tuple[str, dict[str, Any]]], list[tuple[str, dict[str, Any], str]], list[tuple[str, str]], int]::Determine what operations need to be performed.","_prepare_entries_for_batch:640:async (self, to_insert:list[tuple[str, dict[str, Any]]], to_update:list[tuple[str, dict[str, Any], str]], allow_duplicate_synonyms:bool,)>tuple[list[dict[str, Any]], list[tuple[str | None, dict[str, Any]]]]:_entry_from_model_file,add_or_update_contributors,validate_models_batch:Prepare IndexEntry objects for batch operations.","_execute_batch_operations:698:async (self, to_remove:list[tuple[str, str]], update_entries:list[tuple[str | None, dict[str, Any]]], insert_entries:list[dict[str, Any]],)>None::Execute the batch database operations.","update_from_directory:725:async (self, directory:str | Path, allow_duplicate_synonyms:bool = False)>tuple[int, int, int]:_determine_operations,_execute_batch_operations,_get_existing_file_info,_get_local_file_info,_prepare_entries_for_batch:","to_markdown:772:async (self)>str:count:Converts the index to a Markdown table."]]}],"sr/findingmodel/index_code.py":["p",{"IndexCode":["4",[]]}],"sr/findingmodel/tools/add_ids.py":["p",{"IdManager":["18",["__init__:19:(self, url:str | None = None)>None::","load_used_ids_from_github:24:(self, refresh_cache:bool = False)>None::","add_ids_to_model:66:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:load_used_ids_from_github:","add_ids_to_finding_model:96:(self, finding_model:FindingModelBase, source:str,)>FindingModelFull:add_ids_to_model:","finalize_placeholder_attribute_ids:112:(self, finding_model:FindingModelFull, source:str | None = None,)>FindingModelFull:_generate_unique_oifma,_resolve_source,load_used_ids_from_github:","_resolve_source:157:(source:str | None, model_id:str)>str:_validate_source:","_validate_source:166:(source:str)>str::","_generate_unique_oifma:173:(source:str, existing:set[str])>str::"]]}],"sr/findingmodel/tools/anatomic_location_search.py":["p",["generate_anatomic_query_terms:44:async (finding_name:str, finding_description:str | None = None, model:str | None = None)>AnatomicQueryTerms::","execute_anatomic_search:115:async (query_info:AnatomicQueryTerms, client:OntologySearchProtocol, limit:int = 30)>list[OntologySearchResult]::","create_location_selection_agent:163:(model:str | None = None)>Agent[None, LocationSearchResponse]::","find_anatomic_locations:204:async (finding_name:str, description:str | None = None, use_duckdb:bool = True,)>LocationSearchResponse:create_location_selection_agent,execute_anatomic_search,generate_anatomic_query_terms:"],{"AnatomicQueryTerms":["29",[]],"LocationSearchResponse":["155",[]]}],"sr/findingmodel/tools/common.py":["p",["get_async_instructor_client:14:()>AsyncInstructor::","get_async_perplexity_client:19:()>AsyncOpenAI::","get_openai_model:26:(model_name:str)>OpenAIModel::Helper function to get OpenAI model instance - moved from similar_finding_mod...","get_embedding:36:async (text:str, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512)>list[float] | None::","get_embeddings_batch:67:async (texts:list[str], client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int = 512)>list[list[float] | None]::","get_markdown_text_from_path_or_text:101:(*, markdown_text:str | None = None, markdown_path:str | Path | None = None)>str::"]],"sr/findingmodel/tools/create_stub.py":["p",["create_model_stub_from_info:9:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_change_element,create_presence_element:","create_finding_model_stub_from_finding_info:65:(finding_info:FindingInfo, tags:list[str] | None = None)>FindingModelBase:create_model_stub_from_info:"]],"sr/findingmodel/tools/duckdb_search.py":["p",{"DuckDBOntologySearchClient":["14",["__init__:17:(self, db_path:str | None = None)>None::","__aenter__:30:async (self)>\"DuckDBOntologySearchClient\"::Enter async context.","__aexit__:48:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Exit async context.","search:59:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:_search_single:","search_parallel:98:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:_search_single:","search_with_filters:138:async (self, queries:list[str], region:str | None = None, sided_filter:list[str] | None = None, limit_per_query:int = 30,)>list[OntologySearchResult]:_search_single_with_filters:","_search_single:174:async (self, query:str, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result,search:","_find_exact_matches:242:(self, query:str, where_clause:str | None = None, params:list[Any] | None = None)>list[OntologySearchResult]:_row_to_result:","_row_to_result:299:(self, row:tuple[Any, ...], score:float)>OntologySearchResult::","_apply_rrf_fusion:321:(self, fts_results:list[tuple[Any, ...]], vector_results:list[tuple[Any, ...]], limit:int,)>list[tuple[Any, ...]]::","_combine_with_exact_matches:361:(self, exact_matches:list[OntologySearchResult], other_results:list[OntologySearchResult], limit:int)>list[OntologySearchResult]::","_search_single_with_filters:389:async (self, query:str, region:str | None = None, sided_filter:list[str] | None = None, limit:int = 30)>list[OntologySearchResult]:_apply_rrf_fusion,_combine_with_exact_matches,_find_exact_matches,_get_embedding,_row_to_result:","_get_embedding:471:async (self, text:str)>list[float] | None::"]]}],"sr/findingmodel/tools/duckdb_utils.py":["p",["setup_duckdb_connection:25:(db_path:Path | str, *, read_only:bool = True, extensions:Iterable[str] = _DEFAULT_EXTENSIONS,)>duckdb.DuckDBPyConnection::Create a DuckDB connection with the standard extensions loaded.","get_embedding_for_duckdb:46:async (text:str, *, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int | None = None,)>list[float] | None:_to_float32:Generate a float32 embedding suitable for DuckDB storage.","batch_embeddings_for_duckdb:69:async (texts:Sequence[str], *, client:AsyncOpenAI | None = None, model:str | None = None, dimensions:int | None = None,)>list[list[float] | None]:_to_float32:Generate float32 embeddings for several texts in a single API call.","normalize_scores:90:(scores:Sequence[float])>list[float]::Min-max normalise scores to the [0, 1] range.","weighted_fusion:112:(results_a:Sequence[ScoreTuple], results_b:Sequence[ScoreTuple], *, weight_a:float = 0.3, weight_b:float = 0.7, normalise:bool = True,)>list[ScoreTuple]:normalize_scores:Combine two result sets using weighted score fusion.","rrf_fusion:145:(results_a:Sequence[ScoreTuple], results_b:Sequence[ScoreTuple], *, k:int = 60, weight_a:float = 0.5, weight_b:float = 0.5,)>list[ScoreTuple]::Combine two result sets using Reciprocal Rank Fusion (RRF).","l2_to_cosine_similarity:163:(l2_distance:float)>float::Convert an L2 distance to an approximate cosine similarity.","_to_float32:168:(values:Sequence[float])>list[float]::Convert an iterable of floats to 32-bit precision."]],"sr/findingmodel/tools/finding_description.py":["p",["_render_finding_description_prompt:18:(finding_name:str)>tuple[str, str]::Render the system instructions and user prompt for the finding description ag...","create_info_from_name:37:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:_create_finding_info_agent,_normalize_finding_info,_render_finding_description_prompt:","_normalize_finding_info:58:(finding_info:FindingInfo, *, original_input:str)>FindingInfo::Trim whitespace, deduplicate synonyms, and ensure the original term is preser...","_create_finding_info_agent:91:(model_name:str, instructions:str)>Agent[None, FindingInfo]::Factory to build the finding info agent, extracted for easier testing overrides.","add_details_to_info:103:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None::","describe_finding_name:139:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","get_detail_on_finding:152:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:","create_finding_info_from_name:166:async (finding_name:str, model_name:str = settings.openai_default_model)>FindingInfo:create_info_from_name:","add_details_to_finding_info:181:async (finding:FindingInfo, model_name:str = settings.perplexity_default_model)>FindingInfo | None:add_details_to_info:"]],"sr/findingmodel/tools/index_codes.py":["p",["_add_index_codes:11:(target:Codeable, name:str)>None::","add_standard_codes_to_model:26:(finding_model:FindingModelFull)>None:_add_index_codes:","add_standard_codes_to_finding_model:40:(finding_model:FindingModelFull)>None:add_standard_codes_to_model:"],{"Codeable":["7",[]]}],"sr/findingmodel/tools/markdown_in.py":["p",["create_model_from_markdown:19:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase::","create_finding_model_from_markdown:58:async (finding_info:FindingInfo, /, markdown_path:str | Path | None = None, markdown_text:str | None = None, openai_model:str = settings.openai_default_model,)>FindingModelBase:create_model_from_markdown:"]],"sr/findingmodel/tools/model_editor.py":["p",["_combine_instruction_sections:29:(*sections:str)>str::","_common_editing_instructions:33:()>str:_combine_instruction_sections:","_natural_language_instructions:59:()>str:_combine_instruction_sections:","_edited_text_instructions:67:()>str:_combine_instruction_sections:","create_edit_agent:77:()>Agent[EditDeps, EditResult]:_basic_edit_validation,_combine_instruction_sections,_common_editing_instructions,_natural_language_instructions,_normalize_new_attribute_ids,_validate_output:","create_markdown_edit_agent:110:()>Agent[EditDeps, EditResult]:_basic_edit_validation,_combine_instruction_sections,_common_editing_instructions,_edited_text_instructions,_normalize_new_attribute_ids,_validate_output:","edit_model_natural_language:150:async (model:FindingModelFull, command:str, *, agent:Agent[EditDeps, EditResult] | None = None)>EditResult:create_edit_agent:","_render_top_metadata_lines:176:(model:FindingModelFull)>list[str]::","_render_attribute_lines:203:(attr:object)>list[str]::Render a single attribute in the simple Markdown format expected by tests.","export_model_for_editing:244:(model:FindingModelFull, *, attributes_only:bool = False)>str:_render_attribute_lines,_render_top_metadata_lines:","edit_model_markdown:266:async (model:FindingModelFull, edited_markdown:str, *, agent:Agent[EditDeps, EditResult] | None = None,)>EditResult:create_markdown_edit_agent:","_basic_edit_validation:310:(*, original:FindingModelFull, updated:FindingModelFull)>list[str]:_validate_choice_value_indices_and_bases,_validate_model_id,_validate_new_items_have_ids,_validate_original_attributes_present:Compose simple validators and return combined messages (deduped).","_normalize_new_attribute_ids:324:(*, original:FindingModelFull, updated:FindingModelFull)>None::Force placeholder IDs for newly added attributes and their values.","assign_real_attribute_ids:352:(model:FindingModelFull, *, source:str | None = None, manager:IdManager | None = None,)>FindingModelFull::Replace placeholder attribute IDs using the configured ID manager.","_validate_model_id:359:(original:FindingModelFull, updated:FindingModelFull)>list[str]::","_validate_original_attributes_present:369:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]::","_validate_new_items_have_ids:401:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]::","_validate_choice_value_indices_and_bases:423:(orig_attrs:Mapping[str | None, object], upd_attrs:Mapping[str | None, object])>list[str]:_collect_value_codes,_validate_existing_attr_suffixes,_validate_new_attr_suffixes:Top-level dispatcher across updated choice attributes.","_parse_suffix:445:(vcode:str)>int | None::","_collect_value_codes:454:(oifma_id:str | None, upd_attr:object, name:str)>tuple[list[str], list[int], list[str], int]:_parse_suffix:","_validate_new_attr_suffixes:490:(name:str, oifma_id:str | None, suffixes:list[int], values_len:int)>list[str]::","_validate_existing_attr_suffixes:504:(name:str, oifma_id:str | None, vcodes:list[str], suffixes:list[int], orig_attr:object)>list[str]:_parse_suffix:"],{"EditResult":["14",[]],"EditDeps":["24",[]]}],"sr/findingmodel/tools/ontology_concept_match.py":["p",["_filter_anatomical_concepts:66:(search_results:list[OntologySearchResult])>list[OntologySearchResult]::Filter out anatomical concepts from search results.","_add_exact_matches:92:(sorted_results:list[OntologySearchResult], query_terms:list[str], max_results:int, selected_ids:set[str])>tuple[list[OntologySearchResult], int]::Add exact matches that were ranked lower to the top results.","_apply_cohere_reranking:118:async (top_results:list[OntologySearchResult], query_terms:list[str])>list[OntologySearchResult]::Apply Cohere reranking if configured.","execute_ontology_search:156:async (query_terms:list[str], exclude_anatomical:bool = True, base_limit:int = 30, max_results:int = 12, ontologies:list[str] | None = None,)>list[OntologySearchResult]:_add_exact_matches,_apply_cohere_reranking,_filter_anatomical_concepts:","create_categorization_agent:243:()>Agent[CategorizationContext, CategorizedConcepts]::","ensure_exact_matches_post_process:300:(output:CategorizedConcepts, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts::","create_query_generator_agent:369:()>Agent[None, list[str]]::","generate_finding_query_terms:397:async (finding_name:str, finding_description:str | None = None)>list[str]:create_query_generator_agent:","categorize_with_validation:439:async (finding_name:str, search_results:list[OntologySearchResult], query_terms:list[str],)>CategorizedConcepts:create_categorization_agent,ensure_exact_matches_post_process:","build_final_output:498:(categorized:CategorizedConcepts, search_results:list[OntologySearchResult], max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10,)>CategorizedOntologyConcepts::","match_ontology_concepts:567:async (finding_name:str, finding_description:str | None = None, exclude_anatomical:bool = True, max_exact_matches:int = 5, max_should_include:int = 10, max_marginal:int = 10, ontologies:list[str] | None = None,)>CategorizedOntologyConcepts:build_final_output,categorize_with_validation,execute_ontology_search,generate_finding_query_terms:"],{"CategorizedConcepts":["28",[]],"CategorizedOntologyConcepts":["37",[]],"CategorizationContext":["58",[]]}],"sr/findingmodel/tools/ontology_search.py":["p",["normalize_concept:35:(text:str)>str::","rerank_with_cohere:608:async (query:str, documents:list[OntologySearchResult], client:cohere.AsyncClientV2 | None = None, model:str = \"rerank-v3.5\", top_n:int | None = None, retry_attempts:int = 1,)>list[OntologySearchResult]:_rerank:"],{"OntologySearchProtocol":["88",["search:101:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[\"OntologySearchResult\"]::","__aenter__:114:async (self)>\"OntologySearchProtocol\"::Async context manager entry.","__aexit__:123:async (self, _exc_type:type[BaseException] | None, _exc_val:BaseException | None, _exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_parallel:133:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[\"OntologySearchResult\"]:search:"]],"OntologySearchResult":["148",["as_index_code:160:(self)>IndexCode:normalize_concept:Convert to IndexCode format"]],"BioOntologySearchResult":["170",["from_api_response:182:(cls, item:dict[str, Any])>\"BioOntologySearchResult\"::Create from BioOntology API response item.","to_ontology_search_result:223:(self)>OntologySearchResult::Convert to standard OntologySearchResult format."]],"BioOntologySearchResults":["246",[]],"BioOntologySearchClient":["256",["__init__:263:(self, api_key:Optional[str] = None, client:Optional[httpx.AsyncClient] = None)>None::","__aenter__:286:async (self)>\"BioOntologySearchClient\"::Async context manager entry.","__aexit__:297:async (self, exc_type:type[BaseException] | None, exc_val:BaseException | None, exc_tb:Any, # noqa:ANN401)>None::Async context manager exit.","search_bioontology:314:async (self, query:str, ontologies:Optional[list[str]] = None, page_size:int = 50, page:int = 1, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>BioOntologySearchResults:from_api_response,search:","search_all_pages:398:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 100, include_fields:Optional[str] = None, require_exact_match:bool = False, semantic_types:Optional[list[str]] = None,)>list[BioOntologySearchResult]:search_bioontology:","search_as_ontology_results:448:async (self, query:str, ontologies:Optional[list[str]] = None, max_results:int = 50, **kwargs:Any, # noqa:ANN401)>list[OntologySearchResult]:search_all_pages,to_ontology_search_result:","search:477:async (self, queries:list[str], max_results:int = 30, filter_anatomical:bool = True,)>list[OntologySearchResult]:search_as_ontology_results:","search_parallel:548:async (self, queries:list[str], tables:list[str] | None = None, limit_per_query:int = 30, filter_anatomical:bool = False,)>list[OntologySearchResult]:search:"]]}],"sr/findingmodel/tools/prompt_template.py":["p",["load_prompt_template:16:(template_file_name:str)>Template::","create_prompt_messages:27:(template:Template, **kwargs:Any)>list[ChatCompletionMessageParam]::"]],"sr/findingmodel/tools/similar_finding_models.py":["p",["search_models_tool:56:async (ctx:RunContext[SearchContext], query:str, limit:int = 5)>str::","create_search_agent:89:(openai_model:str)>Agent[SearchContext, SearchStrategy]::Create the search agent for gathering comprehensive results.","create_term_generation_agent:121:(openai_model:str)>Agent[None, SearchTerms]::Create a lightweight agent for generating search terms.","create_analysis_agent:154:(openai_model:str)>Agent[None, SimilarModelAnalysis]::Create the analysis agent for evaluating similarity and making recommendations.","find_similar_models:203:async (# noqa:C901 finding_name:str, description:str | None = None, synonyms:list[str] | None = None, index:Index | None = None, search_model:str | None = None, analysis_model:str | None = None,)>SimilarModelAnalysis:_generate_search_terms_with_fallback:","_generate_search_terms_with_fallback:349:async (term_prompt:str, search_model:str, finding_name:str)>list[str]:create_term_generation_agent:"],{"SearchResult":["25",[]],"SearchTerms":["34",[]],"SearchStrategy":["40",[]],"SearchContext":["50",[]],"SimilarModelAnalysis":["140",[]]}],"test/conftest.py":["p",["configure_test_logging:20:()>None::Configure logging for test session - runs once at start of session.","base_model:29:()>FindingModelBase::","full_model:56:()>FindingModelFull::","real_model:89:()>FindingModelFull::","real_model_markdown:97:()>str::","pe_fm_json:104:()>str::","tn_fm_json:111:()>str::","tn_markdown:118:()>str::","finding_info:125:()>FindingInfo::"]],"test/test_anatomic_location_search.py":["p",{"TestOntologySearchResult":["22",["test_creation_with_all_fields:25:(self)>None::Test creating an OntologySearchResult with all fields.","test_as_index_code_radlex:34:(self)>None::Test converting a RadLex result to IndexCode.","test_as_index_code_snomedct:44:(self)>None::Test converting a SNOMED CT result to IndexCode.","test_as_index_code_anatomic_locations:56:(self)>None::Test converting an anatomic locations result to IndexCode.","test_as_index_code_unknown_table:68:(self)>None::Test converting with unknown table falls back to table name.","test_as_index_code_with_concept_normalization:79:(self)>None::Test that concept text is normalized when converting to IndexCode."]],"TestAnatomicQueryTerms":["95",["test_creation_with_region:98:(self)>None::Test creating AnatomicQueryTerms with region.","test_creation_without_region:105:(self)>None::Test creating AnatomicQueryTerms without region.","test_empty_terms:112:(self)>None::Test creating AnatomicQueryTerms with empty terms."]],"TestLocationSearchResponse":["120",["test_creation:123:(self)>None::Test creating LocationSearchResponse."]],"TestGenerateAnatomicQueryTerms":["142",["test_successful_generation:146:async (self)>None::Test successful query term generation.","test_generation_with_description:159:async (self)>None::Test query term generation with description.","test_generation_fallback_on_error:169:async (self)>None::Test fallback when generation fails."]],"TestExecuteAnatomicSearch":["181",["test_search_with_duckdb:185:async (self)>None::Test executing search with DuckDB client.","test_search_without_region:209:async (self)>None::Test executing search without region filter."]],"TestCreateLocationSelectionAgent":["225",["test_agent_creation:228:(self)>None::Test creating location selection agent.","test_agent_with_custom_model:240:(self)>None::Test creating agent with custom model."]],"TestFindAnatomicLocations":["252",["test_successful_search_with_duckdb:256:async (self)>None::Test successful anatomic location search using DuckDB.","test_empty_search_results:303:async (self)>None::Test handling of empty search results."]]}],"test/test_contributor.py":["p",["clear_registries:13:()>Generator[None, None, None]::Clears the registries before each test to ensure isolation.","sample_org_oidm:23:()>dict[str, str]::","sample_org_acr:28:()>dict[str, str]::","sample_person_john:33:(sample_org_oidm:dict[str, str])>dict[str, str]::","sample_person_jane:45:(sample_org_acr:dict[str, str])>dict[str, str]::","test_organization_creation:60:(sample_org_oidm:dict[str, str])>None::","test_organization_duplicate_code:68:(sample_org_oidm:dict[str, str])>None::","test_organization_invalid_code_pattern:78:()>None::","test_organization_organizations_list:87:(sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_save_and_load_jsonl:102:(tmp_path:Path, sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str])>None::","test_organization_load_jsonl_file_not_found:125:(tmp_path:Path)>None::","test_person_creation:133:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_duplicate_github_username:141:(sample_person_john:dict[str, str])>None::","test_person_organization_property:156:(sample_person_john:dict[str, str], sample_org_oidm:dict[str, str])>None::","test_person_organization_property_org_deleted_after_person_creation:164:(sample_person_john:dict[str, str])>None::","test_person_get_non_existent:174:()>None::","test_person_people_list:178:(sample_person_john:dict[str, str], sample_person_jane:dict[str, str])>None::","test_person_save_and_load_jsonl:193:(tmp_path:Path, sample_person_john:dict[str, str], sample_person_jane:dict[str, str], sample_org_oidm:dict[str, str], sample_org_acr:dict[str, str],)>None::","test_person_load_jsonl_file_not_found:223:(tmp_path:Path)>None::"]],"test/test_duckdb_index.py":["p",["_fake_openai_client:18:(*_:Any, **__:Any)>object::Return a dummy OpenAI client for patched calls.","_write_model_file:24:(path:Path, data:FindingModelFull)>None::","_make_test_model:28:()>FindingModelFull::","_table_count:49:(conn:duckdb.DuckDBPyConnection, table:str)>int::","test_setup_creates_hnsw_index:56:async (tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>None:_fake_openai_client,fake_client:","test_semantic_search_returns_results:76:async (tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>None:_fake_openai_client,_make_test_model,_write_model_file,fake_client,fake_embedding:","test_remove_entry_clears_related_rows:127:async (tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>None:_fake_openai_client,_make_test_model,_table_count,_write_model_file,fake_client,fake_embedding:","test_write_operations_rebuild_search_indexes:182:async (tmp_path:Path, monkeypatch:pytest.MonkeyPatch)>None:_fake_openai_client,_make_test_model,_write_model_file,fake_client,fake_embedding:"]],"test/test_findingmodel.py":["p",["test_choice_value:12:()>None::","test_choice_attribute:18:()>None::","test_numeric_attribute:33:()>None::","test_multichoice_attribute:48:()>None::","test_finding_model_base:60:(tmp_path)>None::","test_load_finding_model:92:(pe_fm_json:str)>None::","test_load_finding_model_with_codes:103:(tn_fm_json:str)>None::","test_load_finding_model_with_contributors:136:(tn_fm_json:str)>None::"]],"test/test_findingmodel_md.py":["p",["test_base_model_markdown:30:(base_model:FindingModelBase)>None::","test_full_model_markdown_with_ids:64:(full_model:FindingModelFull)>None::","test_full_model_markdown_hide_ids:71:(full_model:FindingModelFull)>None::","test_real_model_markdown:81:(real_model:FindingModelFull, real_model_markdown:str)>None::","test_real_model_markdown_with_codes:87:(tn_fm_json:str, tn_markdown:str)>None::"]],"test/test_index.py":["p",["is_mongodb_running:19:()>bool::","mongo_client:39:()>Iterator[AsyncIOMotorClient[Any]]::","test_db:46:async (mongo_client:AsyncIOMotorClient[Any])>AsyncIterator[AsyncIOMotorDatabase[Any]]::","index:53:async ()>AsyncIterator[Index]::","sample_model:62:()>FindingModelFull::","tmp_defs_path:93:(tmp_path:Path)>Path::Create a temporary path for test files.","populated_index:102:async (index:Index, tmp_defs_path:Path)>AsyncIterator[Index]::Populate the index with all *.fm.json files from test/data and test/data/defs.","test_add_and_retrieve_model:113:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_validate_model_no_duplicates:130:async (index:Index, sample_model:FindingModelFull)>None::","test_contains_method:136:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_count_method:152:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None::","test_populated_index_count:178:async (populated_index:Index)>None::","test_populated_index_retrieval:185:async (populated_index:Index)>None::","test_add_already_existing_model_unchanged:195:async (populated_index:Index)>None::","test_add_new_model:204:async (populated_index:Index, tmp_defs_path:Path)>None::","test_add_updated_model_file:215:async (populated_index:Index, tmp_defs_path:Path)>None::","test_remove_not_found_model:234:async (populated_index:Index, tmp_defs_path:Path)>None::","test_duplicate_oifm_id_fails_validation:255:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_name_fails_validation:263:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_duplicate_attribute_id_fails_validation:271:async (populated_index:Index, sample_model:FindingModelFull)>None::","test_update_from_directory:281:async (populated_index:Index, tmp_defs_path:Path)>None::Test the update_from_directory method with add, modify, and delete operations.","test_update_from_directory_empty_directory:340:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with an empty directory removes all entries.","test_update_from_directory_nonexistent_directory:363:async (populated_index:Index, tmp_path:Path)>None::Test update_from_directory with a nonexistent directory raises ValueError.","test_index_initialization_with_client:371:(mongo_client:AsyncIOMotorClient[Any])>None::Test that the Index can be initialized with an existing client.","test_search_basic_functionality:383:async (populated_index:Index)>None::Test basic search functionality with populated index.","test_search_by_name:400:async (populated_index:Index)>None::Test search functionality by exact and partial name matches.","test_search_by_description:414:async (populated_index:Index)>None::Test search functionality using description content.","test_search_by_synonyms:426:async (populated_index:Index)>None::Test search functionality using synonyms.","test_search_limit_parameter:436:async (populated_index:Index)>None::Test that search respects the limit parameter.","test_search_no_results:451:async (populated_index:Index)>None::Test search with query that should return no results.","test_search_empty_query:459:async (populated_index:Index)>None::Test search behavior with empty query.","test_search_case_insensitive:467:async (populated_index:Index)>None::Test that search is case insensitive.","test_search_multiple_terms:478:async (populated_index:Index)>None::Test search with multiple terms.","test_search_with_empty_index:492:async (index:Index)>None::Test search functionality with empty index.","test_mongodb_connection_failure:501:async ()>None::Test Index behavior when MongoDB connection fails.","test_add_entry_with_invalid_json_file:515:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid JSON.","test_add_entry_with_nonexistent_file:527:async (index:Index, tmp_path:Path)>None::Test error handling when adding nonexistent file.","test_add_entry_with_invalid_model_data:537:async (index:Index, tmp_path:Path)>None::Test error handling when adding file with invalid model data.","test_batch_operation_partial_failure:555:async (index:Index, tmp_path:Path, sample_model:FindingModelFull)>None::Test behavior when batch operations partially fail.","test_concurrent_index_operations:577:async (index:Index, sample_model:FindingModelFull, tmp_path:Path)>None:add_file:Test Index behavior under concurrent operations.","test_search_with_mongodb_error:612:async (index:Index)>None::Test search behavior when MongoDB has issues.","test_large_query_handling:622:async (index:Index)>None::Test Index behavior with very large search queries."]],"test/test_model_editor.py":["p",["_disable_model_requests:13:()>Iterator[None]::","test_edit_model_natural_language_add_attribute:23:async (real_model:FindingModelFull)>None::Test adding an attribute via natural language command.","test_export_model_for_editing_roundtrip:65:(real_model:FindingModelFull)>None::","test_export_model_for_editing_structure_full:72:(real_model:FindingModelFull)>None::","test_export_model_for_editing_attributes_only:104:(real_model:FindingModelFull)>None::","test_edit_model_natural_language_callout_real_api:119:async (real_model:FindingModelFull)>None::","test_edit_model_markdown_callout_real_api:154:async (real_model:FindingModelFull)>None::","test_forbidden_change_nl_callout_real_api:196:async (real_model:FindingModelFull)>None::Ask the agent to perform a forbidden change via natural language and verify i...","test_forbidden_change_markdown_callout_real_api:217:async (real_model:FindingModelFull)>None::Ask the agent to perform a forbidden change via Markdown and verify it's reje...","test_assign_real_attribute_ids_infers_source:250:(real_model:FindingModelFull, monkeypatch:pytest.MonkeyPatch)>None:_fake_generate:","test_assign_real_attribute_ids_uses_explicit_source:291:(real_model:FindingModelFull, monkeypatch:pytest.MonkeyPatch)>None:_fake_generate:","test_assign_real_attribute_ids_no_placeholders_returns_same_object:331:(real_model:FindingModelFull, monkeypatch:pytest.MonkeyPatch)>None::"]],"test/test_ontology_concept_match.py":["p",["test_query_terms_deduplication:23:()>None::Test that duplicate terms are removed from list.","test_generate_finding_query_terms_single_word:51:async ()>None::Test query generation for single word.","test_generate_finding_query_terms_with_description:68:async ()>None::Test query generation with description.","test_create_query_generator_agent:85:()>None::Test that the query generator agent is created correctly.","test_execute_ontology_search_with_cohere_enabled:111:async ()>None::Test execute_ontology_search when Cohere reranking is enabled and configured.","test_execute_ontology_search_with_cohere_disabled:168:async ()>None::Test execute_ontology_search when Cohere reranking is disabled via config.","test_execute_ontology_search_with_cohere_no_api_key:207:async ()>None::Test execute_ontology_search when Cohere config is enabled but no API key is ...","test_execute_ontology_search_with_cohere_single_query_term:246:async ()>None::Test execute_ontology_search with Cohere enabled and single query term (no al...","test_execute_ontology_search:292:async ()>None::Test executing search with filtering using BioOntology API.","test_execute_ontology_search_with_custom_ontologies:338:async ()>None::Test execute_ontology_search with custom ontologies parameter.","test_execute_ontology_search_with_none_ontologies:385:async ()>None::Test execute_ontology_search with ontologies=None (uses defaults).","test_execute_ontology_search_missing_api_key:425:async ()>None::Test that execute_ontology_search raises ValueError when BioOntology API key ...","test_ensure_exact_matches_adds_missing:439:()>None::Test that missing exact matches are added.","test_ensure_exact_matches_respects_limit:467:()>None::Test that max_length of 5 is respected.","test_categorization_agent_creation:493:()>None::Test that agent is created properly.","test_categorization_with_test_model:512:async ()>None::Test categorization using TestModel.","test_match_ontology_concepts_integration:548:async ()>None::Test the complete workflow using BioOntology API.","test_match_ontology_concepts_with_custom_ontologies:597:async ()>None::Test match_ontology_concepts with custom ontologies parameter.","test_match_ontology_concepts_with_none_ontologies:658:async ()>None::Test match_ontology_concepts with ontologies=None (uses defaults).","test_match_ontology_concepts_missing_api_key:717:async ()>None::Test that match_ontology_concepts raises ValueError when BioOntology API key ...","test_bioontology_integration:733:async ()>None::Integration test: Use real BioOntologySearchClient."]],"test/test_ontology_search.py":["p",["test_bioontology_implements_protocol:16:()>None::Test that BioOntologySearchClient implements OntologySearchProtocol.","test_protocol_context_managers:38:async ()>None::Test that BioOntology client works as async context manager.","test_bioontology_search_result_from_api_response:52:()>None::Test creating a search result from API response.","test_bioontology_search_result_minimal:78:()>None::Test creating a search result with minimal fields.","test_bioontology_client_no_api_key:99:()>None::Test that client raises error without API key.","test_bioontology_search_pneumonia:118:async ()>None::Integration test: search for pneumonia concepts.","test_bioontology_search_all_pages:149:async ()>None::Integration test: search with pagination.","test_bioontology_search_as_ontology_results:171:async ()>None::Integration test: test conversion to OntologySearchResult format.","test_bioontology_semantic_type_filter:196:async ()>None::Integration test: test filtering by semantic type.","test_rerank_with_cohere_no_api_key:226:()>None::Test that rerank_with_cohere returns original order when no API key is config...","test_rerank_with_cohere_empty_documents:250:()>None::Test that rerank_with_cohere handles empty document list.","test_rerank_with_cohere_with_mock_client:261:async ()>None::Test rerank_with_cohere with a mocked Cohere client.","test_rerank_with_cohere_top_n:301:async ()>None::Test rerank_with_cohere with top_n parameter.","test_rerank_with_cohere_integration:338:async ()>None::Integration test for Cohere reranking (requires COHERE_API_KEY).","test_default_ontologies_limited:364:()>None::"]],"test/test_tools.py":["p",["_mongodb_available:21:(uri:str)>bool::","test_create_stub:37:(finding_info:FindingInfo)>None::Test creating a stub finding model from a FindingInfo object.","test_add_ids_to_finding_model:49:(base_model:FindingModelBase)>None::Test adding IDs to a finding model.","test_add_ids_with_empty_cache:70:(base_model:FindingModelBase)>None::Test adding IDs when cache is empty (first call).","test_add_ids_with_populated_cache:95:(base_model:FindingModelBase)>None::Test adding IDs when cache already has data (avoids duplicate IDs).","test_add_ids_uses_cache_on_second_call:123:(base_model:FindingModelBase)>None::Test that second call uses cache and doesn't make HTTP request.","test_create_info_from_name_normalizes_and_logs:157:async (monkeypatch:pytest.MonkeyPatch)>None:fake_info:","test_create_info_from_name_preserves_name_without_logging:198:async (monkeypatch:pytest.MonkeyPatch)>None::","test_add_ids_handles_http_timeout:231:(base_model:FindingModelBase)>None::Test that function handles HTTP timeout gracefully.","test_add_ids_handles_http_error:247:(base_model:FindingModelBase)>None::Test that function handles HTTP errors gracefully.","test_add_ids_refresh_cache:263:(base_model:FindingModelBase)>None::Test forcing cache refresh.","test_load_used_ids_from_github_directly:284:()>None::Test the load_used_ids_from_github function directly.","test_load_used_ids_with_custom_url:308:()>None::Test load_used_ids_from_github with custom URL.","test_add_index_codes_to_finding_model:326:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_add_index_codes_to_finding_model_no_duplicates:348:(full_model:FindingModelFull)>None::Test adding codes to a finding model.","test_create_model_stub_from_info_new_api:361:(finding_info:FindingInfo)>None::Test creating a stub finding model using the new function name.","test_add_ids_to_model_new_api:373:(base_model:FindingModelBase)>None::Test adding IDs to a finding model using the new function name.","test_add_standard_codes_to_model_new_api:391:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name.","test_add_standard_codes_to_model_no_duplicates_new_api:413:(full_model:FindingModelFull)>None::Test adding codes to a finding model using the new function name (no duplicat...","test_create_info_from_name_integration:427:async ()>None::Integration test for create_info_from_name with real OpenAI API.","test_create_info_from_name_edge_cases:454:async ()>None::Test create_info_from_name with edge cases.","test_add_details_to_info_integration:472:async ()>None::Integration test for add_details_to_info with real Perplexity API.","test_create_model_from_markdown_integration:503:async ()>None::Integration test for create_model_from_markdown with real OpenAI API.","test_create_model_from_markdown_file_integration:564:async (tmp_path:Path)>None::Integration test for create_model_from_markdown using file input.","test_create_info_from_name_integration_normalizes_output:605:async ()>None::Ensure create_info_from_name returns normalized data when using the real API.","test_ai_tools_error_handling:627:async ()>None::Test AI tools error handling with invalid inputs.","test_find_similar_models_basic_functionality:647:()>None:run:Test basic functionality of find_similar_models without API calls.","test_find_similar_models_integration:675:async ()>None::Integration test for find_similar_models with real OpenAI API.","test_find_similar_models_edge_cases:702:async ()>None::Test find_similar_models with edge cases.","test_add_ids_network_timeout_handling:732:(base_model:FindingModelBase)>None::Test ID generation when GitHub API is unreachable.","test_add_ids_http_error_handling:751:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns HTTP error.","test_add_ids_invalid_response_data:770:(base_model:FindingModelBase)>None::Test ID generation when GitHub API returns invalid data.","test_tools_import_failures:788:()>None::Test graceful handling when optional dependencies are missing.","test_concurrent_id_generation:808:(base_model:FindingModelBase)>None:generate_ids:Test ID generation under concurrent access."],{"_StubFindingInfoAgent":["146",["__init__:147:(self, output:FindingInfo)>None::","run:151:async (self, prompt:str)>SimpleNamespace::"]]}]},"g":[["DuckDBOntologySearchClient._search_single","Index.search"],["_basic_edit_validation","_validate_original_attributes_present"],["DuckDBIndex.add_or_update_entry_from_file","_replace_tags"],["DuckDBIndex.update_from_directory","_execute_batch_directory_update"],["DuckDBOntologySearchClient.search_parallel","_search_single"],["DuckDBIndex._apply_batch_mutations","_delete_denormalized_records"],["ReleaseManager.build_packages","ReleaseManager.run_command"],["DuckDBIndex.setup","_ensure_connection"],["ChoiceAttribute.fix_max_selected","fix_max_selected_validator"],["test_remove_entry_clears_related_rows","fake_embedding"],["Index._check_attribute_id_conflict","Organization.get"],["BioOntologySearchClient.search_all_pages","BioOntologySearchClient.search_bioontology"],["DuckDBIndex.get_organization","_ensure_connection"],["main","process_and_insert_data"],["DuckDBIndex._load_models_metadata","_build_search_text"],["BioOntologySearchClient.search_bioontology","Index.search"],["ReleaseManager.check_git_status","ReleaseManager.run_command"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchClient.search_all_pages"],["ReleaseManager.update_version","ReleaseManager.get_current_version"],["DuckDBIndex.get_person","_ensure_connection"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._calculate_file_hash"],["IdManager.finalize_placeholder_attribute_ids","load_used_ids_from_github"],["markdown_to_fm","print_info_truncate_detail"],["Index.update_from_directory","_get_local_file_info"],["Index.validate_models_batch","_check_attribute_id_conflict"],["_create_finding_info","_async_create_finding_info"],["Index._prepare_entries_for_batch","add_or_update_contributors"],["ReleaseManager.post_release_cleanup","run_command"],["test_remove_entry_clears_related_rows","fake_client"],["handle_markdown_edit","apply_edit"],["main","verify_database"],["DuckDBIndex.add_or_update_entry_from_file","Index._calculate_file_hash"],["Person.get","get"],["Organization.get","DuckDBIndex.get"],["test_remove_entry_clears_related_rows","_table_count"],["_collect_value_codes","_parse_suffix"],["DuckDBIndex._generate_embeddings","DuckDBIndex._ensure_openai_client"],["handle_markdown_edit","run_with_timer"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex.setup"],["Index._get_validation_data","DuckDBIndex.get"],["Index._search_batch_individual","DuckDBIndex.search"],["Index.add_or_update_entry_from_file","Index.validate_model"],["Index.update_from_directory","Index._prepare_entries_for_batch"],["DuckDBOntologySearchClient.search","DuckDBOntologySearchClient._search_single"],["DuckDBIndex.add_or_update_entry_from_file","_calculate_file_hash"],["apply_edit","DemoState.mark_updated"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._delete_denormalized_records"],["OntologySearchProtocol.search_parallel","search"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._drop_search_indexes"],["DuckDBIndex.search","_search_exact"],["run_with_timer","_await_with_timer"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_attributes"],["DuckDBIndex.setup","DuckDBIndex._create_search_indexes"],["Index._prepare_entries_for_batch","Index.add_or_update_contributors"],["DuckDBIndex.update_from_directory","DuckDBIndex._execute_batch_directory_update"],["ReleaseManager.get_current_version","run_command"],["OntologySearchProtocol.search_parallel","OntologySearchProtocol.search"],["rerank_with_cohere","_rerank"],["ReleaseManager.merge_to_main","run_command"],["ReleaseManager.update_version","get_current_version"],["test_concurrent_index_operations","add_file"],["DuckDBIndex.remove_entry","DuckDBIndex._ensure_writable_connection"],["DuckDBIndex.add_or_update_entry_from_file","_drop_search_indexes"],["ReleaseManager.commit_changes","run_command"],["execute_ontology_search","_filter_anatomical_concepts"],["DuckDBIndex.count_organizations","DuckDBIndex._ensure_connection"],["BioOntologySearchClient.search_parallel","search"],["DuckDBIndex.get","_resolve_oifm_id"],["ReleaseManager.update_version","ReleaseManager.validate_version"],["IdManager.add_ids_to_model","IdManager.load_used_ids_from_github"],["parse_args","parse_args"],["DuckDBIndex._search_exact","DuckDBIndex._entry_has_tags"],["Index.validate_model","Index.validate_models_batch"],["DuckDBIndex._execute_batch_directory_update","_apply_batch_mutations"],["BioOntologySearchClient.search_parallel","OntologySearchProtocol.search"],["Index._search_batch_combined","Index._entry_matches_query"],["ReleaseManager.update_version","run_command"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._build_embedding_text"],["handle_save","DemoState.record_save"],["Person.organization","Person.get"],["DuckDBOntologySearchClient._search_single","BioOntologySearchClient.search"],["test_setup_creates_hnsw_index","_fake_openai_client"],["_handle_command_input","prompt_command_text"],["export_model_for_editing","_render_top_metadata_lines"],["DuckDBIndex._prepare_batch_payload","_generate_embeddings"],["DuckDBIndex.remove_entry","setup"],["find_anatomic_locations","generate_anatomic_query_terms"],["test_semantic_search_returns_results","_write_model_file"],["Index.search_batch","Index._search_batch_combined"],["ReleaseManager.create_github_release","ReleaseManager.confirm"],["ReleaseManager.release","ReleaseManager._should_skip_step"],["IdManager.finalize_placeholder_attribute_ids","IdManager.load_used_ids_from_github"],["Index.search_batch","_search_batch_combined"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_tags"],["Organization.get","get"],["_edited_text_instructions","_combine_instruction_sections"],["demo_detailed_search","print_section"],["BioOntologySearchClient.search_bioontology","BioOntologySearchClient.search"],["DuckDBIndex.add_or_update_entry_from_file","_build_search_text"],["create_finding_model_stub_from_finding_info","create_model_stub_from_info"],["main","load_json_data"],["_validate_existing_attr_suffixes","_parse_suffix"],["test_assign_real_attribute_ids_uses_explicit_source","_fake_generate"],["run_session","handle_natural_language"],["ReleaseManager.update_version","ReleaseManager._setup_logging"],["strip_quotes_secret","strip_quotes"],["DuckDBIndex.remove_entry","_create_search_indexes"],["generate_oifma_id","_random_digits"],["Index.to_markdown","DuckDBIndex.count"],["test_semantic_search_returns_results","_fake_openai_client"],["IdManager._resolve_source","_validate_source"],["create_markdown_edit_agent","_basic_edit_validation"],["DuckDBIndex._search_semantic","DuckDBIndex._entry_has_tags"],["add_standard_codes_to_model","_add_index_codes"],["DuckDBIndex.setup","_create_search_indexes"],["Index.validate_models_batch","Index._check_attribute_id_conflict"],["Index.update_from_directory","Index._execute_batch_operations"],["_validate_choice_value_indices_and_bases","_validate_new_attr_suffixes"],["IdManager.finalize_placeholder_attribute_ids","_generate_unique_oifma"],["_generate_search_terms_with_fallback","create_term_generation_agent"],["Index.add_or_update_entry_from_file","Person.get"],["get_embedding_for_duckdb","_to_float32"],["DuckDBIndex.contains","_resolve_oifm_id"],["create_edit_agent","_basic_edit_validation"],["Index._search_batch_individual","search"],["DuckDBIndex.get","_fetch_index_entry"],["_handle_command_input","handle_natural_language"],["DuckDBIndex._ensure_writable_connection","_ensure_connection"],["OntologySearchProtocol.search_parallel","DuckDBIndex.search"],["_handle_reset","display_current"],["create_model_stub_from_info","create_change_element"],["DuckDBIndex.update_from_directory","DuckDBIndex._prepare_batch_payload"],["Person.get","Person.get"],["ReleaseManager.run_checks","run_command"],["Index._prepare_entries_for_batch","Index.validate_models_batch"],["Index._search_batch_individual","OntologySearchProtocol.search"],["DuckDBIndex.remove_entry","_delete_denormalized_records"],["DuckDBIndex.count_people","_ensure_connection"],["ReleaseManager.release","ReleaseManager.handle_error"],["Index.add_or_update_entry_from_file","DuckDBIndex._calculate_file_hash"],["Index.validate_model","validate_models_batch"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._get_embedding"],["test_setup_creates_hnsw_index","fake_client"],["DuckDBOntologySearchClient._find_exact_matches","_row_to_result"],["DuckDBIndex.get","DuckDBIndex._resolve_oifm_id"],["make_info","print_info_truncate_detail"],["ReleaseManager.merge_to_main","ReleaseManager.confirm"],["DuckDBIndex._search_semantic","_ensure_openai_client"],["Index._check_attribute_id_conflict","DuckDBIndex.get"],["_validate_choice_value_indices_and_bases","_validate_existing_attr_suffixes"],["_print_cohere_rerank_stage","display_results_comparison"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._ensure_writable_connection"],["BioOntologySearchClient.search_as_ontology_results","to_ontology_search_result"],["ReleaseManager.build_packages","run_command"],["BioOntologySearchClient.search_parallel","DuckDBIndex.search"],["Person.organization","get"],["ReleaseManager.check_branch","ReleaseManager.run_command"],["Index.add_or_update_entry_from_file","Index._calculate_file_hash"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._row_to_result"],["ReleaseManager.check_git_status","run_command"],["DuckDBIndex.update_from_directory","_stage_directory_files"],["DuckDBIndex._load_models_metadata","DuckDBIndex._build_embedding_text"],["create_edit_agent","_natural_language_instructions"],["BioOntologySearchClient.search","search_as_ontology_results"],["test_remove_entry_clears_related_rows","_make_test_model"],["get_detail_on_finding","add_details_to_info"],["DuckDBIndex.get","DuckDBIndex._fetch_index_entry"],["Index._prepare_entries_for_batch","Index._entry_from_model_file"],["DuckDBIndex.update_from_directory","DuckDBIndex.setup"],["display_results","print_header"],["categorize_with_validation","ensure_exact_matches_post_process"],["OntologySearchResult.as_index_code","normalize_concept"],["main","demo_basic_search"],["find_similar_models","_generate_search_terms_with_fallback"],["IdManager.add_ids_to_model","load_used_ids_from_github"],["Index.add_or_update_entry_from_file","_calculate_file_hash"],["execute_ontology_search","_add_exact_matches"],["test_semantic_search_returns_results","fake_client"],["Index.update_from_directory","Index._determine_operations"],["DuckDBIndex.add_or_update_entry_from_file","setup"],["Index.add_or_update_entry_from_file","validate_model"],["generate_finding_query_terms","create_query_generator_agent"],["Index.update_from_directory","Index._get_local_file_info"],["test_create_info_from_name_normalizes_and_logs","fake_info"],["BioOntologySearchClient.search_as_ontology_results","BioOntologySearchResult.to_ontology_search_result"],["test_anatomic_location_search","_print_verbose_stages"],["DuckDBIndex._apply_batch_mutations","DuckDBIndex._delete_denormalized_records"],["create_finding_info_from_name","create_info_from_name"],["DuckDBOntologySearchClient._search_single","_apply_rrf_fusion"],["Index.search_batch","Index._search_batch_individual"],["run_with_timer","_runner"],["DuckDBIndex._search_semantic","_entry_has_tags"],["create_markdown_edit_agent","_normalize_new_attribute_ids"],["Person.get","Organization.get"],["Index.add_or_update_entry_from_file","get"],["ReleaseManager.publish_pypi","run_command"],["DuckDBIndex._search_fts","DuckDBIndex._entry_has_tags"],["DuckDBOntologySearchClient._search_single","_row_to_result"],["Index._prepare_entries_for_batch","validate_models_batch"],["Organization.get","Person.get"],["Index.validate_models_batch","_check_name_conflict"],["DuckDBIndex.add_or_update_entry_from_file","_create_search_indexes"],["DuckDBIndex.contains","DuckDBIndex._resolve_oifm_id"],["_handle_reset","reset"],["Index._get_validation_data","Person.get"],["ReleaseManager.release","ReleaseManager.print_summary"],["create_edit_agent","_normalize_new_attribute_ids"],["main","ReleaseManager.release"],["DuckDBIndex.add_or_update_entry_from_file","_build_embedding_text"],["ReleaseManager.release","_get_release_steps"],["DuckDBIndex.__aenter__","DuckDBIndex._ensure_connection"],["_basic_edit_validation","_validate_new_items_have_ids"],["create_finding_model_from_markdown","create_model_from_markdown"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._get_embedding"],["DuckDBIndex._prepare_batch_payload","_build_row_data"],["demo_pagination","print_section"],["DuckDBIndex.get","DuckDBIndex._ensure_connection"],["DuckDBIndex._search_exact","_fetch_index_entry"],["ReleaseManager.__init__","_setup_logging"],["match_ontology_concepts","build_final_output"],["ReleaseManager.update_version","validate_version"],["create_model_stub_from_info","create_presence_element"],["ReleaseManager.create_github_release","ReleaseManager.run_command"],["DuckDBOntologySearchClient.search_parallel","DuckDBOntologySearchClient._search_single"],["DuckDBIndex.remove_entry","DuckDBIndex._create_search_indexes"],["ReleaseManager.run_tests","run_command"],["test_ontology_concept_match","perform_search_stages"],["DuckDBIndex.remove_entry","_ensure_writable_connection"],["demo_semantic_type_filter","print_section"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._row_to_result"],["Index._entry_from_model_file","DuckDBIndex._calculate_file_hash"],["DuckDBIndex.count_organizations","_ensure_connection"],["execute_ontology_search","_apply_cohere_reranking"],["test_anatomic_location_search","_print_finding_info_stage"],["Index.add_or_update_entry_from_file","Index._entry_from_model_file"],["Index._search_batch_combined","_entry_matches_query"],["ReleaseManager.release","handle_error"],["DuckDBIndex.search","_search_fts"],["IdManager.add_ids_to_finding_model","add_ids_to_model"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._drop_search_indexes"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._replace_synonyms"],["test_find_similar_models_basic_functionality","_StubFindingInfoAgent.run"],["OntologySearchProtocol.search_parallel","DuckDBOntologySearchClient.search"],["IndexEntry.match","match"],["apply_edit","display_current"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._apply_rrf_fusion"],["ReleaseManager.create_github_release","confirm"],["run_session","handle_command"],["DuckDBIndex.count","DuckDBIndex._ensure_connection"],["ReleaseManager.release","print_summary"],["ReleaseManager.create_tag","ReleaseManager.run_command"],["DuckDBIndex._search_exact","DuckDBIndex._fetch_index_entry"],["DuckDBIndex._search_semantic","_fetch_index_entry"],["Index.add_or_update_entry_from_file","Index.get"],["test_find_similar_models_basic_functionality","run"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._build_row_data"],["DuckDBOntologySearchClient._search_single_with_filters","_apply_rrf_fusion"],["run_session","explain_commands"],["ReleaseManager.update_version","check_existing_tag"],["DuckDBIndex._execute_batch_directory_update","_drop_search_indexes"],["Organization.get","Organization.get"],["Person.get","Index.get"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._apply_batch_mutations"],["DuckDBIndex._search_semantic","DuckDBIndex._ensure_openai_client"],["_print_verbose_stages","_print_bio_search_stage"],["DuckDBIndex.update_from_directory","DuckDBIndex._classify_directory_changes"],["DuckDBOntologySearchClient._search_single","_get_embedding"],["Index.get","Index._id_or_name_or_syn_query"],["DuckDBIndex.contains","DuckDBIndex._ensure_connection"],["main","check_configuration"],["handle_natural_language","apply_edit"],["BioOntologySearchClient.search_parallel","DuckDBOntologySearchClient.search"],["weighted_fusion","normalize_scores"],["main","create_indexes"],["IdManager.add_ids_to_finding_model","IdManager.add_ids_to_model"],["test_write_operations_rebuild_search_indexes","_write_model_file"],["OntologySearchProtocol.search_parallel","Index.search"],["match_ontology_concepts","execute_ontology_search"],["Index._get_validation_data","get"],["handle_natural_language","run_with_timer"],["DuckDBIndex.search","DuckDBIndex._search_fts"],["ReleaseManager.get_current_version","ReleaseManager.run_command"],["create_info_from_name","_normalize_finding_info"],["ReleaseManager.merge_to_main","ReleaseManager.run_command"],["DuckDBIndex.add_or_update_entry_from_file","_ensure_openai_client"],["DuckDBIndex.update_from_directory","_prepare_batch_payload"],["DuckDBIndex.add_or_update_entry_from_file","_upsert_contributors"],["DuckDBIndex._load_models_metadata","_build_embedding_text"],["test_anatomic_location_search","_print_summary"],["ReleaseManager.publish_pypi","ReleaseManager.confirm"],["_basic_edit_validation","_validate_model_id"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._upsert_contributors"],["ChoiceValueIded.index_codes_str","_index_codes_str"],["ReleaseManager.release","ReleaseManager._get_release_steps"],["DuckDBIndex._search_semantic","DuckDBIndex._fetch_index_entry"],["main","demo_semantic_type_filter"],["ReleaseManager.update_changelog","ReleaseManager.confirm"],["find_anatomic_locations","create_location_selection_agent"],["BioOntologySearchClient.search_parallel","Index.search"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._combine_with_exact_matches"],["test_write_operations_rebuild_search_indexes","_fake_openai_client"],["edit_model_natural_language","create_edit_agent"],["DuckDBIndex.search","DuckDBIndex._ensure_connection"],["_natural_language_instructions","_combine_instruction_sections"],["test_semantic_search_returns_results","_make_test_model"],["_validate_choice_value_indices_and_bases","_collect_value_codes"],["ReleaseManager.check_branch","run_command"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._create_search_indexes"],["ReleaseManager.run_tests","ReleaseManager.confirm"],["DuckDBOntologySearchClient._search_single","search"],["ChoiceAttributeIded.index_codes_str","_index_codes_str"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._apply_rrf_fusion"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient._find_exact_matches"],["test_remove_entry_clears_related_rows","_write_model_file"],["Index._check_attribute_id_conflict","Person.get"],["DuckDBIndex.add_or_update_entry_from_file","_ensure_writable_connection"],["Person.organization","Organization.get"],["demo_basic_search","display_results"],["Index.to_markdown","count"],["test_semantic_search_returns_results","fake_embedding"],["create_markdown_edit_agent","_common_editing_instructions"],["DuckDBOntologySearchClient._search_single","OntologySearchProtocol.search"],["DuckDBOntologySearchClient.search_with_filters","DuckDBOntologySearchClient._search_single_with_filters"],["describe_finding_name","create_info_from_name"],["demo_multiple_ontologies","print_section"],["Index._search_batch_individual","DuckDBOntologySearchClient.search"],["DuckDBIndex._search_exact","_entry_has_tags"],["DuckDBIndex.search","_search_semantic"],["_print_verbose_stages","_print_query_terms_stage"],["Organization.get","Index.get"],["IdManager._resolve_source","IdManager._validate_source"],["add_standard_codes_to_finding_model","add_standard_codes_to_model"],["DuckDBIndex._search_exact","_resolve_oifm_id"],["DuckDBOntologySearchClient._search_single_with_filters","_get_embedding"],["DuckDBIndex.add_or_update_entry_from_file","_replace_synonyms"],["DuckDBIndex._search_fts","_fetch_index_entry"],["create_edit_agent","_common_editing_instructions"],["DuckDBIndex.search","DuckDBIndex._search_exact"],["DuckDBIndex._execute_batch_directory_update","DuckDBIndex._create_search_indexes"],["Index.search_batch","_search_batch_individual"],["Index.validate_models_batch","Index._check_id_conflict"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._validate_model"],["_print_cohere_stage","display_results_comparison"],["DuckDBIndex._fetch_index_entry","DuckDBIndex._collect_contributors"],["Index.contains","_id_or_name_or_syn_query"],["Index.update_from_directory","_get_existing_file_info"],["main","display_current"],["test_remove_entry_clears_related_rows","_fake_openai_client"],["create_markdown_edit_agent","_validate_output"],["Index.validate_models_batch","Index._get_validation_data"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._build_search_text"],["create_edit_agent","_validate_output"],["ReleaseManager.run_checks","ReleaseManager.run_command"],["Index._search_batch_individual","Index.search"],["Index.add_or_update_entry_from_file","Organization.get"],["IdManager.finalize_placeholder_attribute_ids","IdManager._generate_unique_oifma"],["test_concurrent_id_generation","generate_ids"],["handle_save","record_save"],["BioOntologySearchClient.search_bioontology","BioOntologySearchResult.from_api_response"],["test_write_operations_rebuild_search_indexes","fake_client"],["main","parse_args"],["main","load_model"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._combine_with_exact_matches"],["ReleaseManager.release","_execute_step"],["OntologySearchProtocol.search_parallel","BioOntologySearchClient.search"],["DuckDBIndex.__aenter__","_ensure_connection"],["DuckDBOntologySearchClient._search_single","_combine_with_exact_matches"],["DuckDBIndex._search_fts","DuckDBIndex._fetch_index_entry"],["ReleaseManager.check_existing_tag","ReleaseManager.run_command"],["ReleaseManager.update_version","ReleaseManager.check_existing_tag"],["BioOntologySearchClient.search_as_ontology_results","search_all_pages"],["ReleaseManager.create_github_release","run_command"],["DuckDBIndex._fetch_index_entry","_collect_contributors"],["DuckDBIndex.get","_ensure_connection"],["BioOntologySearchClient.search","BioOntologySearchClient.search_as_ontology_results"],["DuckDBIndex.update_from_directory","_classify_directory_changes"],["ReleaseManager.release","_should_skip_step"],["IdManager.finalize_placeholder_attribute_ids","IdManager._resolve_source"],["DuckDBOntologySearchClient._search_single_with_filters","DuckDBOntologySearchClient._find_exact_matches"],["main","print_header"],["test_ontology_concept_match","_print_verbose_stages"],["ReleaseManager.__init__","ReleaseManager._setup_logging"],["make_stub_model","_do_make_stub_model"],["main","demo_detailed_search"],["DuckDBIndex.setup","DuckDBIndex._ensure_connection"],["Index._get_local_file_info","DuckDBIndex._calculate_file_hash"],["process_and_insert_data","_insert_batch"],["Index.get","_id_or_name_or_syn_query"],["Person.organization","Index.get"],["model_file_name","normalize_name"],["Index._check_attribute_id_conflict","get"],["DuckDBIndex.update_from_directory","DuckDBIndex._stage_directory_files"],["make_info","_do_make_info"],["BioOntologySearchClient.search_parallel","BioOntologySearchClient.search"],["DuckDBIndex.get_organization","DuckDBIndex._ensure_connection"],["process_and_insert_data","determine_sided"],["_print_verbose_stages","_print_cohere_rerank_stage"],["Index.contains","Index._id_or_name_or_syn_query"],["DuckDBIndex.add_or_update_entry_from_file","DuckDBIndex._ensure_openai_client"],["DuckDBIndex._execute_batch_directory_update","_create_search_indexes"],["DuckDBOntologySearchClient._search_single","DuckDBIndex.search"],["DuckDBIndex.get_person","DuckDBIndex._ensure_connection"],["create_info_from_name","_create_finding_info_agent"],["_print_verbose_stages","_print_ai_selection_stage"],["Index.to_markdown","Index.count"],["DuckDBIndex.add_or_update_entry_from_file","_delete_denormalized_records"],["Index._get_local_file_info","Index._calculate_file_hash"],["handle_save","save_model"],["Index.validate_models_batch","_check_id_conflict"],["test_anatomic_location_search","perform_search_stages"],["ReleaseManager.create_tag","run_command"],["DuckDBIndex._search_exact","DuckDBIndex._resolve_oifm_id"],["BioOntologySearchClient.search_bioontology","DuckDBIndex.search"],["add_details_to_finding_info","add_details_to_info"],["BioOntologySearchClient.search_all_pages","search_bioontology"],["DuckDBIndex.count","_ensure_connection"],["ReleaseManager.publish_pypi","ReleaseManager.run_command"],["DuckDBIndex._load_models_metadata","DuckDBIndex._validate_model"],["Index._get_local_file_info","_calculate_file_hash"],["DuckDBIndex._collect_directory_files","DuckDBIndex._calculate_file_hash"],["Index._entry_from_model_file","Index._calculate_file_hash"],["handle_markdown_edit","prompt_markdown_edit"],["ReleaseManager.post_release_cleanup","ReleaseManager.run_command"],["Index.update_from_directory","_prepare_entries_for_batch"],["Index.update_from_directory","_execute_batch_operations"],["DuckDBIndex.contains","_ensure_connection"],["main","test_ontology_concept_match"],["test_ontology_concept_match","_print_finding_info_stage"],["DuckDBIndex._load_models_metadata","DuckDBIndex._build_search_text"],["Index._entry_from_model_file","_calculate_file_hash"],["Index._prepare_entries_for_batch","_entry_from_model_file"],["DuckDBOntologySearchClient._search_single_with_filters","_combine_with_exact_matches"],["markdown_to_fm","_do_markdown_to_fm"],["DuckDBIndex._collect_directory_files","Index._calculate_file_hash"],["DuckDBOntologySearchClient._search_single_with_filters","_row_to_result"],["Index._get_validation_data","Organization.get"],["DuckDBIndex.add_or_update_entry_from_file","_validate_model"],["generate_oifm_id","_random_digits"],["Index.validate_models_batch","Index._check_name_conflict"],["ReleaseManager.run_tests","ReleaseManager.run_command"],["Index._check_attribute_id_conflict","Index.get"],["DuckDBIndex._search_fts","_entry_has_tags"],["ReleaseManager.publish_pypi","confirm"],["Index._search_batch_individual","BioOntologySearchClient.search"],["DuckDBIndex.update_from_directory","_ensure_writable_connection"],["DuckDBIndex._collect_directory_files","_calculate_file_hash"],["ReleaseManager.update_changelog","confirm"],["main","release"],["main","demo_multiple_ontologies"],["BioOntologySearchClient.search_bioontology","from_api_response"],["demo_detailed_search","display_results"],["DuckDBIndex.update_from_directory","_collect_directory_files"],["DuckDBIndex.update_from_directory","DuckDBIndex._ensure_writable_connection"],["Index.update_from_directory","Index._get_existing_file_info"],["ReleaseManager.commit_changes","ReleaseManager.run_command"],["DuckDBOntologySearchClient._search_single","_find_exact_matches"],["main","create_database"],["_print_verbose_stages","_print_cohere_stage"],["DuckDBIndex._prepare_batch_payload","_load_models_metadata"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._generate_embeddings"],["process_and_insert_data","create_searchable_text"],["Person.organization","DuckDBIndex.get"],["DuckDBIndex.search","_ensure_connection"],["apply_edit","mark_updated"],["Index.add_or_update_entry_from_file","add_or_update_contributors"],["ChoiceAttributeIded.fix_max_selected","fix_max_selected_validator"],["_basic_edit_validation","_validate_choice_value_indices_and_bases"],["DuckDBIndex._generate_embeddings","_ensure_openai_client"],["NumericAttributeIded.index_codes_str","_index_codes_str"],["ReleaseManager.run_tests","confirm"],["categorize_with_validation","create_categorization_agent"],["create_markdown_edit_agent","_combine_instruction_sections"],["ReleaseManager.update_version","ReleaseManager.run_command"],["match_ontology_concepts","categorize_with_validation"],["match_ontology_concepts","generate_finding_query_terms"],["test_ontology_concept_match","_print_summary"],["create_markdown_edit_agent","_edited_text_instructions"],["DuckDBIndex.update_from_directory","DuckDBIndex._collect_directory_files"],["DuckDBIndex.update_from_directory","setup"],["DuckDBIndex._prepare_batch_payload","DuckDBIndex._load_models_metadata"],["ReleaseManager.merge_to_main","confirm"],["ReleaseManager.release","ReleaseManager._execute_step"],["Index.validate_models_batch","_get_validation_data"],["create_edit_agent","_combine_instruction_sections"],["ReleaseManager.update_version","_setup_logging"],["DuckDBOntologySearchClient._find_exact_matches","DuckDBOntologySearchClient._row_to_result"],["IdManager.finalize_placeholder_attribute_ids","_resolve_source"],["DuckDBIndex.add_or_update_entry_from_file","_replace_attributes"],["main","test_anatomic_location_search"],["IndexEntry.match","IndexEntry.match"],["_handle_reset","DemoState.reset"],["main","run_session"],["DuckDBIndex.remove_entry","DuckDBIndex.setup"],["test_write_operations_rebuild_search_indexes","_make_test_model"],["export_model_for_editing","_render_attribute_lines"],["Index.add_or_update_entry_from_file","Index.add_or_update_contributors"],["FindingModelFull.index_codes_str","_index_codes_str"],["_print_verbose_stages","_print_categorization_stage"],["BioOntologySearchClient.search_bioontology","search"],["DuckDBIndex.remove_entry","DuckDBIndex._delete_denormalized_records"],["Index.add_or_update_entry_from_file","_entry_from_model_file"],["Index.add_or_update_entry_from_file","DuckDBIndex.get"],["DuckDBIndex.remove_entry","DuckDBIndex._drop_search_indexes"],["Index._get_validation_data","Index.get"],["create_info_from_name","_render_finding_description_prompt"],["test_write_operations_rebuild_search_indexes","fake_embedding"],["DuckDBIndex.search","DuckDBIndex._search_semantic"],["edit_model_markdown","create_markdown_edit_agent"],["demo_basic_search","print_section"],["batch_embeddings_for_duckdb","_to_float32"],["DuckDBOntologySearchClient._search_single","DuckDBOntologySearchClient.search"],["BioOntologySearchClient.search_bioontology","OntologySearchProtocol.search"],["Index.update_from_directory","_determine_operations"],["Person.get","DuckDBIndex.get"],["DuckDBIndex._ensure_writable_connection","DuckDBIndex._ensure_connection"],["DuckDBIndex._load_models_metadata","_validate_model"],["DuckDBIndex.remove_entry","_drop_search_indexes"],["_print_verbose_stages","_print_final_output_stage"],["DuckDBOntologySearchClient.search_with_filters","_search_single_with_filters"],["DuckDBIndex.count_people","DuckDBIndex._ensure_connection"],["ReleaseManager.check_existing_tag","run_command"],["BioOntologySearchClient.search_bioontology","DuckDBOntologySearchClient.search"],["DuckDBOntologySearchClient._search_single_with_filters","_find_exact_matches"],["_common_editing_instructions","_combine_instruction_sections"],["find_anatomic_locations","execute_anatomic_search"],["apply_edit","render_changes"],["test_assign_real_attribute_ids_infers_source","_fake_generate"],["main","demo_pagination"],["apply_edit","render_rejections"],["DuckDBOntologySearchClient.search","_search_single"]],"d":{".serena/memories/index_duckdb_migration_status_2025.md":["Index DuckDB Migration Status - 2025-10-09","Overview","Phase 1 Status: 70% Complete","Implementation: src/findingmodel/duckdb_index.py","What's Done \u2705","What's Missing \u274c","Phase 1 Completion Steps","Phase 2 Plan (Future)","Key Decisions","Related Files"],".github/copilot-instructions.md":["Copilot Instructions \u00b7 FindingModel"],".github/prompts/implement-plan.prompt.md":["Implement Development Plan","Approach: One Phase at a Time","Before Starting Phase","During Implementation","After Completing Phase","If Something Goes Wrong","Remember"],".github/prompts/review-plan.prompt.md":["Plan Review Assessment","Context","Review Process","Step 1: Check Historical Context","Step 2: Goal Assessment","Step 3: Work Breakdown Evaluation","Step 4: Technical Approach Validation","Step 5: Completeness Check","Output","Executive Summary"],".serena/memories/ai_assistant_usage_2025.md":["AI Assistant Usage Guidelines (2025-10-06)","Core Principles","Instruction File Strategy","Best Practices (Sources: GitHub Copilot Custom Instructions Guidance, Claude Code Memory Docs)","Testing Guidelines (Updated 2025-10-06)","Model Editing Feature (v0.4)","Required Behaviors for Agents"],".serena/memories/anatomic_location_search_implementation.md":["Anatomic Location Search Implementation","Overview","Architecture Decisions","Two-Agent Pattern","Reusable Components","Testing Patterns Established","Pydantic AI Testing","Project Conventions","Key Implementation Details","Error Handling"],".serena/memories/api_integration.md":["API Integration and External Services","Required API Keys","OpenAI API","Perplexity API","MongoDB (Optional)","Configuration Management","Testing with External APIs","API Error Handling"],".serena/memories/bioontology_integration_2025.md":["BioOntology API Integration (2025-09-09)","Overview","Implementation Details","BioOntologySearchClient","Key Features","API Response Mapping","Integration with Protocol","Performance Characteristics","Configuration Requirements",".env file"],".serena/memories/code_style_conventions.md":["Code Style and Conventions","Python Version","Code Style","Code Patterns","Testing","Error Handling","Naming Conventions","File Organization"],".serena/memories/documentation_corrections_2025.md":["Documentation Corrections - January 2025","Overview","Major Corrections","1. Index Class Documentation","2. find_similar_models() Function","Wrong signature and behavior","Returns list of tuples (wrong)","Actual signature and behavior","Returns SimilarModelAnalysis object with:","- recommendation: \"edit_existing\", \"create_new\", or \"review_needed\""],".serena/memories/duckdb_hybrid_search_research_2025.md":["DuckDB Hybrid Search Best Practices (2025)","Overview","Key Technical Approaches","1. Full-Text Search (FTS)","2. Vector Embeddings","3. Hybrid Search Fusion","4. Schema Design Best Practices","Implementation Pattern from Anatomic Location Search","References"],".serena/memories/index_duckdb_migration_decisions_2025.md":["Index DuckDB Migration - Key Decisions","Architecture Decisions","Drop/Rebuild HNSW Strategy (2025-10-08)","No Foreign Key Constraints (2025-10-08)","Separate Contributor Tables (2025-10-08)","Denormalized Tables (2025-10-08)","Batch Directory Ingestion (2025-10-08)","Read-Only Mode by Default (2025-10-08)","Semantic Search Always Enabled (2025-10-08)","Two-Phase Approach (2025-10-09)"],".serena/memories/instruction_files_plan_2025.md":["Instruction File Alignment Plan (2025-09-28)","Goal","Structure Blueprint","Update Process"],".serena/memories/model_editing_guardrails_2025-09-26.md":["Model Editing Guardrails (September 26, 2025)"],".serena/memories/multi_agent_orchestration_system_2025.md":["Multi-Agent Orchestration System (2025)","Overview","Architecture","Orchestrator Layer","Implementation Agents","Evaluation Agents","Workflow","Evaluation Criteria","Orchestration Patterns","Parallel Processing"],".serena/memories/ontology_concept_search_refactoring.md":["Ontology Concept Search Refactoring (2025-09-04)","Overview","Key Architecture Changes","Performance Optimization (85% improvement)","Pydantic AI Pattern Corrections","Query Generation","Text Normalization Improvements","Post-Processing for Exact Matches","Testing Improvements","Framework Consistency"],".serena/memories/ontology_search_optimizations_2025.md":["Ontology Search Optimizations (2025-09-15)","Performance Improvements Implemented","1. Reduced Default Ontology Set","2. Cohere Reranking Configuration","3. SNOMEDCT Prioritization","4. Code Complexity Management","Architecture Decisions","Protocol-Based Backend Support","Configuration Philosophy","Testing Strategy"],".serena/memories/project_overview.md":["FindingModel Project Overview","Purpose","Tech Stack","Project Structure","Key Features"],".serena/memories/project_state_january_2025.md":["Project State - January 2025","Current Status","\u2705 All Tests Passing","\u2705 Code Quality","\u2705 Documentation","Recent Major Improvements","Test Suite Enhancements","Documentation Fixes","Code Quality Improvements","Known Working Commands"],".serena/memories/protocol_based_architecture_2025.md":["Protocol-Based Architecture Pattern (2025-09-09)","Overview","Key Design Decisions","Protocol Interface Design","Implementation Pattern","Backend Implementations","Auto-Detection and Parallel Execution","Benefits","Flexibility","Performance"],".serena/memories/pydantic_ai_best_practices_2025_09.md":["Pydantic AI Usage Notes (Sep 2025)"],".serena/memories/pydantic_ai_testing_best_practices.md":["Pydantic AI Testing Best Practices","Core Philosophy","Essential Patterns","1. Prevent Accidental API Calls","2. Use TestModel for Simple Testing","3. Use FunctionModel for Complex Behavior","4. Integration Test Pattern","Anti-Patterns to Avoid","\u274c Testing Library Functionality","BAD - tests Pydantic AI, not your code"],".serena/memories/suggested_commands.md":["Development Commands","Primary Commands (using Task)","Testing","Code Quality","Building","Alternative Commands (using uv directly)","Testing","Code Quality","Building","CLI Usage"],".serena/memories/task_completion_checklist.md":["Task Completion Checklist","1. Code Quality Checks (REQUIRED)","2. Run Tests (REQUIRED)","3. Test External APIs (if modified)","4. Verify Specific Changes","5. Check Git Status","Important Notes","When to Skip Checks"],".serena/memories/test_suite_improvements_2025.md":["Test Suite Improvements - January 2025","Overview","Added Test Coverage","1. Index.search() Functionality Tests (test_index.py)","2. AI Tools Integration Tests (test_tools.py)","3. find_similar_models() Coverage (test_tools.py)","4. Error Handling Tests","Linting Fixes Applied","Test Statistics","Running Tests"],"CHANGELOG.md":["Changelog","[0.4.0] - 2025-09-26","Added","Changed","Fixed","Removed","[0.3.3] - 2025-09-04","Added","Changed","Fixed"],"CLAUDE.md":["CLAUDE.md","0. Operate via Serena MCP at all times","1. Project snapshot (see Serena `project_overview`)","2. Architecture touchpoints","3. Coding standards (Serena `code_style_conventions`)","4. Testing + QA (Serena `pydantic_ai_testing_best_practices`)","5. Workflow expectations","6. Documentation alignment","7. Security & secrets","8. Quick Serena reference"],"README.md":["`findingmodel` Package","Features","Installation","Required API Keys","Required for AI features","Optional for enhanced ontology search","Optional for MongoDB indexing","CLI","Interactive Model Editing Demo","Models"],"specs/001-ai-based-finding/contracts/markdown_api.md":["API Contract: Markdown Editing","`export_model_for_editing`","Inputs","Behavior","Output","`edit_model_markdown`","Inputs","Behavior","Output","Post-processing Requirements"],"specs/001-ai-based-finding/contracts/natural_language_api.md":["API Contract: Natural Language Editing","`edit_model_natural_language`","Inputs","Behavior","Output","Post-processing Requirements","Related Tests"],"specs/001-ai-based-finding/plan.md":["Implementation Plan: AI-Based Finding Model Editor","Execution Flow (/plan command scope)","Summary","Technical Context","Technical Context","Constitution Check","Project Structure","Implementation Approach"],"specs/001-ai-based-finding/quickstart.md":["Quickstart: AI-Based Finding Model Editor (Simplified)","Prerequisites","Natural Language Editing","Markdown Editing","User edits markdown_content..."],"specs/001-ai-based-finding/research.md":["Research: AI-Based Finding Model Editor (Expanded)","Technical Context","Pydantic AI Agent Usage Patterns","Testing Pydantic AI Agents","Example: Async Agent Test","Patterns from Existing Code","Rationale"],"specs/001-ai-based-finding/spec.md":["Feature Specification: AI-Based Finding Model Editor","\u26a1 Quick Guidelines","User Scenarios & Testing","Primary User Story","Acceptance Scenarios","Edge Cases","Requirements","Functional Requirements (Minimal Plan)","Key Entities (Minimal Plan)"],"specs/001-ai-based-finding/tasks.md":["Tasks: AI-Based Finding Model Editor","Task List","T001. [P] Project Setup and Linting \u2705 COMPLETED","T002. [P] Contract Test: Natural Language Editing \u2705 COMPLETED","T003. [P] Contract Test: Markdown Editing \u2705 COMPLETED","T004. Implement: Natural Language Editing \u2705 COMPLETED","T005. Implement: Markdown Editing \u2705 COMPLETED","T006. Demo Script: Natural Language Editing \u2705 COMPLETED","T007. Demo Script: Markdown Editing \u2705 COMPLETED","T008. [P] Polish: Documentation and Final Tests \u2705 COMPLETED"],"specs/001-ai-based-finding/team-update-2025-09-26.md":["Team Update \u2014 26 September 2025","Highlights","What To Know","Follow-Up Actions","Lessons Learned"],"tasks/done/anatomic-location-search-implementation-plan.md":["Implementation Plan for Anatomic Location Search Tool","Current Status","Phase 1: Refactor Common Utilities \u2705 COMPLETED","Phase 2: Create Ontology Search Module \u2705 COMPLETED","Phase 3: Add LanceDB Configuration \u2705 COMPLETED","Phase 4: Implement Anatomic Location Search \u2705 COMPLETED","Phase 5: Testing \ud83d\udd04 IN PROGRESS - MAJOR ISSUES IDENTIFIED","Critical Issues Found (2025-08-29):"],"tasks/done/anatomic-location-search-prd.md":["PRD: Anatomic Location Search Tool for FindingModel","Overview","Core Architecture","1. Modular File Structure","2. Core Components","src/findingmodel/tools/ontology_search.py","Table constants","src/findingmodel/tools/common.py (add this function)"],"tasks/duckdb-common-patterns.md":["DuckDB Common Patterns - Code Consolidation Plan","Goal","Analysis: Common Patterns","1. Connection Management \u2705 **EXTRACT**","src/findingmodel/tools/duckdb_utils.py","In DuckDBOntologySearchClient","In DuckDBIndex","2. Embedding Generation \u2705 **EXTRACT**","src/findingmodel/tools/duckdb_utils.py"],"tasks/finding_info_generation_rework_prd.md":["FindingInfo Generation Rework PRD","1. Overview","2. Background","3. Problem Statement","4. Goals & Non-Goals","Goals","Non-Goals","5. User Stories","6. Functional Requirements","7. Non-Functional Requirements"],"tasks/finding_info_generation_rework_tasks.md":["FindingInfo Generation Rework Tasks","Task 1 \u2014 Replace Instructor client with Pydantic AI Agent","Task 2 \u2014 Revise finding description prompt instructions","Task 3 \u2014 Light-touch normalization helper (optional)","Task 4 \u2014 Update CLI and imports","Task 5 \u2014 Add deterministic unit tests for agent behavior","Task 6 \u2014 Documentation and verification"],"tasks/index-duckdb-migration.md":["Index DuckDB Migration Plan - Phase 1","Goal","Current State (2025-10-09)","What's Done \u2705","What's Missing \u274c","Architectural Note","Why Phase 1 First?","TL;DR - What to Do Next","Target State","Schema Design"],"tasks/ontology-concept-search-prd.md":["Product Requirements Document: Comprehensive Ontology Concept Search Tool","Overview","Purpose","Key Differentiators from Anatomic Location Search","Functional Requirements","1. Search Scope","2. Multi-Agent Architecture","3. Output Format","4. Search Strategy","Pydantic AI Agent Architecture"],"tasks/pending-fixes.md":["Pending Fixes and Technical Debt","Anatomic Location Search - Hardcoded Dimensions","Migration Script - Config Usage","Anatomic Location DuckDB Rebuild - Preserve Embeddings","DuckDB Migration Script","Issue: Uses hardcoded embedding configuration","Future Refactoring","Consolidate DuckDB common code"],"tasks/refactoring/01-index-decomposition.md":["Index Class Decomposition Plan - Phase 2","Executive Summary","Current State Analysis (Post-Phase 1)","Two Monolithic Implementations","Common Problems","Key Methods by Responsibility","Database Operations (10 methods)","Validation (6 methods)  ","File Operations (5 methods)","Search (4 methods)"],"tasks/refactoring/02-api-cleanup.md":["API Cleanup and Deprecation Plan","Executive Summary","Current State Analysis","Duplicate Functions Identified","Problems","Target State","Naming Convention","Public API Structure","src/findingmodel/tools/__init__.py","Implementation Plan"],"tasks/refactoring/03-validation-framework.md":["Validation Framework Plan","Executive Summary","Current State Analysis","Problems with Current Validation","Target Architecture","Core Design Pattern: Chain of Responsibility","src/findingmodel/validation/base.py","Specific Validators","src/findingmodel/validation/validators/id_validator.py","src/findingmodel/validation/validators/name_validator.py"],"tasks/refactoring/04-circular-dependencies.md":["Breaking Circular Dependencies Plan","Executive Summary","Current State Analysis","Circular Dependency Map","Problems","Current problematic code","Person references Index directly","Target Architecture","Design Patterns Applied","New Architecture"],"tasks/refactoring/05-performance-optimizations.md":["Performance Optimizations Plan","Executive Summary","Current Performance Analysis","Identified Bottlenecks","Current: Multiple get() calls in validation","Current: Process files one by one","Current: Individual inserts in batch operations","Target Performance Improvements","Optimization Goals","Implementation Details"],"tasks/test-multi-agent-system.md":["Test Multi-Agent System Plan","Goal","Phase 1: Create Simple Utility Function","Phase 2: Add Tests for Utility Function","Notes"],"test/data/pulmonary_embolism.md":["Pulmonary embolism\u2014`OIFM_MSFT_932618`","Attributes","Presence\u2014`OIFMA_MSFT_463871`","Change from prior\u2014`OIFMA_MSFT_592864`","Other presence\u2014`OIFMA_MSFT_463872`","Size\u2014`OIFMA_MSFT_592865`"],"test/data/thyroid_nodule_codes.md":["Thyroid nodule\u2014`OIFM_MGB_274588`","Attributes","Presence\u2014`OIFMA_MGB_771712`","Size\u2014`OIFMA_MGB_337706`","Change from prior\u2014`OIFMA_MGB_337707`"]},"deps":{"notebooks/demo_anatomic_location_search.py":["argparse","asyncio","json","sys","time","pathlib","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search","asyncio","traceback"],"notebooks/demo_bioontology_search.py":["asyncio","sys","time","findingmodel.config","findingmodel.tools.ontology_search","traceback","traceback"],"notebooks/demo_edit_finding_model.py":["__future__","argparse","asyncio","json","shlex","collections.abc","pathlib","typing","prompt_toolkit","prompt_toolkit.completion","prompt_toolkit.formatted_text","prompt_toolkit.history","prompt_toolkit.shortcuts","rich.console","rich.markdown","rich.panel","rich.progress","rich.table","findingmodel.finding_model","findingmodel.tools.add_ids","findingmodel.tools.model_editor"],"notebooks/demo_edit_model_from_markdown.py":["asyncio","random","pathlib","findingmodel.finding_model","findingmodel.tools.model_editor"],"notebooks/demo_find_similar.py":["dotenv","logfire","findingmodel","findingmodel.index","findingmodel.tools","findingmodel.tools.similar_finding_models","asyncio","sys"],"notebooks/demo_ontology_concept_match.py":["argparse","asyncio","sys","time","typing","findingmodel","findingmodel.config","findingmodel.finding_info","findingmodel.tools","findingmodel.tools.ontology_concept_match","traceback"],"notebooks/migrate_anatomic_to_duckdb.py":["asyncio","json","logging","pathlib","typing","duckdb","openai","findingmodel.tools.common","findingmodel.config"],"scripts/release.py":["argparse","hashlib","re","shutil","subprocess","sys","datetime","pathlib","typing","loguru"],"src/findingmodel/abstract_finding_model.py":["typing","findingmodel.finding_model"],"src/findingmodel/cli.py":["asyncio","pathlib","click","rich.console","rich.markdown"],"src/findingmodel/common.py":["re"],"src/findingmodel/config.py":["typing","openai","pydantic","pydantic_settings"],"src/findingmodel/contributor.py":["pathlib","typing","pydantic","typing_extensions"],"src/findingmodel/duckdb_index.py":["__future__","hashlib","collections.abc","contextlib","dataclasses","enum","pathlib","types","duckdb","openai","pydantic","findingmodel","findingmodel.common","findingmodel.config","findingmodel.contributor","findingmodel.finding_model","findingmodel.tools.duckdb_utils"],"src/findingmodel/finding_info.py":["pydantic"],"src/findingmodel/finding_model.py":["random","re","enum","typing","pydantic","findingmodel.contributor"],"src/findingmodel/index.py":["hashlib","collections","enum","pathlib","typing","motor.motor_asyncio","pydantic","pymongo","findingmodel","findingmodel.common","findingmodel.config","findingmodel.contributor","findingmodel.finding_model"],"src/findingmodel/index_code.py":["pydantic"],"src/findingmodel/tools/add_ids.py":["time","httpx","findingmodel","findingmodel.finding_model","warnings"],"src/findingmodel/tools/anatomic_location_search.py":["json","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search"],"src/findingmodel/tools/common.py":["pathlib","instructor","openai","pydantic_ai.models.openai","pydantic_ai.providers.openai","findingmodel","findingmodel.config"],"src/findingmodel/tools/create_stub.py":["findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/duckdb_search.py":["pathlib","typing","duckdb","openai","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/duckdb_utils.py":["__future__","array","collections.abc","pathlib","typing","duckdb","openai","findingmodel.config","findingmodel.tools.common"],"src/findingmodel/tools/finding_description.py":["warnings","typing","pydantic_ai","findingmodel","findingmodel.config","findingmodel.finding_info"],"src/findingmodel/tools/index_codes.py":["typing","findingmodel.finding_model","findingmodel.index_code","warnings"],"src/findingmodel/tools/markdown_in.py":["pathlib","findingmodel.config","findingmodel.finding_info","findingmodel.finding_model","warnings"],"src/findingmodel/tools/model_editor.py":["dataclasses","typing","pydantic","pydantic_ai","pydantic_ai.agent","findingmodel.config","findingmodel.finding_model","findingmodel.tools.add_ids","findingmodel.tools.common"],"src/findingmodel/tools/ontology_concept_match.py":["json","dataclasses","pydantic","pydantic_ai","findingmodel","findingmodel.config","findingmodel.tools.common","findingmodel.tools.ontology_search"],"src/findingmodel/tools/ontology_search.py":["asyncio","typing","cohere","httpx","pydantic","tenacity","findingmodel","findingmodel.config","findingmodel.index_code"],"src/findingmodel/tools/prompt_template.py":["re","pathlib","typing","jinja2","openai.types.chat"],"src/findingmodel/tools/similar_finding_models.py":["json","dataclasses","typing","pydantic","pydantic_ai","typing_extensions","findingmodel","findingmodel.config","findingmodel.index","findingmodel.tools.common","time"],"test/conftest.py":["pathlib","pytest","findingmodel","findingmodel.finding_info","findingmodel.finding_model"],"test/test_anatomic_location_search.py":["unittest.mock","pytest","pydantic_ai.models.test","findingmodel.tools.anatomic_location_search","findingmodel.tools.duckdb_search","findingmodel.tools.ontology_search"],"test/test_contributor.py":["pathlib","typing","pytest","pydantic","findingmodel.contributor"],"test/test_duckdb_index.py":["__future__","asyncio","pathlib","typing","duckdb","pytest","findingmodel","findingmodel.config","findingmodel.duckdb_index","findingmodel.finding_model"],"test/test_findingmodel.py":["findingmodel.contributor","findingmodel.finding_model"],"test/test_findingmodel_md.py":["findingmodel"],"test/test_index.py":["json","shutil","socket","pathlib","typing","pytest","motor.motor_asyncio","pymongo.errors","findingmodel.finding_model","findingmodel.index","findingmodel.index","pymongo.errors","pydantic","asyncio"],"test/test_model_editor.py":["collections.abc","pytest","pydantic_ai","pydantic_ai.models.test","findingmodel.finding_model","findingmodel.tools","findingmodel.tools.add_ids"],"test/test_ontology_concept_match.py":["unittest.mock","pytest","pydantic_ai.models.test","findingmodel.tools.ontology_concept_match","findingmodel.tools.ontology_search","pydantic_ai.models.test","pydantic_ai.models.test","findingmodel.config"],"test/test_ontology_search.py":["inspect","pytest","findingmodel.config","findingmodel.tools.ontology_search","asyncio","unittest.mock","findingmodel.tools.ontology_search","asyncio","findingmodel.tools.ontology_search","unittest.mock","findingmodel.tools.ontology_search","unittest.mock","findingmodel.tools.ontology_search","findingmodel.tools.ontology_search"],"test/test_tools.py":["pathlib","types","unittest.mock","httpx","pytest","pymongo","pymongo.errors","findingmodel.tools","findingmodel.tools.finding_description","findingmodel","findingmodel.config","findingmodel.finding_model","findingmodel.index_code","findingmodel.tools.add_ids","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.finding_model","findingmodel.tools","findingmodel.tools","findingmodel.tools","findingmodel.finding_info","findingmodel.tools","findingmodel.tools","asyncio","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools","findingmodel.tools.similar_finding_models","findingmodel.tools.create_stub","findingmodel.tools.add_ids","concurrent.futures"]},"dir_purposes":{".serena/memories":"Test files and test utilities","notebooks":"Data models and schemas","scripts":"Build and utility scripts","specs/001-ai-based-finding":"Test files and test utilities","src/findingmodel":"Data models and schemas","src/findingmodel/tools":"Data models and schemas","tasks":"Test files and test utilities","test":"Test files and test utilities"},"staleness":1759437057.945523}